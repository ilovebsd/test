package gateway;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.GenericAddress;
import org.snmp4j.smi.Integer32;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.UnsignedInteger32;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.smi.*;

public class AutomaticDialingSNMP {

	private OctetString get_community;
	private Address targetaddress;
	private TransportMapping transport;
	private CommunityTarget comtarget;
	private PDU pdu;
	private ResponseEvent response;
	private Snmp snmp;

	public void snmpSetConf(String strAddress, String community) {

		try {
			System.out.println("######### SNMP Log : 02");
			
			get_community = new OctetString(community);
			strAddress = strAddress + "/" + "161";
			
			System.out.println("######### SNMP Log : 03");
			System.out.println("######### SNMP Log : 03-2 "+strAddress);
			
			targetaddress = new UdpAddress(strAddress);
			transport = new DefaultUdpTransportMapping();
			System.out.println("######### SNMP Log : 04");
			transport.listen();
			
			System.out.println("######### SNMP Log : 05");
			
			comtarget = new CommunityTarget();
			System.out.println("######### SNMP Log : 06");
			comtarget.setCommunity(get_community);
			System.out.println("######### SNMP Log : 07");
			comtarget.setVersion(SnmpConstants.version1);
			System.out.println("######### SNMP Log : 08");
			comtarget.setAddress(targetaddress);
			System.out.println("######### SNMP Log : 09");
			comtarget.setRetries(2);
			System.out.println("######### SNMP Log : 10");
			comtarget.setTimeout(5000);
			System.out.println("######### SNMP Log : 11");
			
			pdu = new PDU();
			snmp = new Snmp(transport);
			System.out.println("Connection Success");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void snmpCloseSession() {

		try {
			snmp.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String snmpGet() {

		String strOID		= "";
		String str 			= "";
		String str1			= "";
		String str2			= "";
		String strTemp1		= "";
		String strTemp2		= "";
		String strGetNumber	= "1.3.6.1.4.1.5003.9.10.3.1.1.4.12.21.1.5";
		String strGetUsed	= "1.3.6.1.4.1.5003.9.10.3.1.1.4.12.21.1.6";
		
		try {
			for(int i=0; i<=11; i++){
				strOID = strGetNumber+"."+i;
				pdu.add(new VariableBinding(new OID(strOID)));
				pdu.setType(PDU.GET);				
				response = snmp.get(pdu, comtarget);
				
				if (response.getResponse() != null) {
					if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
						PDU pduresponse = response.getResponse();
	
						strTemp1 = pduresponse.getVariableBindings().firstElement().toString();	
						if (strTemp1.contains("=")) {
							int len = strTemp1.indexOf("=");
							strTemp1 = strTemp1.substring(len + 1, strTemp1.length());
						}
						
						if("".equals(strTemp1)){
							str1 = str1+" ;";
						}else{
							str1 = str1+strTemp1+";";
						}
					}
				} else {
					System.out.println("Timeout occured");
					//pdu.clear();
					//response = null;
					//str1 = "error";
					//return str1;
				}
	
				pdu.clear();
				response = null;
			}
			
			for(int i=0; i<=11; i++){
				strOID = strGetUsed+"."+i;
				pdu.add(new VariableBinding(new OID(strOID)));				
				pdu.setType(PDU.GET);
				response = snmp.get(pdu, comtarget);
				
				if (response.getResponse() != null) {
					if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {						
						PDU pduresponse = response.getResponse();
	
						strTemp2 = pduresponse.getVariableBindings().firstElement().toString();
						if (strTemp2.contains("=")) {
							int len = strTemp2.indexOf("=");
							strTemp2 = strTemp2.substring(len + 1, strTemp2.length());
						}
						
						if("".equals(strTemp2)){
							str2 = str2+" ;";
						}else{
							str2 = str2+strTemp2+";";
						}
					}
				} else {
					System.out.println("Timeout occured");
					//pdu.clear();
					//response = null;
					//str2 = "error";
					//return str2;
				}
	
				pdu.clear();
				response = null;
			}
			
			str = str1+"|"+str2;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public Snmp retSnmp() {
		return snmp;
	}
	
	public String getSNMP(String snmpIP) {
		AutomaticDialingSNMP automaticDialingSNMP = new AutomaticDialingSNMP();

		automaticDialingSNMP.snmpSetConf(snmpIP,"public");
		
		String Result= automaticDialingSNMP.snmpGet();
		
		automaticDialingSNMP.snmpCloseSession();
		
		return Result;
	}

	public void snmpSet(String strAddress, String community, String strOID, String Value, int type)
	{
		strAddress= strAddress+"/"+"161";
		Address targetAddress = GenericAddress.parse(strAddress);
		Snmp snmp;
		try
		{
			TransportMapping transport = new DefaultUdpTransportMapping();
			snmp = new Snmp(transport);
			transport.listen();
			CommunityTarget target = new CommunityTarget();
			target.setCommunity(new OctetString(community));
			target.setAddress(targetAddress);
			target.setRetries(2);
			target.setTimeout(5000);
			target.setVersion(SnmpConstants.version1);
			PDU pdu = new PDU();
			
			if(type==1){
				int temp = Integer.parseInt(Value);
				pdu.add(new VariableBinding(new OID(strOID), new Integer32(temp)));
			}else if(type==2){
				int temp = Integer.parseInt(Value);
				pdu.add(new VariableBinding(new OID(strOID), new UnsignedInteger32(temp)));
			}else if(type==3){
				pdu.add(new VariableBinding(new OID(strOID), new OctetString(Value)));
			}else if(type==4){
				// 
				pdu.add(new VariableBinding(new OID("1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.2.0"), new Integer32(4)));
				pdu.add(new VariableBinding(new OID(strOID), new OctetString(Value)));
				pdu.add(new VariableBinding(new OID("1.3.6.1.4.1.5003.9.10.3.1.2.7.12.0"), new Integer32(0)));
			}else if(type==5){
				// 
				pdu.add(new VariableBinding(new OID(strOID), new OctetString(Value)));
				pdu.add(new VariableBinding(new OID("1.3.6.1.4.1.5003.9.10.3.1.2.7.12.0"), new Integer32(0)));
			}
			
			pdu.setType(PDU.SET);

			ResponseListener listener = new ResponseListener() {
				public void onResponse(ResponseEvent event) {
					try{
						((Snmp)event.getSource()).cancel(event.getRequest(), this);
						System.out.println("Set Status is: "+event.getResponse().getErrorStatusText());
					}catch(Exception e){
						
					}
				}
			};
			snmp.send(pdu, target, null, listener);
			snmp.close();
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}

	public String getCkeckSNMP(String snmpIP) {
		AutomaticDialingSNMP automaticDialingSNMP = new AutomaticDialingSNMP();
		
		System.out.println("######### SNMP Log : 01");
		
		automaticDialingSNMP.snmpSetConf(snmpIP,"public");
		
		String Result= automaticDialingSNMP.snmpCheckGet();
		
		automaticDialingSNMP.snmpCloseSession();
		
		return Result;
	}

	public String snmpCheckGet() {

		String strOID		= "";
		String str 			= "";
		String str1			= "";
		String strTemp1		= "";
		String strGetNumber	= "1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.5.0";
		
		try {
			strOID = strGetNumber;
			pdu.add(new VariableBinding(new OID(strOID)));
			pdu.setType(PDU.GET);				
			response = snmp.get(pdu, comtarget);
			
			if (response.getResponse() != null) {
				if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
					PDU pduresponse = response.getResponse();

					strTemp1 = pduresponse.getVariableBindings().firstElement().toString();	
					if (strTemp1.contains("=")) {
						int len = strTemp1.indexOf("=");
						strTemp1 = strTemp1.substring(len + 1, strTemp1.length());
					}
					
					str = strTemp1;
				}
			} else {
				System.out.println("Timeout occured");
				//pdu.clear();
				//response = null;
				//str1 = "error";
				//return str1;
			}

			pdu.clear();
			response = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

}

