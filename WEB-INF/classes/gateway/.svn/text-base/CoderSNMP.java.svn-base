package gateway;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.smi.*;

public class CoderSNMP {

	private OctetString get_community;
	private Address targetaddress;
	private TransportMapping transport;
	private CommunityTarget comtarget;
	private PDU pdu;
	private ResponseEvent response;
	private Snmp snmp;

	public void snmpSetConf(String strAddress, String community) {

		try {

			get_community = new OctetString(community);
			strAddress = strAddress + "/" + "161";

			targetaddress = new UdpAddress(strAddress);
			transport = new DefaultUdpTransportMapping();
			transport.listen();

			comtarget = new CommunityTarget();
			comtarget.setCommunity(get_community);
			comtarget.setVersion(SnmpConstants.version1);
			comtarget.setAddress(targetaddress);
			comtarget.setRetries(2);
			comtarget.setTimeout(5000);

			pdu = new PDU();
			snmp = new Snmp(transport);
			System.out.println("Connection Success");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void snmpCloseSession() {

		try {
			snmp.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String snmpGet() {

		String strOID		= "";
		String str 			= "";
		String oidTemp		= "";
		
		try {
			for(int i=0; i<=4; i++){
				String	nameTemp 	= "";
				String	packetTemp 	= "";
				String	rateTemp 	= "";
				String	silenceTemp = "";
				
				//oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5."+i;
				oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5."+i;
				strOID 	= oidTemp;
				
				pdu.add(new VariableBinding(new OID(strOID)));
				pdu.setType(PDU.GET);
				response = snmp.get(pdu, comtarget);
				
				if (response.getResponse() != null) {
					if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
						PDU pduresponse = response.getResponse();
	
						nameTemp = pduresponse.getVariableBindings().firstElement().toString();
	
						if (nameTemp.contains("=")) {
							int len = nameTemp.indexOf("=");
							nameTemp = nameTemp.substring(len + 1, nameTemp.length());
						}						
					}
				} else {
					System.out.println("Timeout occured");
					//pdu.clear();
					//response = null;
					//str1 = "error";
					//return str1;
				}
	
				pdu.clear();
				response = null;
				
				if("".equals(nameTemp)){
					str = str+" ; ; ; ";
				}else{
					str = str+nameTemp+";";
					
					// 
					//oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6."+i;
					oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6."+i;
					strOID 	= oidTemp;
					pdu.add(new VariableBinding(new OID(strOID)));
					pdu.setType(PDU.GET);
					response = snmp.get(pdu, comtarget);
					
					if (response.getResponse() != null) {
						if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
							PDU pduresponse = response.getResponse();
		
							packetTemp = pduresponse.getVariableBindings().firstElement().toString();
		
							if (packetTemp.contains("=")) {
								int len = packetTemp.indexOf("=");
								packetTemp = packetTemp.substring(len + 1, packetTemp.length());
							}						
						}
					} else {
						System.out.println("Timeout occured");
						//pdu.clear();
						//response = null;
						//str1 = "error";
						//return str1;
					}
		
					pdu.clear();
					response = null;
					
					str = str+packetTemp+";";
					
					
					//
					//oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7."+i;
					oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7."+i;
					strOID 	= oidTemp;
					pdu.add(new VariableBinding(new OID(strOID)));
					pdu.setType(PDU.GET);
					response = snmp.get(pdu, comtarget);
					
					if (response.getResponse() != null) {
						if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
							PDU pduresponse = response.getResponse();
		
							rateTemp = pduresponse.getVariableBindings().firstElement().toString();
		
							if (rateTemp.contains("=")) {
								int len = rateTemp.indexOf("=");
								rateTemp = rateTemp.substring(len + 1, rateTemp.length());
							}						
						}
					} else {
						System.out.println("Timeout occured");
						//pdu.clear();
						//response = null;
						//str1 = "error";
						//return str1;
					}
		
					pdu.clear();
					response = null;
					
					str = str+rateTemp+";";
					
					
					//
					//oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9."+i;
					oidTemp = "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9."+i;
					strOID 	= oidTemp;
					pdu.add(new VariableBinding(new OID(strOID)));
					pdu.setType(PDU.GET);
					response = snmp.get(pdu, comtarget);
					
					if (response.getResponse() != null) {
						if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
							PDU pduresponse = response.getResponse();
		
							silenceTemp = pduresponse.getVariableBindings().firstElement().toString();
		
							if (silenceTemp.contains("=")) {
								int len = silenceTemp.indexOf("=");
								silenceTemp = silenceTemp.substring(len + 1, silenceTemp.length());
							}						
						}
					} else {
						System.out.println("Timeout occured");
						//pdu.clear();
						//response = null;
						//str1 = "error";
						//return str1;
					}
		
					pdu.clear();
					response = null;
					
					str = str+silenceTemp;					
				}

				str = str+"|";
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public Snmp retSnmp() {
		return snmp;
	}
	
	public String getSNMP(String snmpIP) {
		CoderSNMP coderSNMP = new CoderSNMP();

		coderSNMP.snmpSetConf(snmpIP,"public");
		
		String Result= coderSNMP.snmpGet();
		
		coderSNMP.snmpCloseSession();
		
		return Result;
	}

	

}

