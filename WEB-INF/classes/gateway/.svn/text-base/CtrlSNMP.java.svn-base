package gateway;

import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.TransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.Address;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.smi.*;

public class CtrlSNMP {

	private OctetString get_community;
	private Address targetaddress;
	private TransportMapping transport;
	private CommunityTarget comtarget;
	private PDU pdu;
	private ResponseEvent response;
	private Snmp snmp;

	public void snmpSetConf(String strAddress, String community) {

		try {

			get_community = new OctetString(community);
			strAddress = strAddress + "/" + "161";

			targetaddress = new UdpAddress(strAddress);
			transport = new DefaultUdpTransportMapping();
			transport.listen();

			comtarget = new CommunityTarget();
			comtarget.setCommunity(get_community);
			comtarget.setVersion(SnmpConstants.version1);
			comtarget.setAddress(targetaddress);
			comtarget.setRetries(2);
			comtarget.setTimeout(5000);

			pdu = new PDU();
			snmp = new Snmp(transport);
			System.out.println("Connection Success");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void snmpCloseSession() {

		try {
			snmp.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String snmpGet(String strOID) {

		String str = "";

		try {
			pdu.add(new VariableBinding(new OID(strOID)));
			pdu.setType(PDU.GET);
			response = snmp.get(pdu, comtarget);
			
			if (response.getResponse() != null) {
				if (response.getResponse().getErrorStatusText().equalsIgnoreCase("Success")) {
					PDU pduresponse = response.getResponse();

					str = pduresponse.getVariableBindings().firstElement().toString();

					if (str.contains("=")) {
						int len = str.indexOf("=");
						str = str.substring(len + 1, str.length());
					}
				}
			} else {
				System.out.println("Timeout occured");
				pdu.clear();
				response = null;
				str = "error";
				return str;
			}

			pdu.clear();
			response = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public Snmp retSnmp() {
		return snmp;
	}
	
	public String getSNMP(String snmpIP, String oID) {
		CtrlSNMP ctrlSNMP = new CtrlSNMP();

		ctrlSNMP.snmpSetConf(snmpIP,"public");
		
		String Result= ctrlSNMP.snmpGet(oID);
		
		ctrlSNMP.snmpCloseSession();
		
		return Result;
	}

	
	public static void setSNMP(String snmpIP, String oID, int Value, int type) {
		CtrlSNMP ctrlSNMP = new CtrlSNMP();

		ctrlSNMP.snmpSet(snmpIP, "private", oID, Value, type);
	}

	public void snmpSet(String strAddress, String community, String strOID, int Value, int type)
	{
		strAddress= strAddress+"/"+"161";
		Address targetAddress = GenericAddress.parse(strAddress);
		Snmp snmp;
		try
		{
			TransportMapping transport = new DefaultUdpTransportMapping();
			snmp = new Snmp(transport);
			transport.listen();
			CommunityTarget target = new CommunityTarget();
			target.setCommunity(new OctetString(community));
			target.setAddress(targetAddress);
			target.setRetries(2);
			target.setTimeout(5000);
			target.setVersion(SnmpConstants.version1);
			PDU pdu = new PDU();
			
			if(type==1){
				pdu.add(new VariableBinding(new OID(strOID), new Integer32(Value)));
			}else{
				pdu.add(new VariableBinding(new OID(strOID), new UnsignedInteger32(Value)));
			}
			
			pdu.setType(PDU.SET);

			ResponseListener listener = new ResponseListener() {
				public void onResponse(ResponseEvent event) {
					try{
						((Snmp)event.getSource()).cancel(event.getRequest(), this);
						System.out.println("Set Status is: "+event.getResponse().getErrorStatusText());
					}catch(Exception e){
						
					}
				}
			};
			snmp.send(pdu, target, null, listener);
			snmp.close();
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}

}

