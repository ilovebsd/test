/*
 * NetworkNIC.java
 *
 * Created on 2006년 10월 16일 (월), 오후 5:32
 * Copyright 2006 Acromate, Inc. All rights reserved.
 */

package com.acromate.system.hardware;

import com.acromate.data.DataIO;
import com.acromate.util.Logger;

/**
 *
 * @author 아크로메이트 기술연구소
 * @version 2.0.0
 */
public class Storage extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());
    public static final int STATUS_NORMAL = 0 ;
    public static final int STATUS_CONNECTION_TIMEOUT = 1 ;
    public static final int STATUS_LOGIN_FAIL = 2 ;
    public static final int STATUS_ERROR = -1 ;

    private int         errorcode;
    private int           used = 0 ;
    private int           total = 0 ;
    private int           status  = 0   ;
    private String           errorMessage  = ""   ;

    public Storage() {}

    public void setStatus(int status) { this.status = status ; }
    public int getStatus() { return this.status ; }

    public void setUsed(int used) { this.used = used ; }
    public int getUsed() { return this.used ; }
    public String getErrorMessage() { return this.errorMessage ; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage ; }

    public void setTotal(int total) {
		this.total = total ;
    }
    public int getTotal() {
		return this.total ;
    }
    public int getUsage() {
        if ( total == 0 ) return 0 ;
        else return 100 *  getUsed() /getTotal() ;
    }
    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field);
        if(compareFieldID(temp, "errorMessage") == true) {
            if(!value.equals("")) errorMessage = value;
            return 0;
        }
        if(compareFieldID(temp, "status") == true) {
            if(!value.equals("")) status = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "usage") == true) {
            return 0;
        }
        if(compareFieldID(temp, "total") == true) {
            if(value.equals("0")) ;
            else if(!value.equals("")) total = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "used") == true) {
            if(!value.equals("")) used = Integer.valueOf(value);
            return 0;
        }
        log.error("Storage - Not founded field :" + field);
        return (-1);
    }

    /**
     *
     */
    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "errorMessage", idx, value) == true) {
            errorcode = getString(errorMessage.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "status", idx, value) == true) {
            errorcode = getInteger(status, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "total", idx, value) == true) {
            errorcode = getInteger(total, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "used", idx, value) == true) {
            errorcode = getInteger(used, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "usage", idx, value) == true) {
            errorcode = getInteger(getUsage(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0) ;
    }
}

