package com.acromate.system.hardware;

import com.acromate.data.DataIO;
import com.acromate.util.Logger;
import com.acromate.system.ManSystem;
import com.acromate.driver.core.SystemSingleton;

public class LanCard extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int         errorcode;
    private HotLine     hotLine;
    private Service     service;
    private Manager     manager;
    private ManSystem manSystem;

    public LanCard( ManSystem manSystem ) {
        this.manSystem = manSystem;
        this.hotLine = new HotLine(manSystem);
        this.service = new Service(manSystem);
        this.manager = new Manager(manSystem);
    }

    public void setHotLine(HotLine hotLine) { this.hotLine = hotLine; }
    public HotLine getHotLine() { return this.hotLine; }

    public void setService(Service service) { this.service = service; }
    public Service getService() { return this.service; }

    public void setManager(Manager manager) { this.manager = manager; }
    public Manager getManager() { return this.manager; }



     /**
     *
     * @param field
     * @return
     */
    public DataIO getFieldObject(String field) {
        DataIO result = null;
        if(field != null && field.trim().length() > 0) {
            StringBuilder temp = new StringBuilder(field.toLowerCase());

            if(compareFieldID(temp, "heartbeat") == true) {
                log.info("heartbeat field object");
                return hotLine.getFieldObject(temp.toString());
            }
            if (compareFieldID(temp, "hotline") == true) {
                log.info("heartbeat field object");
                return hotLine.getFieldObject(temp.toString());
            }
            if (compareFieldID(temp, "service") == true) {
                log.info("service field object");
                return service.getFieldObject(temp.toString());
            }
            if (compareFieldID(temp, "manager") == true) {
                log.info("manager field object");
                return manager.getFieldObject(temp.toString());
            }
        }   return super.getFieldObject(field);
    }

    /**
     *
     * @param field
     * @param value
     * @return
     */
    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "heartbeat") == true) {
            return hotLine.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "hotline") == true) {
            return hotLine.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "service") == true) {
            return service.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "manager") == true) {
            return manager.setParam(temp.toString(), value);
        }
        log.error("LanCard - Not founded field :" + field);
        return(-1);
    }

    /**
     *
     * @param field
     * @param index
     * @param value
     * @param length
     * @return
     */
    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }

        if(compareFieldID(fldAlias, "heartbeat", idx, value) == true) {
            errorcode = hotLine.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "service", idx, value) == true) {
            errorcode = service.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "manager", idx, value) == true) {
            errorcode = manager.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
    public void removeAll() {
        service.removeAll();
        manager.removeAll();
        hotLine.removeAll();
        DataIO systemHandler = SystemSingleton.getInstance().getHandler();
        systemHandler.callMethod("", "clearNetworkLine", manSystem.getGroupId(), manSystem.getHwClusterId(), manSystem.getHwId());
    }
}
