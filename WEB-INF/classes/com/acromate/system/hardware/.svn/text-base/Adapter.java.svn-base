package com.acromate.system.hardware;

import com.acromate.data.DataIO;
import com.acromate.util.Logger;
import com.acromate.util.Str;
import com.acromate.data.code.CheckConst;
import com.acromate.system.ManSystem;
import com.acromate.dataio.server.alarm.AlarmObject;
import com.acromate.util.TimeUtil;
import com.acromate.driver.core.AlarmSingleton;

/**
 *
 * @author 아크로메이트 기술연구소
 * @version 2.0.0
 */
public class Adapter extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int           errorcode;
    private int           lineType;
    private boolean         status;
    private StringBuilder  id;
    private StringBuilder  address;
    private ManSystem manSystem;
    public static int LINE_SERVICE = 1;
    public static int LINE_HEARTBEAT = 2;
    public static int LINE_MANAGER = 3;

    /** Creates a new instance of Adapter */
    public Adapter(ManSystem manSystem, int lineType) {
        this.address = new StringBuilder();
        this.id = new StringBuilder();
        this.lineType = lineType;
        this.manSystem = manSystem;
    }

    public String getClassID() {
        return id.toString();
    }

    public String getAddress() {
        return address.toString();
    }

    public void setStatus(boolean status) {
            // 장애 발생 / 해지
            this.status = status;
            if ( status == false ) {
                // alarm
                AlarmObject alarmObject = new AlarmObject();
                alarmObject.setSysGroupID(manSystem.getGroupId());
                alarmObject.setHwClusterID(manSystem.getHwClusterId());
                alarmObject.setstrHwID(manSystem.getHwId());
                alarmObject.setClusterID(manSystem.getClusterId());
                String script = Str.cover(manSystem.getGroupId()) + Str.cover(manSystem.getHwClusterId()) + Str.cover(manSystem.getHwId());
                alarmObject.setSystemPath(script);
                if ( lineType == LINE_HEARTBEAT)  {
                    alarmObject.setObjectPath("lan.heartbeat("+id.toString()+")");
                    alarmObject.setObjectName("HEARTBEAT LAN");
                }

                else if ( lineType == LINE_SERVICE)  {
                    alarmObject.setObjectPath("lan.service("+id.toString()+")");
                    alarmObject.setObjectName("SERVICE LAN");
                }
                else if ( lineType == LINE_MANAGER)  {
                    alarmObject.setObjectPath("lan.manager("+id.toString()+")");
                    alarmObject.setObjectName("MANAGEMENT LAN");
                }
                alarmObject.setMessageType(CheckConst.MESSAGE_TYPE_ALARM);
                alarmObject.setAlarmType(CheckConst.ALARM_TYPE_GENERAL);
                alarmObject.setAlarmLevel(CheckConst.ALARM_LEVEL_MAJOR);
                alarmObject.setViewInfo(1);
                alarmObject.setAlarmMessage(alarmObject.getObjectName() +" IPAddress " + address + " down");
                alarmObject.setAlarmCode("30009");
                alarmObject.setAlarmName("LAN Check");
                String strTime = TimeUtil.ConvertMillisecondtoDateString(System.currentTimeMillis());
                alarmObject.setCheckTime(strTime);
                alarmObject.setAutoCloseWait(80);
                DataIO alarmHanler = AlarmSingleton.getInstance().getHandler();
                if ( alarmHanler != null ) alarmHanler.callMethod("", "handlerAlarm", alarmObject );
            }  else {
                //ClearAlarm
                String systemPath = Str.cover(manSystem.getGroupId()) + Str.cover(manSystem.getHwClusterId()) + Str.cover(manSystem.getHwId());
                String objectPath = "";
                if ( lineType == LINE_HEARTBEAT)  {
                    objectPath = "lan.heartbeat("+id.toString()+")" ;
                }
                else if ( lineType == LINE_SERVICE)  {
                    objectPath = "lan.service("+id.toString()+")" ;
                }
                else if ( lineType == LINE_MANAGER)  {
                    objectPath = "lan.manager("+id.toString()+")" ;
                }
                DataIO alarmHanler = AlarmSingleton.getInstance().getHandler();
                if ( alarmHanler != null ) alarmHanler.callMethod("", "autoClearAlarm", systemPath, objectPath );
            }
    }
    public boolean getStatus() { return this.status; }
    public int getLineType() { return this.lineType; }

    /**
     *
     * @param field
     * @param value
     * @return
     */
    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field);
        if(compareFieldID(temp, "id") == true) {
            return setString(id, value);
        }
        if(compareFieldID(temp, "address") == true) {
            return setString(address, value);
        }
        if(compareFieldID(temp, "status") == true) {
            setStatus(Str.CheckNullBoolean(value));
            return 0;
        }
        log.error("Adapter - Not founded field :" + field);
        return(-1);
    }

    /**
     *
     * @param field
     * @param index
     * @param value
     * @param length
     * @return
     */
    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder len  = new StringBuilder();
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }

        if(compareFieldID(fldAlias, "address", idx, value) == true) {
            errorcode = getString(getAddress(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "id", idx, value) == true) {
            errorcode = getString(id.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "status", idx, value) == true) {
            errorcode = getString(Boolean.toString(status), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }

}
