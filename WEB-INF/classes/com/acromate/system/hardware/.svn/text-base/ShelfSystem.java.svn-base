/*
 * SystemShelf.java
 *
 * Created on 2006년 9월 29일 (금), 오후 7:33
 * Copyright 2006 Acromate, Inc. All rights reserved.
 */

package com.acromate.system.hardware;

import com.acromate.data.DataIO;
import com.acromate.data.ListIO;
import com.acromate.dataio.server.task.shape.IbladeServerInfo;

import com.acromate.util.Logger;
import java.util.ArrayList;

import com.acromate.system.hardware.FanList;
import com.acromate.system.hardware.PowerList;

/**
 *
 * @author 아크로메이트 기술연구소
 * @verion 2.0.0
 */
public class ShelfSystem extends ListIO {
    public static final int STATUS_NORMAL = 0 ;
    public static final int STATUS_CONNECTION_TIMEOUT = 1 ;
    public static final int STATUS_LOGIN_FAIL = 2 ;

    public static final int TYPE_NORMAL_SERVER = 0 ;
    public static final int TYPE_BLADE_SERVER = 1 ;
    public static final int TYPE_STORAGE_SERVER = 2 ;

    private Logger log = Logger.getLogger(this.getClass());

    private String  shelfId  = "";       /* System shelf shelf Id */
    private String  shelfName  = "";     /* System shelf shelf name */
    private int     shelfType  = 0   ;
    private int     status  = 0   ;
    private FanList fanList = new FanList();
    private PowerList powerList = new PowerList();
    private ControlerList controlerList = new ControlerList();

    private String  address  = "";
    private String  loginID  = "";
    private String  loginPwd  = "";

    private String  taskHandler  = "";     /* System shelf shelf name */
    private IbladeServerInfo task = null ;

    public ShelfSystem() {}

    public ShelfSystem(String shelfId,String shelfName, int shelfType) {
        this.shelfId   = shelfId;
        this.shelfName = shelfName;
        this.shelfType = shelfType;
    }

    public void setStatus(int status) { this.status = status ; }
    public int getStatus() { return this.status ; }

    public void setShelfType(int shelfType) { this.shelfType = shelfType ; }
    public int getShelfType() { return this.shelfType ; }

    public void setTask(IbladeServerInfo task) { this.task = task ; }
    public IbladeServerInfo getTask() { return this.task ; }

    public ArrayList getGroups() { return this.list; }

    public ControlerList getControlerList() { return this.controlerList; }

    public FanList getFanList() { return this.fanList; }

    public PowerList getPowerList() {
        return this.powerList;
    }

    public void setShelfId(String shelfId) { this.shelfId = shelfId; }
    public String getShelfId() { return this.shelfId.replace("'",""); }

    public void setShelfName(String shelfName) { this.shelfName = shelfName; }
    public String getShelfName() { return this.shelfName; }

    public void setAddress(String address) { this.address = address; }
    public String getAddress() { return this.address; }

    public void setLoginID(String loginID) { this.loginID = loginID; }
    public String getLoginID() { return this.loginID; }

    public void setLoginPwd(String loginPwd) { this.loginPwd = loginPwd; }
    public String getLoginPwd() { return this.loginPwd; }

    public void setTaskHandler(String taskHandler) { this.taskHandler = taskHandler; }
    public String getTaskHandler() { return this.taskHandler; }

    /**
     *
     * @return
     */
    public String getClassID() {
        return shelfId;
    }

    public DataIO getFieldObject(String field) {
        DataIO result = null;
        if(field != null && field.trim().length() > 0) {
            //StringBuilder temp = new StringBuilder(field.toLowerCase());
            StringBuilder temp = new StringBuilder(field);
            if(compareFieldID(temp, shelfId.toString())  == true) {
                return this;
            }
        }   return super.getFieldObject(field);
    }

    public Object callMethod(String method, Object... argument){
        if (method.equals("switchOver")) {
            task.switchOver();
        } else if (method.equals("changeFanLevel")) {
            task.changeFanLevel((String)((Object[])argument[0])[0]);
        }
        return -1;
    }
    /**
     *
     * @param field
     * @param index
     * @param value
     * @param length
     * @return
     */

   /* operations //////////////////////////// */

    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field);
        if(compareFieldID(temp, "shelfName") == true) {
            if(!value.equals("")) shelfName = value;
            return 0;
        }
        if(compareFieldID(temp, "shelfId") == true) {
            if(!value.equals("")) shelfId = value;
            return 0;
        }
        if(compareFieldID(temp, "status") == true) {
            if(value.equals("0")) ;
            else if(!value.equals("")) status = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "shelfType") == true) {
            if(value.equals("0")) ;
            else if(!value.equals("")) shelfType = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "loginID") == true) {
            if(!value.equals("")) loginID = value;
            return 0;
        }
        if(compareFieldID(temp, "loginPwd") == true) {
            if(!value.equals("")) loginPwd = value;
            return 0;
        }
        if(compareFieldID(temp, "taskHandler") == true) {
            if(!value.equals("")) taskHandler = value;
            return 0;
        }
        if(compareFieldID(temp, "address") == true) {
            if(!value.equals("")) address = value;
            return 0;
        }
        if(compareFieldID(temp, "fanList") == true) {
            return fanList.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "powerList") == true) {
            return powerList.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "controlerList") == true) {
            return controlerList.setParam(temp.toString(), value);
        }
        return super.setFieldData( field,  value);
    }

    protected int getFieldData(String field, Index idx , StringBuilder value) {
        int     errorcode = 0;
        boolean resultVal = false;
        StringBuilder len  = new StringBuilder();
        StringBuilder fldAlias;

        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if( field != null && field.toLowerCase().equals("nodelist") == true ) {
            idx.v = -1;
            return super.getFieldData(null, idx, value);
        }
        if(compareFieldID(fldAlias, "status", idx, value) == true) {
            errorcode = getInteger(status, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "shelfType", idx, value) == true) {
            errorcode = getInteger(shelfType, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "shelfName", idx, value) == true) {
            errorcode = getString(shelfName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "shelfId", idx, value) == true) {
            errorcode = getString(shelfId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "loginID", idx, value) == true) {
            errorcode = getString(loginID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "loginPwd", idx, value) == true) {
            errorcode = getString(loginPwd.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "taskHandler", idx, value) == true) {
            errorcode = getString(taskHandler.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "address", idx, value) == true) {
            errorcode = getString(address.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "fanList", idx, value) == true) {
            errorcode = fanList.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "powerList", idx, value) == true) {
            errorcode = powerList.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "controlerList", idx, value) == true) {
            errorcode = controlerList.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }

        return super.getFieldData(field, idx, value);
    }

    /**
     *
     * @return
     */
    protected DataIO newListNode() {
        log.info("ObjectPath is created");
        return new ObjectPath();
    }

}
