/*
 * EmsSystem.java
 *
 * Created on 2006년 9월 29일 (금), 오전 11:04
 * Copyright 2006 Acromate, Inc. All rights reserved.
 */
package com.acromate.system;

import com.acromate.data.DataIO;
import com.acromate.util.Logger;

/**
 *
 * @author 아크로메이트 기술연구소
 * @version 1.0.0
 */
public class EmsSystem  extends CustomSystem {
    private Logger log = Logger.getLogger(this.getClass());

    private int       errorcode;
    private int       permitLevel; /** User permission level       */
    private String     permitGroup; /** User permission group       */

    /** Creates a new instance of EmsSystem */
    public EmsSystem() {

    }

    /**
     * Returns ems configuration data object
     * @return
     */
    public DataIO getConfig() {
        return config;
    }

    /**
     *
     * @return
     */
    public DataIO getConfigBak() {
        return configbk;
    }

    /**
     *
     * @return
     */
    public int getPermitLevel() {
        return this.permitLevel;
    }

    /**
     *
     * @return
     */
    public String getPermitGroup() {
        return this.permitGroup;
    }

    /**
     *
     * @return
     */
    public DataIO getActiveSystem() {
        if(procStatus > 0 )
              return this;
        else return null;
    }

    /**
     * Initialize ems system service
     * @return
     */
    public boolean initSystem() {
        boolean result = true;
        if(database != null) {
            result = (Boolean)database.callMethod("", "initConnection");
            if(result) log.info("EMS system is started");
        }   return result;
    }

    /**
     * Starting ems system service
     * @return
     */
    public boolean startSystem() {
        return true;
    }

    /**
     *  Fianalize ems system service
     */
    public void finalSystem() {
        if(database != null) {
            database.callMethod("", "closeConnection");
        }

        if(network != null) {
                network.callMethod("", "finalService");
        }
    }

    /**
     *
     * @return
     */
    public String getClassID() {
        return processId.toString();
    }

    /**
     *
     * @param field
     * @return
     */
    public DataIO getFieldObject(String field) {
        DataIO result = null;
        if(field != null && field.trim().length() > 0) {
            StringBuilder temp = new StringBuilder(field);
            if(compareFieldID(temp, "config")  == true) {
                return config.getFieldObject(temp.toString());
            }
            if(compareFieldID(temp, "database") == true) {
                return database.getFieldObject(temp.toString());
            }
            if(compareFieldID(temp, "network") == true) {
                return network.getFieldObject(temp.toString());
            }
        }   return super.getFieldObject(field);
    }

    /**
     *
     * @param method
     * @param argument
     * @return
     */
    public Object callMethod(String method, Object... argument) {
        Object result = null;
        String realMethod = method.toLowerCase();
        if(realMethod.equals("getdatabase")    == true) {
           return result = getDatabase();
        }
        if(realMethod.equals("getpermitlevel")  == true) {
            return result = getPermitLevel();
        }
        if(realMethod.equals("getpermitgroup")  == true) {
            return result = getPermitGroup();
        }
        if(realMethod.equals("getsystemid") == true) {
            return result = getSystemId();
        }

        return super.callMethod(method, argument);
    }

    /**
     *
     * @param field
     * @param value
     * @return
     */
    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field);
        if(compareFieldID(temp, "groupId") == true) {
            return setString(groupId, value);
        }
        if(compareFieldID(temp, "groupName") == true) {
            return setString(groupName, value);
        }
        if(compareFieldID(temp, "hwClusterId") == true) {
            return setString(hwClusterId, value);
        }
        if(compareFieldID(temp, "hwId") == true) {
            return setString(hwId, value);
        }
        if(compareFieldID(temp, "hwName") == true) {
            return setString(hwName, value);
        }
        if(compareFieldID(temp, "clusterId") == true) {
            return setString(clusterId, value);
        }
        if(compareFieldID(temp, "clusterName") == true) {
            return setString(clusterName, value);
        }
        if(compareFieldID(temp, "processId") == true) {
            return setString(processId, value);
        }
        if(compareFieldID(temp, "status") == true) {
            if(!value.equals("")) procStatus = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "dbConnString") == true) {
            return setString(dbConnString, value);
        }
        if(compareFieldID(temp, "dbUserName") == true) {
            return setString(dbUserName, value);
        }
        if(compareFieldID(temp, "dbPassword") == true) {
            return setString(dbPassword, value);
        }
        if(compareFieldID(temp, "dbDriverClass") == true) {
            return setString(dbDriverClass, value);
        }
        if(compareFieldID(temp, "dbMaxConnection") == true) {
            if(!value.equals("")) dbMaxConnection = Integer.valueOf(value);
            return 0;
        }
        if(compareFieldID(temp, "defaultSystem") == true) {
            return setString(defaultSystem, value);
        }
        log.error("EmsSystem - Not founded field :" + field);
        return(-1);
    }

    /**
     *
     * @param field
     * @param index
     * @param value
     * @param length
     * @return
     */
    protected int getFieldData(String field, Index idx, StringBuilder value) {
         boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }

        if(compareFieldID(fldAlias, "groupId", idx, value) == true) {
            errorcode = getString(groupId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "hwClusterId", idx, value) == true) {
            errorcode = getString(hwClusterId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "hwId", idx, value) == true) {
            errorcode = getString(hwId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "clusterId", idx, value) == true) {
            errorcode = getString(clusterId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "processId", idx, value) == true) {
            errorcode = getString(processId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "status", idx, value) == true) {
            errorcode = getInteger(procStatus, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "groupName", idx, value) == true) {
            errorcode = getString(groupName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "hwName", idx, value) == true) {
            errorcode = getString(hwName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "clusterName", idx, value) == true) {
            errorcode = getString(clusterName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "dbConnString", idx, value) == true) {
            errorcode = getString(dbConnString.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "dbUserName", idx, value) == true) {
            errorcode = getString(dbUserName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "dbPassword", idx, value) == true) {
            errorcode = getString(dbPassword.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "dbDriverClass", idx, value) == true) {
            errorcode = getString(dbDriverClass.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "dbMaxConnection", idx, value) == true) {
            errorcode = getInteger(dbMaxConnection, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "defaultSystem", idx, value) == true) {
            errorcode = getString(defaultSystem.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return 0;
    }
}
