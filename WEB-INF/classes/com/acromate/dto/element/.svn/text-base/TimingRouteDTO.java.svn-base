package com.acromate.dto.element;

import com.acromate.data.code.AppCode;
import com.acromate.framework.db.BaseDTOModule;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
public class TimingRouteDTO extends BaseDTOModule{

    private String timingRouteID;
    private String dayValue;
    private String startTime;
    private String endTime;
    private int    protocol;
    private String routeID;
    private int    endpointClass;

    public String getTimingRouteID() { return this.timingRouteID; }
    public void   setTimingRouteID(String vTimingRouteID ) { this.timingRouteID = vTimingRouteID; }

    public String getDayValue() { return this.dayValue; }
    public void   setDayValue(String vDayValue ) { this.dayValue = vDayValue; }

    public String getStartTime() { return this.startTime; }
    public void   setStartTime(String vStartTime ) { this.startTime = vStartTime; }

    public String getEndTime() { return this.endTime; }
    public void   setEndTime(String vEndTime ) { this.endTime = vEndTime; }

    public int    getProtocol() { return this.protocol; }
    public void   setProtocol(int vProtocol ) { this.protocol = vProtocol; }

    public String getRouteID() { return this.routeID; }
    public void   setRouteID(String vRouteID ) { this.routeID = vRouteID; }

    public int getEndpointClass() { return this.endpointClass; }
    public void   setEndpointClass(int endpointClass ) { this.endpointClass = endpointClass; }



    public String toString()
    {
        StringBuffer sb = new StringBuffer("");

        sb.append("(timingRouteID:"              + getTimingRouteID() + ") ") ;
        sb.append("[dayValue:"                   + getDayValue() + "] ") ;
        sb.append("[startTime:"                  + getStartTime() + "] ") ;
        sb.append("[endTime:"                    + getEndTime() + "] ") ;
        sb.append("[protocol:"                   + getProtocol() + "] ") ;
        sb.append("[routeID:"                    + getRouteID() + "] ") ;

        return sb.toString();
    }
	protected int getFieldData( String field, Index indx, StringBuilder data) {
		field = field.toLowerCase();
		boolean stop = (field != null) ;
		int errcode = 0; 
		StringBuilder sbField =new StringBuilder(field); 
		if   ( compareFieldID( sbField, "timingrouteid", indx, data ) ) 
		{ 
			errcode = getString(timingRouteID,data ,  ! stop); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "dayvalue", indx, data ) ) 
		{ 
			errcode = getString(dayValue,data ,  ! stop); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "starttime", indx, data ) ) 
		{ 
			errcode = getString(startTime,data ,  ! stop); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "endtime", indx, data ) ) 
		{ 
			errcode = getString(endTime,data ,  ! stop); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "protocol", indx, data ) ) 
		{ 
			errcode = getInteger( protocol, data ); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "routeid", indx, data ) ) 
		{ 
			errcode = getString(routeID,data ,  ! stop); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		if   ( compareFieldID( sbField, "endpointclass", indx, data ) ) 
		{ 
			errcode = getInteger( endpointClass, data ); 
			if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ; 
		} 
		return super.getFieldData( field, indx, data) ; 
	}
	protected int setFieldData( String field, String value) {
		field = field.toLowerCase();
		StringBuilder sbfield = new StringBuilder(field);
		int errcode = 0;
		if   ( compareFieldID( sbfield, "timingrouteid") ){ 
			StringBuilder sbText = new StringBuilder(); 
			if   (  (errcode = setString( sbText, value)) == 0){ 
				timingRouteID = sbText.toString(); 
			} 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "dayvalue") ){ 
			StringBuilder sbText = new StringBuilder(); 
			if   (  (errcode = setString( sbText, value)) == 0){ 
				dayValue = sbText.toString(); 
			} 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "starttime") ){ 
			StringBuilder sbText = new StringBuilder(); 
			if   (  (errcode = setString( sbText, value)) == 0){ 
				startTime = sbText.toString(); 
			} 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "endtime") ){ 
			StringBuilder sbText = new StringBuilder(); 
			if   (  (errcode = setString( sbText, value)) == 0){ 
				endTime = sbText.toString(); 
			} 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "protocol") ){ 
			StringBuilder sbText = new StringBuilder(); 
			 if(value != null) protocol = a2i(value.toString()); 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "routeid") ){ 
			StringBuilder sbText = new StringBuilder(); 
			if   (  (errcode = setString( sbText, value)) == 0){ 
				routeID = sbText.toString(); 
			} 
			return (AppCode.ERR_NOERROR) ; 
		} 
		if   ( compareFieldID( sbfield, "endpointclass") ){ 
			StringBuilder sbText = new StringBuilder(); 
			 if(value != null) endpointClass = a2i(value.toString()); 
			return (AppCode.ERR_NOERROR) ; 
		} 
		return super.setFieldData( field, value ) ; 
	}
	@Override
	public String toDeleteQuery() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String toInsertQuery() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String toUpdateQuery() {
		// TODO Auto-generated method stub
		return null;
	}

}
