package com.acromate.dto.office ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.data.code.AppCode;
import com.acromate.framework.db.BaseDTOModule;
import com.acromate.util.Str;

public class DeptDIO extends BaseDTOModule{
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;

    private int deptID ;
    private int orgChartID ;
    private int parentID ;
    private String deptName = "";
    private String description = "" ;
    private int type ;
    private int usePickup ;
    private String keyNumber = "" ;
    private String officebox = "" ;
    private int operation ;
    private int lft ;
    private int rgt ;
    private int options ;
    private int chartOrder ;

    public int    getDeptID() { return deptID ; }
    public void   setDeptID( int deptID ) { this.deptID = deptID ; }

    public int    getOrgChartID() { return orgChartID ; }
    public void   setOrgChartID( int orgChartID ) { this.orgChartID = orgChartID ; }

    public int    getParentID() { return parentID ; }
    public void   setParentID( int parentID ) { this.parentID = parentID ; }

    public String getDeptName() { return deptName.toString() ; }
    public void   setDeptName( String deptName ) {
        this.deptName = deptName ;
    }

    public String getDescription() { return description.toString() ; }
    public void   setDescription( String description ) {
        this.description = description ;
    }

    public int    getType() { return type ; }
    public void   setType( int type ) { this.type = type ; }

    public int    getUsePickup() { return usePickup ; }
    public void   setUsePickup( int usePickup ) { this.usePickup = usePickup ; }

    public String getKeyNumber() { return keyNumber.toString() ; }
    public void   setKeyNumber( String keyNumber ) {
        this.keyNumber = keyNumber ;
    }

    public String getOfficebox() { return officebox.toString() ; }
    public void   setOfficebox( String officebox ) {
        this.officebox = officebox ;
    }

    public int    getOperation() { return operation ; }
    public void   setOperation( int operation ) { this.operation = operation ; }

    public int    getLft() { return lft ; }
    public void   setLft( int lft ) { this.lft = lft ; }

    public int    getRgt() { return rgt ; }
    public void   setRgt( int rgt ) { this.rgt = rgt ; }

    public int    getOptions() { return options ; }
    public void   setOptions( int options ) { this.options = options ; }

    public int    getChartOrder() { return chartOrder ; }
    public void   setChartOrder( int chartOrder ) { this.chartOrder = chartOrder ; }
    @Override
    public String toDeleteQuery() {
            // TODO Auto-generated method stub
            return null;
    }
    @Override
    public String toInsertQuery() {
        String query = "INSERT INTO Table_Dept (";
        query += " deptID, ";
        query += " orgChartID, ";
        query += " parentID, ";
        query += " deptName, ";
        query += " description, ";
        query += " type, ";
        query += " usePickup, ";
        query += " keyNumber, ";
        query += " officebox, ";
        query += " operation, ";
        query += " chartOrder ";

        query += ") VALUES (";
        query += " "+ deptID +" ";
        query += ", "+ orgChartID +" ";
        query += ", "+ parentID +" ";
        query += ", '"+ deptName.replace("'", "") +"' ";
        query += ", '"+ description.replace("'", "") +"' ";
        query += ", "+ type +" ";
        query += ", "+ usePickup +" ";
        query += ", '"+ keyNumber.replace("'", "") +"' ";
        query += ", '"+ officebox.replace("'", "") +"' ";
        query += ", "+ operation +" ";
        query += ", "+ chartOrder +" ";
        query += "); ";

        return query;
    }
    @Override
    public String toUpdateQuery() {
        String query = "UPDATE Table_Dept SET";
        query += "  deptName='" + deptName.replace("'", "") +"', ";
        query += "  usePickup= " + usePickup +" , ";
        query += "  keyNumber='" + keyNumber.replace("'", "") +"', ";
        query += "  description='" + description.replace("'", "") +"' ";
        query += " WHERE deptID= " + deptID +"  ";

        return query;
    }

    protected int setFieldData(String field, String value) {
        StringBuilder sbfield = new StringBuilder(field);
        int errcode = 0;
        if   ( compareFieldID( sbfield, "deptID") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) deptID = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "orgChartID") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) orgChartID = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "parentID") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) parentID = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "deptName") ){
                StringBuilder sbText = new StringBuilder();
                if   (  (errcode = setString( sbText, value)) == 0){
                        deptName = sbText.toString();
                }
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "description") ){
                StringBuilder sbText = new StringBuilder();
                if   (  (errcode = setString( sbText, value)) == 0){
                        description = sbText.toString();
                }
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "type") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) type = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "usePickup") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) usePickup = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "keyNumber") ){
                StringBuilder sbText = new StringBuilder();
                if   (  (errcode = setString( sbText, value)) == 0){
                        keyNumber = sbText.toString();
                }
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "officebox") ){
                StringBuilder sbText = new StringBuilder();
                if   (  (errcode = setString( sbText, value)) == 0){
                        officebox = sbText.toString();
                }
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "operation") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) operation = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "lft") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) lft = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "rgt") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) rgt = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "options") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) options = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        if   ( compareFieldID( sbfield, "chartOrder") ){
                StringBuilder sbText = new StringBuilder();
                 if(value != null) chartOrder = a2i(value.toString());
                return (AppCode.ERR_NOERROR) ;
        }
        return 0;
    }

    protected int getFieldData(String field, Index indx, StringBuilder data) {
        boolean stop = (field != null && !field.equals("")) ;
        int errcode = 0;
        if (field == null) field = "";
        StringBuilder sbField =new StringBuilder(field);
        if   ( compareFieldID( sbField, "deptID", indx, data ) )
        {
                errcode = getInteger( deptID, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "orgChartID", indx, data ) )
        {
                errcode = getInteger( orgChartID, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "parentID", indx, data ) )
        {
                errcode = getInteger( parentID, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "deptName", indx, data ) )
        {
                errcode = getString(deptName,data ,  ! stop);
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "description", indx, data ) )
        {
                errcode = getString(description,data ,  ! stop);
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "type", indx, data ) )
        {
                errcode = getInteger( type, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "usePickup", indx, data ) )
        {
                errcode = getInteger( usePickup, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "keyNumber", indx, data ) )
        {
                errcode = getString(keyNumber,data ,  ! stop);
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "officebox", indx, data ) )
        {
                errcode = getString(officebox,data ,  ! stop);
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "operation", indx, data ) )
        {
                errcode = getInteger( operation, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "lft", indx, data ) )
        {
                errcode = getInteger( lft, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "rgt", indx, data ) )
        {
                errcode = getInteger( rgt, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "options", indx, data ) )
        {
                errcode = getInteger( options, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        if   ( compareFieldID( sbField, "chartOrder", indx, data ) )
        {
                errcode = getInteger( chartOrder, data );
                if   ( stop || errcode != AppCode.ERR_NOERROR )	return errcode ;
        }
        return(0);
    }
    public String toXmlString(String strParentDesc, String blank) {
       String xml = blank+"<BuddyItem " ;

       xml += " parent=\""  +  strParentDesc + "\" " ;
       xml += " id=\""  + getDeptID() + "\" " ;
       xml += " description=\""  + getDeptName() + "\" " ;
       xml += " represent=\""  +  getKeyNumber() + "\" " ;
       xml += " officebox=\""  +  getOfficebox() + "\" " ;
       xml += " operation=\""  +  getOperation() + "\" " ;
       xml += "> \n" ;
        return xml ;
    }

}
