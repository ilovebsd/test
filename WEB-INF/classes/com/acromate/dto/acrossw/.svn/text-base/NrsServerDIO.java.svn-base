package com.acromate.dto.acrossw ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class NrsServerDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private ServerAddressDIO serverAddress = new ServerAddressDIO();
    private int    maxTimeout ;
    private int    retryCount ;
    private boolean enableServer ;
    private StringBuilder disableSynchronousResponse = new StringBuilder();
    private TransportChannelRangeDIO portRange = new TransportChannelRangeDIO();
    private int    minSocketPoolSize ;
    private int    concurrentThread ;

    public ServerAddressDIO    getServerAddressDIO() { return serverAddress ; }
    public void   setServerAddressDIO( ServerAddressDIO serverAddress ) { this.serverAddress = serverAddress ; }

    public int    getMaxTimeout() { return maxTimeout ; }
    public void   setMaxTimeout( int maxTimeout ) { this.maxTimeout = maxTimeout ; }

    public int    getRetryCount() { return retryCount ; }
    public void   setRetryCount( int retryCount ) { this.retryCount = retryCount ; }

    public boolean    getEnableServer() { return enableServer ; }
    public void   setEnableServer( boolean enableServer ) { this.enableServer = enableServer ; }

    public String getDisableSynchronousResponse() { return disableSynchronousResponse.toString() ; }
    public void   setDisableSynchronousResponse( String disableSynchronousResponse ) {
        this.disableSynchronousResponse.delete(0,disableSynchronousResponse.length());
        this.disableSynchronousResponse.append(disableSynchronousResponse) ;
    }

    public TransportChannelRangeDIO    getPortRangeDIO() { return portRange ; }
    public void   setPortRangeDIO( TransportChannelRangeDIO portRange ) { this.portRange = portRange ; }

    public int    getMinSocketPoolSize() { return minSocketPoolSize ; }
    public void   setMinSocketPoolSize( int minSocketPoolSize ) { this.minSocketPoolSize = minSocketPoolSize ; }

    public int    getConcurrentThread() { return concurrentThread ; }
    public void   setConcurrentThread( int concurrentThread ) { this.concurrentThread = concurrentThread ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "serverAddress".toLowerCase()) == true) {
            return serverAddress.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "maxTimeout".toLowerCase()) == true) {
            if(!value.equals("")) maxTimeout = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "retryCount".toLowerCase()) == true) {
            if(!value.equals("")) retryCount = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "enableServer".toLowerCase()) == true) {
            enableServer = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "disableSynchronousResponse".toLowerCase()) == true) {
            return setString(disableSynchronousResponse, value);
        }
        if(compareFieldID(temp, "portRange".toLowerCase()) == true) {
            return portRange.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "minSocketPoolSize".toLowerCase()) == true) {
            if(!value.equals("")) minSocketPoolSize = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "concurrentThread".toLowerCase()) == true) {
            if(!value.equals("")) concurrentThread = Str.CheckNullInt(value);
            return 0;
        }
        log.error("NrsServerDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "serverAddress", idx, value) == true) {
            errorcode = serverAddress.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxTimeout", idx, value) == true) {
            errorcode = getInteger(maxTimeout, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "retryCount", idx, value) == true) {
            errorcode = getInteger(retryCount, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableServer", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableServer), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "disableSynchronousResponse", idx, value) == true) {
            errorcode = getString(disableSynchronousResponse.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "portRange", idx, value) == true) {
            errorcode = portRange.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "minSocketPoolSize", idx, value) == true) {
            errorcode = getInteger(minSocketPoolSize, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "concurrentThread", idx, value) == true) {
            errorcode = getInteger(concurrentThread, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
