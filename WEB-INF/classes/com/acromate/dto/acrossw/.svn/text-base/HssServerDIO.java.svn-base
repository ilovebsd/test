package com.acromate.dto.acrossw ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class HssServerDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder connectionID = new StringBuilder();
    private StringBuilder sessionID = new StringBuilder();
    private boolean enableServer ;
    private StringBuilder remoteHost = new StringBuilder();
    private StringBuilder remoteRealm = new StringBuilder();
    private ServerAddressDIO serverAddress = new ServerAddressDIO();
    private TransportChannelRangeDIO transportChannelRange = new TransportChannelRangeDIO();
    private int    concurrentControlThread ;
    private boolean enableWatchdogMonitor ;
    private boolean enableTransactionTrace ;
    private boolean disableForwardConnection ;
    private int    threadPriority ;
    private boolean enableSCTP ;
    private int    channelMonitoringInterval ;

    public String getClassID() {
        return connectionID.toString();
    }
    public String getConnectionID() { return connectionID.toString() ; }
    public void   setConnectionID( String connectionID ) {
        this.connectionID.delete(0,connectionID.length());
        this.connectionID.append(connectionID) ;
    }

    public String getSessionID() { return sessionID.toString() ; }
    public void   setSessionID( String sessionID ) {
        this.sessionID.delete(0,sessionID.length());
        this.sessionID.append(sessionID) ;
    }

    public boolean    getEnableServer() { return enableServer ; }
    public void   setEnableServer( boolean enableServer ) { this.enableServer = enableServer ; }

    public String getRemoteHost() { return remoteHost.toString() ; }
    public void   setRemoteHost( String remoteHost ) {
        this.remoteHost.delete(0,remoteHost.length());
        this.remoteHost.append(remoteHost) ;
    }

    public String getRemoteRealm() { return remoteRealm.toString() ; }
    public void   setRemoteRealm( String remoteRealm ) {
        this.remoteRealm.delete(0,remoteRealm.length());
        this.remoteRealm.append(remoteRealm) ;
    }

    public ServerAddressDIO    getServerAddressDIO() { return serverAddress ; }
    public void   setServerAddressDIO( ServerAddressDIO serverAddress ) { this.serverAddress = serverAddress ; }

    public TransportChannelRangeDIO    getTransportChannelRangeDIO() { return transportChannelRange ; }
    public void   setTransportChannelRangeDIO( TransportChannelRangeDIO transportChannelRange ) { this.transportChannelRange = transportChannelRange ; }

    public int    getConcurrentControlThread() { return concurrentControlThread ; }
    public void   setConcurrentControlThread( int concurrentControlThread ) { this.concurrentControlThread = concurrentControlThread ; }

    public boolean    getEnableWatchdogMonitor() { return enableWatchdogMonitor ; }
    public void   setEnableWatchdogMonitor( boolean enableWatchdogMonitor ) { this.enableWatchdogMonitor = enableWatchdogMonitor ; }

    public boolean    getEnableTransactionTrace() { return enableTransactionTrace ; }
    public void   setEnableTransactionTrace( boolean enableTransactionTrace ) { this.enableTransactionTrace = enableTransactionTrace ; }

    public boolean    getDisableForwardConnection() { return disableForwardConnection ; }
    public void   setDisableForwardConnection( boolean disableForwardConnection ) { this.disableForwardConnection = disableForwardConnection ; }

    public int    getThreadPriority() { return threadPriority ; }
    public void   setThreadPriority( int threadPriority ) { this.threadPriority = threadPriority ; }

    public boolean    getEnableSCTP() { return enableSCTP ; }
    public void   setEnableSCTP( boolean enableSCTP ) { this.enableSCTP = enableSCTP ; }

    public int    getChannelMonitoringInterval() { return channelMonitoringInterval ; }
    public void   setChannelMonitoringInterval( int channelMonitoringInterval ) { this.channelMonitoringInterval = channelMonitoringInterval ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "connectionID".toLowerCase()) == true) {
            return setString(connectionID, value);
        }
        if(compareFieldID(temp, "sessionID".toLowerCase()) == true) {
            return setString(sessionID, value);
        }
        if(compareFieldID(temp, "enableServer".toLowerCase()) == true) {
            enableServer = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "remoteHost".toLowerCase()) == true) {
            return setString(remoteHost, value);
        }
        if(compareFieldID(temp, "remoteRealm".toLowerCase()) == true) {
            return setString(remoteRealm, value);
        }
        if(compareFieldID(temp, "serverAddress".toLowerCase()) == true) {
            return serverAddress.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "transportChannelRange".toLowerCase()) == true) {
            transportChannelRange.setRange(value);
            return 0;
        }
        if(compareFieldID(temp, "concurrentControlThread".toLowerCase()) == true) {
            if(!value.equals("")) concurrentControlThread = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "enableWatchdogMonitor".toLowerCase()) == true) {
            enableWatchdogMonitor = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableTransactionTrace".toLowerCase()) == true) {
            enableTransactionTrace = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "disableForwardConnection".toLowerCase()) == true) {
            disableForwardConnection = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "threadPriority".toLowerCase()) == true) {
            if(!value.equals("")) threadPriority = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "enableSCTP".toLowerCase()) == true) {
            enableSCTP = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "channelMonitoringInterval".toLowerCase()) == true) {
            if(!value.equals("")) channelMonitoringInterval = Str.CheckNullInt(value);
            return 0;
        }
        log.error("HssServerDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "connectionID", idx, value) == true) {
            errorcode = getString(connectionID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "sessionID", idx, value) == true) {
            errorcode = getString(sessionID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableServer", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableServer), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "remoteHost", idx, value) == true) {
            errorcode = getString(remoteHost.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "remoteRealm", idx, value) == true) {
            errorcode = getString(remoteRealm.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "serverAddress", idx, value) == true) {
            errorcode = serverAddress.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "transportChannelRange", idx, value) == true) {
            errorcode = transportChannelRange.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "concurrentControlThread", idx, value) == true) {
            errorcode = getInteger(concurrentControlThread, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableWatchdogMonitor", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableWatchdogMonitor), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableTransactionTrace", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableTransactionTrace), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "disableForwardConnection", idx, value) == true) {
            errorcode = getString(Boolean.toString(disableForwardConnection), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "threadPriority", idx, value) == true) {
            errorcode = getInteger(threadPriority, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableSCTP", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableSCTP), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "channelMonitoringInterval", idx, value) == true) {
            errorcode = getInteger(channelMonitoringInterval, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
