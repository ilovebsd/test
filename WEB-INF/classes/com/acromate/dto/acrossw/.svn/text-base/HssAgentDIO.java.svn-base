package com.acromate.dto.acrossw ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.data.ListIO;
import com.acromate.util.Str;

public class HssAgentDIO extends ListIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder localHost = new StringBuilder();
    private StringBuilder localRealm = new StringBuilder();
    private StringBuilder systemVendorID = new StringBuilder();
    private int    authMode ;
    private ServerAddressDIO localAddress = new ServerAddressDIO();
    private int    threadPriority ;
    private int    channelMonitoringInterval ;
    private boolean enableSCTP ;
    private boolean enableSIFC ;
    private boolean enableIOI ;
    private boolean enableServer ;
    private StringBuilder hssServer = new StringBuilder();

    public String getLocalHost() { return localHost.toString() ; }
    public void   setLocalHost( String localHost ) {
        this.localHost.delete(0,localHost.length());
        this.localHost.append(localHost) ;
    }

    public String getLocalRealm() { return localRealm.toString() ; }
    public void   setLocalRealm( String localRealm ) {
        this.localRealm.delete(0,localRealm.length());
        this.localRealm.append(localRealm) ;
    }

    public String getSystemVendorID() { return systemVendorID.toString() ; }
    public void   setSystemVendorID( String systemVendorID ) {
        this.systemVendorID.delete(0,systemVendorID.length());
        this.systemVendorID.append(systemVendorID) ;
    }

    public int    getAuthMode() { return authMode ; }
    public void   setAuthMode( int authMode ) { this.authMode = authMode ; }

    public ServerAddressDIO    getLocalAddressDIO() { return localAddress ; }
    public void   setLocalAddressDIO( ServerAddressDIO localAddress ) { this.localAddress = localAddress ; }

    public int    getThreadPriority() { return threadPriority ; }
    public void   setThreadPriority( int threadPriority ) { this.threadPriority = threadPriority ; }

    public int    getChannelMonitoringInterval() { return channelMonitoringInterval ; }
    public void   setChannelMonitoringInterval( int channelMonitoringInterval ) { this.channelMonitoringInterval = channelMonitoringInterval ; }

    public boolean    getEnableSCTP() { return enableSCTP ; }
    public void   setEnableSCTP( boolean enableSCTP ) { this.enableSCTP = enableSCTP ; }

    public boolean    getEnableSIFC() { return enableSIFC ; }
    public void   setEnableSIFC( boolean enableSIFC ) { this.enableSIFC = enableSIFC ; }

    public boolean    getEnableIOI() { return enableIOI ; }
    public void   setEnableIOI( boolean enableIOI ) { this.enableIOI = enableIOI ; }

    public boolean    getEnableServer() { return enableServer ; }
    public void   setEnableServer( boolean enableServer ) { this.enableServer = enableServer ; }

    public String getHssServer() { return hssServer.toString() ; }
    public void   setHssServer( String hssServer ) {
        this.hssServer.delete(0,hssServer.length());
        this.hssServer.append(hssServer) ;
    }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "localHost".toLowerCase()) == true) {
            return setString(localHost, value);
        }
        if(compareFieldID(temp, "localRealm".toLowerCase()) == true) {
            return setString(localRealm, value);
        }
        if(compareFieldID(temp, "systemVendorID".toLowerCase()) == true) {
            return setString(systemVendorID, value);
        }
        if(compareFieldID(temp, "authMode".toLowerCase()) == true) {
            if(!value.equals("")) authMode = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "localAddress".toLowerCase()) == true) {
            return localAddress.setParam(temp.toString(), value);
        }
        if(compareFieldID(temp, "threadPriority".toLowerCase()) == true) {
            if(!value.equals("")) threadPriority = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "channelMonitoringInterval".toLowerCase()) == true) {
            if(!value.equals("")) channelMonitoringInterval = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "enableSCTP".toLowerCase()) == true) {
            enableSCTP = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableSIFC".toLowerCase()) == true) {
            enableSIFC = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableIOI".toLowerCase()) == true) {
            enableIOI = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableServer".toLowerCase()) == true) {
            enableServer = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "hssServer".toLowerCase()) == true) {
            return setString(hssServer, value);
        }
        int result = super.setFieldData( field,  value);
        if (result == 0 ) return result;
        log.error("HssAgentDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "localHost", idx, value) == true) {
            errorcode = getString(localHost.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "localRealm", idx, value) == true) {
            errorcode = getString(localRealm.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "systemVendorID", idx, value) == true) {
            errorcode = getString(systemVendorID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "authMode", idx, value) == true) {
            errorcode = getInteger(authMode, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "localAddress", idx, value) == true) {
            errorcode = localAddress.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "threadPriority", idx, value) == true) {
            errorcode = getInteger(threadPriority, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "channelMonitoringInterval", idx, value) == true) {
            errorcode = getInteger(channelMonitoringInterval, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableSCTP", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableSCTP), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableSIFC", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableSIFC), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableIOI", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableIOI), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableServer", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableServer), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "hssServer", idx, value) == true) {
            errorcode = getString(hssServer.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return super.getFieldData(field, idx, value);
    }
    protected DataIO newListNode() {
       return new HssServerDIO();
    }
}
