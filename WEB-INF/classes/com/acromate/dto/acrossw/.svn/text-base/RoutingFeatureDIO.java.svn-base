package com.acromate.dto.acrossw ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class RoutingFeatureDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private boolean enableCommonMediaServer ;
    private boolean enableShortMessageService ;
    private boolean enableMediaRelayService ;
    private boolean enableSystemSupplementService ;
    private boolean enableCachedSharedRouteSelector ;
    private int    maxApprovedRoutingCall ;
    private int    maxRunningCpuTimeRate ;
    private int    maxUsingSystemMemoryRate ;
    private int    maxCallRoutingTimeRate ;
    private StringBuilder shortMessageServiceCode = new StringBuilder();
    private boolean enableDefaultPrefixRouter ;

    public boolean    getEnableCommonMediaServer() { return enableCommonMediaServer ; }
    public void   setEnableCommonMediaServer( boolean enableCommonMediaServer ) { this.enableCommonMediaServer = enableCommonMediaServer ; }

    public boolean    getEnableShortMessageService() { return enableShortMessageService ; }
    public void   setEnableShortMessageService( boolean enableShortMessageService ) { this.enableShortMessageService = enableShortMessageService ; }

    public boolean    getEnableMediaRelayService() { return enableMediaRelayService ; }
    public void   setEnableMediaRelayService( boolean enableMediaRelayService ) { this.enableMediaRelayService = enableMediaRelayService ; }

    public boolean    getEnableSystemSupplementService() { return enableSystemSupplementService ; }
    public void   setEnableSystemSupplementService( boolean enableSystemSupplementService ) { this.enableSystemSupplementService = enableSystemSupplementService ; }

    public boolean    getEnableCachedSharedRouteSelector() { return enableCachedSharedRouteSelector ; }
    public void   setEnableCachedSharedRouteSelector( boolean enableCachedSharedRouteSelector ) { this.enableCachedSharedRouteSelector = enableCachedSharedRouteSelector ; }

    public int    getMaxApprovedRoutingCall() { return maxApprovedRoutingCall ; }
    public void   setMaxApprovedRoutingCall( int maxApprovedRoutingCall ) { this.maxApprovedRoutingCall = maxApprovedRoutingCall ; }

    public int    getMaxRunningCpuTimeRate() { return maxRunningCpuTimeRate ; }
    public void   setMaxRunningCpuTimeRate( int maxRunningCpuTimeRate ) { this.maxRunningCpuTimeRate = maxRunningCpuTimeRate ; }

    public int    getMaxUsingSystemMemoryRate() { return maxUsingSystemMemoryRate ; }
    public void   setMaxUsingSystemMemoryRate( int maxUsingSystemMemoryRate ) { this.maxUsingSystemMemoryRate = maxUsingSystemMemoryRate ; }

    public int    getMaxCallRoutingTimeRate() { return maxCallRoutingTimeRate ; }
    public void   setMaxCallRoutingTimeRate( int maxCallRoutingTimeRate ) { this.maxCallRoutingTimeRate = maxCallRoutingTimeRate ; }

    public String getShortMessageServiceCode() { return shortMessageServiceCode.toString() ; }
    public void   setShortMessageServiceCode( String shortMessageServiceCode ) {
        this.shortMessageServiceCode.delete(0,shortMessageServiceCode.length());
        this.shortMessageServiceCode.append(shortMessageServiceCode) ;
    }

    public boolean    getEnableDefaultPrefixRouter() { return enableDefaultPrefixRouter ; }
    public void   setEnableDefaultPrefixRouter( boolean enableDefaultPrefixRouter ) { this.enableDefaultPrefixRouter = enableDefaultPrefixRouter ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "enableCommonMediaServer".toLowerCase()) == true) {
            enableCommonMediaServer = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableShortMessageService".toLowerCase()) == true) {
            enableShortMessageService = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableMediaRelayService".toLowerCase()) == true) {
            enableMediaRelayService = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableSystemSupplementService".toLowerCase()) == true) {
            enableSystemSupplementService = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "enableCachedSharedRouteSelector".toLowerCase()) == true) {
            enableCachedSharedRouteSelector = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "maxApprovedRoutingCall".toLowerCase()) == true) {
            if(!value.equals("")) maxApprovedRoutingCall = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "maxRunningCpuTimeRate".toLowerCase()) == true) {
            if(!value.equals("")) maxRunningCpuTimeRate = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "maxUsingSystemMemoryRate".toLowerCase()) == true) {
            if(!value.equals("")) maxUsingSystemMemoryRate = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "maxCallRoutingTimeRate".toLowerCase()) == true) {
            if(!value.equals("")) maxCallRoutingTimeRate = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "shortMessageServiceCode".toLowerCase()) == true) {
            return setString(shortMessageServiceCode, value);
        }
        if(compareFieldID(temp, "enableDefaultPrefixRouter".toLowerCase()) == true) {
            enableDefaultPrefixRouter = Str.CheckNullBoolean(value);
            return 0;
        }
        log.error("TransactionTracerDIO - Not founded field :" + field);
        return(-1);
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "enableCommonMediaServer", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableCommonMediaServer), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableShortMessageService", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableShortMessageService), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableMediaRelayService", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableMediaRelayService), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableSystemSupplementService", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableSystemSupplementService), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableCachedSharedRouteSelector", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableCachedSharedRouteSelector), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxApprovedRoutingCall", idx, value) == true) {
            errorcode = getInteger(maxApprovedRoutingCall, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxRunningCpuTimeRate", idx, value) == true) {
            errorcode = getInteger(maxRunningCpuTimeRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxUsingSystemMemoryRate", idx, value) == true) {
            errorcode = getInteger(maxUsingSystemMemoryRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxCallRoutingTimeRate", idx, value) == true) {
            errorcode = getInteger(maxCallRoutingTimeRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "shortMessageServiceCode", idx, value) == true) {
            errorcode = getString(shortMessageServiceCode.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enableDefaultPrefixRouter", idx, value) == true) {
            errorcode = getString(Boolean.toString(enableDefaultPrefixRouter), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
