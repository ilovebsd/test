package com.acromate.dto.acrossw ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class ServerAddressDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder host = new StringBuilder();
    private int    port ;

    public String getHost() { return host.toString() ; }
    public void   setHost( String host ) {
        this.host.delete(0,host.length());
        this.host.append(host) ;
    }

    public int    getPort() { return port ; }
    public void   setPort( int port ) { this.port = port ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "host".toLowerCase()) == true) {
            return setString(host, value);
        }
        if(compareFieldID(temp, "port".toLowerCase()) == true) {
            if(!value.equals("")) port = Str.CheckNullInt(value);
            return 0;
        }
        log.error("ServerAddressDIO - Not founded field :" + field);
        return(-1);
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "host", idx, value) == true) {
            errorcode = getString(host.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "port", idx, value) == true) {
            errorcode = getInteger(port, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
