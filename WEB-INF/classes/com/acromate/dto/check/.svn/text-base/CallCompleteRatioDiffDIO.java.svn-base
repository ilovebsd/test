package com.acromate.dto.check;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class CallCompleteRatioDiffDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private boolean check ;
    private int    conditionCallCount ;
    private int    termMinute ;
    private int    prevTermMinute ;
    private int    criticalRate ;
    private int    majorRate ;
    private int    minorRate ;

    public boolean    getCheck() { return check ; }
    public void   setCheck( boolean check ) { this.check = check ; }

    public int    getConditionCallCount() { return conditionCallCount ; }
    public void   setConditionCallCount( int conditionCallCount ) { this.conditionCallCount = conditionCallCount ; }

    public int    getTermMinute() { return termMinute ; }
    public void   setTermMinute( int termMinute ) { this.termMinute = termMinute ; }

    public int    getPrevTermMinute() { return prevTermMinute ; }
    public void   setPrevTermMinute( int prevTermMinute ) { this.prevTermMinute = prevTermMinute ; }

    public int    getCriticalRate() { return criticalRate ; }
    public void   setCriticalRate( int criticalRate ) { this.criticalRate = criticalRate ; }

    public int    getMajorRate() { return majorRate ; }
    public void   setMajorRate( int majorRate ) { this.majorRate = majorRate ; }

    public int    getMinorRate() { return minorRate ; }
    public void   setMinorRate( int minorRate ) { this.minorRate = minorRate ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "check".toLowerCase()) == true) {
            check = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "conditionCallCount".toLowerCase()) == true) {
            if(!value.equals("")) conditionCallCount = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "termMinute".toLowerCase()) == true) {
            if(!value.equals("")) termMinute = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "prevTermMinute".toLowerCase()) == true) {
            if(!value.equals("")) prevTermMinute = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "criticalRate".toLowerCase()) == true) {
            if(!value.equals("")) criticalRate = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "majorRate".toLowerCase()) == true) {
            if(!value.equals("")) majorRate = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "minorRate".toLowerCase()) == true) {
            if(!value.equals("")) minorRate = Str.CheckNullInt(value);
            return 0;
        }
        log.error("CallSuccessRateDIO - Not founded field :" + field);
        return(-1);
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "check".toLowerCase(), idx, value) == true) {
            errorcode = getString(Boolean.toString(check), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "conditionCallCount".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(conditionCallCount, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "termMinute".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(termMinute, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "prevTermMinute".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(prevTermMinute, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "criticalRate".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(criticalRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "majorRate".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(majorRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "minorRate".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(minorRate, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
