package com.acromate.dto.check ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class ConcurrentCallDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private boolean check ;
    private int    criticalMin ;
    private int    criticalMax ;
    private int    majorMin ;
    private int    majorMax ;
    private int    minorMin ;
    private int    minorMax ;

    public boolean    getCheck() { return check ; }
    public void   setCheck( boolean check ) { this.check = check ; }

    public int    getCriticalMin() { return criticalMin ; }
    public void   setCriticalMin( int criticalMin ) { this.criticalMin = criticalMin ; }

    public int    getCriticalMax() { return criticalMax ; }
    public void   setCriticalMax( int criticalMax ) { this.criticalMax = criticalMax ; }

    public int    getMajorMin() { return majorMin ; }
    public void   setMajorMin( int majorMin ) { this.majorMin = majorMin ; }

    public int    getMajorMax() { return majorMax ; }
    public void   setMajorMax( int majorMax ) { this.majorMax = majorMax ; }

    public int    getMinorMin() { return minorMin ; }
    public void   setMinorMin( int minorMin ) { this.minorMin = minorMin ; }

    public int    getMinorMax() { return minorMax ; }
    public void   setMinorMax( int minorMax ) { this.minorMax = minorMax ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "check".toLowerCase()) == true) {
            check = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "criticalMin".toLowerCase()) == true) {
            if(!value.equals("")) criticalMin = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "criticalMax".toLowerCase()) == true) {
            if(!value.equals("")) criticalMax = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "majorMin".toLowerCase()) == true) {
            if(!value.equals("")) majorMin = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "majorMax".toLowerCase()) == true) {
            if(!value.equals("")) majorMax = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "minorMin".toLowerCase()) == true) {
            if(!value.equals("")) minorMin = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "minorMax".toLowerCase()) == true) {
            if(!value.equals("")) minorMax = Str.CheckNullInt(value);
            return 0;
        }
        log.error("ConcurrentCallDIO - Not founded field :" + field);
        return(-1);
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "check".toLowerCase(), idx, value) == true) {
            errorcode = getString(Boolean.toString(check), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "criticalMin".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(criticalMin, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "criticalMax".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(criticalMax, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "majorMin".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(majorMin, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "majorMax".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(majorMax, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "minorMin".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(minorMin, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "minorMax".toLowerCase(), idx, value) == true) {
            errorcode = getInteger(minorMax, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
