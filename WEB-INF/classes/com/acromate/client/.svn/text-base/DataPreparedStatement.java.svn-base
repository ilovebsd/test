package com.acromate.client;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.rmi.RemoteException;
import java.sql.*;
import java.util.Calendar;
import com.acromate.server.IRemotePreparedStatement;
import com.acromate.server.IRemoteResultSet;

public class DataPreparedStatement implements PreparedStatement{

	private IRemotePreparedStatement remoteStmt;
	
	/*******************************************************************
	 * 
	 * @param stmt
	 */
	public DataPreparedStatement(IRemotePreparedStatement stmt) {
		remoteStmt = stmt;
	}
	
	/*******************************************************************
	 * 
	 */
	public ResultSet executeQuery() throws SQLException {
		try
		{
			IRemoteResultSet remoteRsInstance = (IRemoteResultSet)remoteStmt.executeQuery();
			DataResultSet localRsInstance = new DataResultSet(remoteRsInstance);
			return (ResultSet)localRsInstance;
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public ResultSet executeQuery(String sql) 
	throws SQLException {
		
		try
		{
			IRemoteResultSet remoteRsInstance = (IRemoteResultSet)remoteStmt.executeQuery(sql);
			DataResultSet localRsInstance = new DataResultSet(remoteRsInstance);
			return (ResultSet)localRsInstance;
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}
	
	/*******************************************************************
	 * 
	 */
	public int executeUpdate() throws SQLException {
		try
		{
			int updateCount = remoteStmt.executeUpdate();
			return updateCount;
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	public int executeUpdate(String sql) 
	throws SQLException {
		return 0;
	}
	
	/*******************************************************************
	 * 
	 */
	public void close() throws SQLException
	{
		try {
			remoteStmt.close();
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * @param parameterIndex
	 * @param sqlType
	 */
	public void setNull(int parameterIndex, int sqlType) 
	throws SQLException {
		
		try {
			remoteStmt.setNull(parameterIndex, sqlType);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		} 	
	}

	/*******************************************************************
	 * 
	 */
	public void setBoolean(int parameterIndex, boolean x) 
	throws SQLException {
		
		try	{
			remoteStmt.setBoolean(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}		
	}

	/*******************************************************************
	 * 
	 */
	public void setByte(int parameterIndex, byte x) 
	throws SQLException {
		
		try {
			remoteStmt.setByte(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}		
	}

	/*******************************************************************
	 * 
	 */
	public void setShort(int parameterIndex, short x) 
	throws SQLException {
			
		try {
			remoteStmt.setShort(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}			
	}

	/*******************************************************************
	 * 
	 */
	public void setInt(int parameterIndex, int x) 
	throws SQLException {
		
		try {
			remoteStmt.setInt(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setLong(int parameterIndex, long x) 
	throws SQLException {
		
		try {
			remoteStmt.setLong(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setFloat(int parameterIndex, float x) 
	throws SQLException {
		
		try {
			remoteStmt.setFloat(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setDouble(int parameterIndex, double x) 
	throws SQLException {
		
		try {
			remoteStmt.setDouble(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setBigDecimal(int parameterIndex, BigDecimal x) 
	throws SQLException {
		
		try {
			remoteStmt.setBigDecimal(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setString(int parameterIndex, String x) 
	throws SQLException {
		
		try {
			remoteStmt.setString(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setBytes(int parameterIndex, byte[] x) 
	throws SQLException {
		
		try {
			remoteStmt.setBytes(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setDate(int parameterIndex, Date x) 
	throws SQLException {
		
		try {
			remoteStmt.setDate(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setTime(int parameterIndex, Time x) 
	throws SQLException {
		
		try {
			remoteStmt.setTime(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setTimestamp(int parameterIndex, Timestamp x) 
	throws SQLException {
		
		try {
			remoteStmt.setTimestamp(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setAsciiStream(int parameterIndex, InputStream x, int length) 
	throws SQLException {
		
		try {
			remoteStmt.setAsciiStream(parameterIndex, x, length);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void setBinaryStream(int parameterIndex, InputStream x, int length) 
	throws SQLException {
		
		try {
			remoteStmt.setBinaryStream(parameterIndex, x, length);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public void clearParameters() throws SQLException {
		
		try {
			remoteStmt.clearParameters();
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	/**
	 * 
	 */
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) 
	throws SQLException {
		
		try {
			remoteStmt.setObject(parameterIndex, x, targetSqlType, scale);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
		
	}

	/*******************************************************************
	/**
	 * 
	 */
	public void setObject(int parameterIndex, Object x, int targetSqlType) 
	throws SQLException {
		
		try {
			remoteStmt.setObject(parameterIndex, x, targetSqlType);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	/**
	 * 
	 */
	public void setObject(int parameterIndex, Object x) 
	throws SQLException {
	
		try {
			remoteStmt.setObject(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}	
	}

	/*******************************************************************
	 * 
	 */
	public boolean execute() throws SQLException {
		
		try {
			return remoteStmt.execute();
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void addBatch() throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 * 
	 */
	public void setCharacterStream(int parameterIndex, Reader reader, int length) 
	throws SQLException {
		
		try {
			remoteStmt.setCharacterStream(parameterIndex, reader, length);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setRef(int i, Ref x) 
	throws SQLException {
		
		try {
			remoteStmt.setRef(i, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setBlob(int i, Blob x) 
	throws SQLException {
		
		try {
			remoteStmt.setBlob(i, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
		
	}

	/*******************************************************************
	 * 
	 */
	public void setClob(int i, Clob x) 
	throws SQLException {
		
		try {
			remoteStmt.setClob(i, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setArray(int i, Array x) 
	throws SQLException {
	
		try {
			remoteStmt.setArray(i, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public ResultSetMetaData getMetaData() 
	throws SQLException {
		throw(new SQLException("Not Supported"));		
	}

	/*******************************************************************
	 * 
	 */
	public void setDate(int parameterIndex, Date x, Calendar cal) 
	throws SQLException {	
		
		try {
			remoteStmt.setDate(parameterIndex, x, cal);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setTime(int parameterIndex, Time x, Calendar cal) 
	throws SQLException {
		
		try {
			remoteStmt.setTime(parameterIndex, x, cal);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) 
	throws SQLException {	
		
		try {
			remoteStmt.setTimestamp(parameterIndex, x, cal);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setNull(int paramIndex, int sqlType, String typeName) 
	throws SQLException {
		
		try {
			remoteStmt.setNull(paramIndex, sqlType, typeName);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public void setURL(int parameterIndex, URL x) 
	throws SQLException {
		
		try {
			remoteStmt.setURL(parameterIndex, x);
		}
		catch(RemoteException ex)
		{
			throw(new SQLException(ex.getMessage()));
		}
	}

	/*******************************************************************
	 * 
	 */
	public ParameterMetaData getParameterMetaData() 
	throws SQLException {		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getMaxFieldSize() 
	throws SQLException {
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setMaxFieldSize(int max) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getMaxRows() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setMaxRows(int max) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setEscapeProcessing(boolean enable) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getQueryTimeout() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setQueryTimeout(int seconds) 
	throws SQLException {
	}

	/*******************************************************************
	 * 
	 */
	public void cancel() throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public SQLWarning getWarnings() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void clearWarnings() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setCursorName(String name) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
		
	}

	/*******************************************************************
	 * 
	 */
	public boolean execute(String sql) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public ResultSet getResultSet() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getUpdateCount() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public boolean getMoreResults() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setFetchDirection(int direction) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
		
	}

	/*******************************************************************
	 * 
	 */
	public int getFetchDirection() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setFetchSize(int rows)
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getFetchSize() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getResultSetConcurrency() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getResultSetType() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void addBatch(String sql) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void clearBatch() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int[] executeBatch() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public Connection getConnection() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public boolean getMoreResults(int current) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
		
	}

	/*******************************************************************
	 * 
	 */
	public ResultSet getGeneratedKeys() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int executeUpdate(String sql, int autoGeneratedKeys) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int executeUpdate(String sql, int[] columnIndexes) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int executeUpdate(String sql, String[] columnNames) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public boolean execute(String sql, int autoGeneratedKeys) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public boolean execute(String sql, int[] columnIndexes) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public boolean execute(String sql, String[] columnNames) 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public int getResultSetHoldability() 
	throws SQLException {
		
		throw(new SQLException("Not Supported"));	
	}

	/*******************************************************************
	 * 
	 */
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) 
	throws SQLException {
		throw(new SQLException("Not Supported"));		
	}

}
