package com.acromate.client;

import java.sql.*;
import java.util.*;
import java.rmi.*;
import com.acromate.server.*;

public class DataConnection implements Connection {
	private IRemoteConnection  remoteConnection;

	/**
	 *
	 * @param remCon
	 */
	public DataConnection(IRemoteConnection remCon)
	{
		remoteConnection = remCon;
	}

	/*******************************************************************
	 *
	 */
	public Statement createStatement()
	     throws SQLException
	{
		try
		{
			IRemoteStatement remStmt = (IRemoteStatement)remoteConnection.createStatement();
			DataStatement localStmtInstance = new DataStatement(remStmt);
			return (Statement)localStmtInstance;

		}
		catch(RemoteException ex)
		{
			throw(new SQLException("RemoteException:" + ex.getMessage()));
		}
		catch(Exception ex)
		{
			throw(new SQLException("RemoteException:" + ex.getMessage()));
		}
	}
        public Statement createStatement(int resultSetType, int resultSetConcurrency)
             throws SQLException
        {
                try
                {
                        IRemoteStatement remStmt = (IRemoteStatement)remoteConnection.createStatement(resultSetType,resultSetConcurrency);
                        DataStatement localStmtInstance = new DataStatement(remStmt);
                        return (Statement)localStmtInstance;

                }
                catch(RemoteException ex)
                {
                        throw(new SQLException("RemoteException:" + ex.getMessage()));
                }
                catch(Exception ex)
                {
                        throw(new SQLException("RemoteException:" + ex.getMessage()));
                }
        }
        public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
             throws SQLException
        {
                try
                {
                        IRemoteStatement remStmt = (IRemoteStatement)remoteConnection.createStatement(resultSetType,
                                resultSetConcurrency,resultSetHoldability);
                        DataStatement localStmtInstance = new DataStatement(remStmt);
                        return (Statement)localStmtInstance;

                }
                catch(RemoteException ex)
                {
                        throw(new SQLException("RemoteException:" + ex.getMessage()));
                }
                catch(Exception ex)
                {
                        throw(new SQLException("RemoteException:" + ex.getMessage()));
                }
        }

	/*******************************************************************
	 *
	 * @param query
	 * @return
	 * @throws SQLException
	 */
	public PreparedStatement prepareStatement(String query) throws SQLException{
		try
		{
			IRemotePreparedStatement remStmt =
			(IRemotePreparedStatement)remoteConnection.prepareStatement(query);
			DataPreparedStatement localStmtInstance = new DataPreparedStatement(remStmt);
			return (PreparedStatement)localStmtInstance;

		}
		catch(RemoteException ex)
		{
			throw(new SQLException("RemoteException:" + ex.getMessage()));
		}
		catch(Exception ex)
		{
			throw(new SQLException("RemoteException:" + ex.getMessage()));
		}
	}

	/*******************************************************************
	 *
	 */
	public void close() throws SQLException
	{
		try
		{
		 	remoteConnection.closeConnection();
		}
		catch(RemoteException ex)
		{
			throw ((new SQLException("RemoteException:" + ex.getMessage())));
		}
	}

	/*******************************************************************
	 *
	 */
	public String nativeSQL(String sql)
	 	throws SQLException
	{
	 	try {
	 		return remoteConnection.nativeSQL(sql);
	 	}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public void setAutoCommit(boolean autoCommit)
	 	throws SQLException
	{
	 	try {
	 		remoteConnection.setAutoCommit(autoCommit);
	 	}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public boolean getAutoCommit()
	 	throws SQLException
	{
	 	try {
	 		return remoteConnection.getAutoCommit();
	 	}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public void commit() throws SQLException
	{
	 	try {
	 		remoteConnection.commit();
	 	}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public void rollback() throws SQLException
	{
	 	try {
	 		remoteConnection.rollback();
	 	}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public boolean isClosed()throws SQLException
	{
		try {
			return remoteConnection.isClosed();
		}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public DatabaseMetaData getMetaData()
         throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public void setReadOnly(boolean readOnly)
	      throws SQLException
	{
		try {
			remoteConnection.setReadOnly(readOnly);
		}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public boolean isReadOnly()
	       throws SQLException
	{
		try {
			return remoteConnection.isReadOnly();
		}
	 	catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public void setCatalog(String catalog)
           throws SQLException
	{
		try {
			remoteConnection.setCatalog(catalog);
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public String getCatalog()
	     throws SQLException
	{
		try {
			return remoteConnection.getCatalog();
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public void setTransactionIsolation(int level)
         throws SQLException
	{
		try {
			remoteConnection.setTransactionIsolation(level);
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public int getTransactionIsolation()
	      throws SQLException
	{
		try {
			return remoteConnection.getTransactionIsolation();
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}

	/*******************************************************************
	 *
	 */
	public SQLWarning getWarnings()
	      throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public void clearWarnings()
	      throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public CallableStatement prepareCall(String sql)
		          throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency)
	         throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency)
	        throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */

	/*******************************************************************
	 *
	 * @param map
	 * @throws SQLException
	 */
	public void setTypeMap(Map map) throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public Map getTypeMap() throws SQLException
	{
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public void setHoldability(int holdability) throws SQLException {
		try {
			remoteConnection.setHoldability(holdability);
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}


	/*******************************************************************
	 *
	 */
	public int getHoldability() throws SQLException {
		try {
			return remoteConnection.getHoldability();
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}


	/*******************************************************************
	 *
	 */
	public Savepoint setSavepoint() throws SQLException {
		throw(new SQLException("Not Supported"));
	}


	/*******************************************************************
	 *
	 */
	public Savepoint setSavepoint(String name) throws SQLException {
		throw(new SQLException("Not Supported"));
	}


	/*******************************************************************
	 *
	 */
	public void rollback(Savepoint savepoint) throws SQLException {
		try {
			remoteConnection.rollback();
		}
		catch(RemoteException ex) {
	 		throw ((new SQLException("RemoteException:" + ex.getMessage())));
	 	}
	}


	/*******************************************************************
	 *
	 */
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */

	/*******************************************************************
	 *
	 */
	public PreparedStatement prepareStatement(String sql, int resultSetType,
	int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public CallableStatement prepareCall(String sql, int resultSetType,
	int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
	throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
	throws SQLException {
		throw(new SQLException("Not Supported"));
	}

	/*******************************************************************
	 *
	 */
	public PreparedStatement prepareStatement(String sql, String[] columnNames)
	throws SQLException {
		throw(new SQLException("Not Supported"));
	}
}
