package com.acromate.session;

import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;

import com.acromate.data.DataIO;
import com.acromate.data.ListIO;
import com.acromate.driver.core.IDataObject;
import java.rmi.NotBoundException;
import java.rmi.ConnectException;
import com.acromate.util.Logger;
import com.acromate.driver.core.IClassObject;
import java.rmi.RemoteException;
import com.acromate.util.SecurityUtil;
import com.acromate.driver.net.IPacketHandler;
import com.acromate.driver.db.DataStatement;
import com.acromate.driver.db.IDataStatement;
import com.acromate.driver.net.Packet;
import com.acromate.driver.net.IPacket;

import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Timer;

import com.acromate.util.Str;

public class UserSessionClient extends ListIO{
    private int SESSION_NOTI_PERIOD = 60/2;
    public IDataObject dataObject;
    public IPacketHandler packetHandler;
    private String sessionID ;
    private String userSessionID ;
    private Object userObject ;

    private Logger log ;
    private String userID ;
    private String permitGroup ;
    private int userLevel ;
    private String remoteAddress ;
    private int remotePort ;
    private SessionNotiTimer sessionNotiTimer ;
    private DataStatementEmsPool dataStatementEmsPool ;
    private DataStatementEmsList iDataStatementEmsPool ;
    private EmsServerAgent emsServerAgent ;
    private boolean bIsServerConnected = false;

    public UserSessionClient(){
        log = Logger.getLogger(this.getClass());
        emsServerAgent = new EmsServerAgent(this);
    }

    public int getRemoteDataObject(String remoteAddress, int remotePort) {
        int result = 0;
        try {
            Registry registry = LocateRegistry.getRegistry(remoteAddress, remotePort);
            this.remoteAddress = remoteAddress;
            this.remotePort = remotePort;
            dataObject = (IDataObject)registry.lookup("IDataObject");
        } catch (NotBoundException ex) {
            log.error("exception occurred > getRegistry NotBoundException"); result = -2;
        } catch (ConnectException ex) {
            log.error("exception occurred > getRegistry ConnectException"); result = -3;
        } catch (Exception ex)  {
            log.error("exception occurred > getRegistry " ); result = -4;
        } return result;
    }

    public String login(String userID, String password) {
        if(dataObject != null) {
            try {
                this.userID = userID;
                String nonce = dataObject.getNonce(userID);
                String md5Sever = SecurityUtil.makeMD5(userID,password,nonce);
                userSessionID = dataObject.login(userID, md5Sever);
             } catch (ConnectException ex) {
                log.error("exception occurred > ", ex);
                userSessionID = "-5";
            } catch (RemoteException ex1) {
                log.error("exception occurred > ", ex1);
                userSessionID = "-6";
            }
        }   return userSessionID;
    }

    public boolean registerHandler(IPacketHandler handler) {
        if(handler != null) {
            this.packetHandler = packetHandler;
        }   return true;
    }

    public void logout() {
        if(dataObject != null) {
            try {
                dataObject.logout(userSessionID);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex);
            }
        }
    }

    public boolean register(String userID, String userSessionID) {
        this.userSessionID = userSessionID ;
        this.userID = userID ;
        return register();
    }
    public boolean register() {

        if(dataObject == null) return false ;
        if (sessionNotiTimer == null) {
            sessionNotiTimer = new SessionNotiTimer(this);
            Timer timer = new Timer();
            timer.schedule(sessionNotiTimer,1000*3 ,1000*SESSION_NOTI_PERIOD);
        }
        bIsServerConnected = true;
        try {
            sessionID = dataObject.register(userSessionID, "EMS") ;
            this.userLevel = dataObject.getPermitLevel(userSessionID);
            this.permitGroup = dataObject.getPermitGroup(userSessionID);
            if (sessionID.equals("FALSE")) return false ;
            dataStatementEmsPool = new DataStatementEmsPool(dataObject,sessionID,3);
            iDataStatementEmsPool = new DataStatementEmsList(dataObject,sessionID,3);
            emsServerAgent.init();
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
            return false;
        }   return true;
    }

    public int forciblyLogoutClient(String userId) {
        int nResult = 0;
        if(dataObject != null) {
            try {
                nResult = dataObject.setUserLogOutForcibly(userId);
             } catch (ConnectException ex) {
                log.error("exception occurred > ", ex);
                nResult = -5;
            } catch (RemoteException ex1) {
                log.error("exception occurred > ", ex1);
                nResult = -6;
            }
        }   return nResult;
    }

    public EmsServerAgent getEmsServerAgent(){
            return emsServerAgent;
    }

    public boolean isServerConnected(){
            return bIsServerConnected;
    }

    public IDataObject getDataObject(){
            return dataObject;
    }

   public String getUserSessionID(){
           return userSessionID;
   }

   public String getSessionID(){
           return sessionID;
   }

   public String getUserID(){
           return userID;
   }

   public int getUserLevel(){
           return userLevel;
   }

   public String getRemoteAddress(){
           return remoteAddress;
   }

   public int getRemotePort(){
           return remotePort;
   }

   public DataStatement allocStatementEMS(int options) {
      return dataStatementEmsPool.allocStatement(options);
   }

   public IDataStatement allocStatement(int options) {
      return iDataStatementEmsPool.allocStatement(options);
   }

    public String getRootScript(String field) {
        String result = null;
        try {
            IClassObject classObject = dataObject.getGroups(sessionID);
            result = classObject.getParam(field);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
            return result;
        }   return result;
    }

    public String callScriptCallMethod(String method, Object... argument) {
        String result = null;
        try {
            IClassObject classObject = dataObject.getGroups(sessionID);
            result = (String)classObject.callMethod(method, argument);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
            return result;
        }   return result;
    }

    public int setRootScript(String  field, String value) {
        int result = -1;
        try {
            IClassObject classObject = dataObject.getGroups(sessionID);
            result = classObject.setParam(field, value);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
        }   return result;
    }

    public Packet reqPacket(String systemId, Object... message) {
        Packet result  = null;
        if(dataObject != null) {
            try {
                IPacket packet = (IPacket)dataObject.reqPacket(sessionID, systemId, message);
                if(packet != null)
                   result  = new Packet(packet);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public int rptPacket(String systemId, Object... message) {
        int result = -1;
        if(dataObject != null) {
            try {
                result = (Integer)dataObject.rptPacket(sessionID, systemId, message);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public int cmdPacket(String systemId, Object... message) {
        int result = -1;
        if(dataObject != null) {
            try {
                result = (Integer)dataObject.cmdPacket(sessionID, systemId, message);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public void freeStatementEMS(IDataStatement statement) {
        iDataStatementEmsPool.freeStatement(statement);
    }

    public void removeStatementEMS(IDataStatement statement) {
        iDataStatementEmsPool.removeStatement(statement);
    }

    public void freeStatementEMS(DataStatement statement) {
        dataStatementEmsPool.freeStatement(statement);
    }

    public void packetHandler(IPacket packet) {
        if(packetHandler != null) {
            packetHandler.responseHandler(packet);
        }
    }

    public String getGroup() {
        String result = ""; String groupId = "", groupName = "";
        if(dataObject != null) {
            try {
                //Super admin user
                if(this.userLevel == 1 ||( this.userLevel == 6 && this.permitGroup.equals("0")  ) ) {
                    IClassObject classObject = dataObject.getGroups(userSessionID);
                    String groupIds = classObject.getParam("LIST");
                    StringTokenizer groups = new StringTokenizer(groupIds);
                    boolean firstGroup = true;
                    while(groups.hasMoreTokens()) {
                        groupId = groups.nextToken(",");
                        if(firstGroup) {
                            groupName = classObject.getParam(groupId+".groupName");
                            result   += Str.uncover(groupId).trim() + "," + groupName;
                            firstGroup = false;
                        } else {
                            groupName = classObject.getParam(groupId+".groupName");
                            result  += "," + Str.uncover(groupId).trim() + "," + groupName;
                        }
                    }
                //General user
                } else {
                    IClassObject classObject = dataObject.getGroup( sessionID,"(" + this.permitGroup + ")");
                    groupId   = (String)classObject.getParam("groupId");
                    groupName = (String)classObject.getParam("groupName");
                    result = Str.uncover(groupId).trim() + "," + groupName;
                }
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return null;
            }
        }   return result;
    }

    public Object callMethod(String method, Object... argument) {
        Object result = null;

        if(method.equals("getServerTimeAndNoti") == true) {
                getServerTimeAndNoti();
            return result;
        }
        return result;
    }

    public void getServerTimeAndNoti() {
        if (bIsServerConnected == false) return;
        if(dataObject != null) {
            try {
                String serverTime = (String)dataObject.callMethod(sessionID, "", "getServerTimeAndNoti", sessionID);
                if (Str.CheckNullString(serverTime).length()==0) {
                    bIsServerConnected = false;
                }
                System.out.println(serverTime);
            } catch (Exception ex) {
                bIsServerConnected = false;
                log.error("exception occurred > getServerTimeAndNoti");
            }
        }
    }

    public Object getUserObject() { return userObject; }
    public void setUserObject(Object userObject) { this.userObject = userObject; }

    @Override
    protected int getFieldData(String field, Index idx, StringBuilder value) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    protected int setFieldData(String field, String value) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    protected DataIO newListNode() {
        // TODO Auto-generated method stub
        return null;
    }
}
