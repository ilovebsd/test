package com.acromate.session;

import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;

import com.acromate.data.DataIO;
import com.acromate.driver.core.IDataObject;
import java.rmi.NotBoundException;
import java.rmi.ConnectException;
import com.acromate.util.Logger;
import com.acromate.driver.core.IClassObject;
import java.rmi.RemoteException;
import com.acromate.util.SecurityUtil;
import com.acromate.driver.net.IPacketHandler;
import com.acromate.driver.db.DataStatement;
import com.acromate.driver.db.IDataStatement;
import com.acromate.driver.net.Packet;
import com.acromate.driver.net.IPacket;

import java.util.StringTokenizer;
import com.acromate.util.Str;

public class SessionClient extends DataIO{
    public IDataObject dataObject;
    public IPacketHandler packetHandler;
    private SessionCmdUtil sessionCmdUtil;
    private String sessionID ;
    private String sysGroupID ;

    private Logger log ;
    private String userID ;
    private String permitGroup ;
    private int userLevel ;
    private String remoteAddress ;
    private int remotePort ;
    private DataStatementPool dataStatementPool ;
    public SessionClient(){
        log = Logger.getLogger(this.getClass());
    }

    public SessionCmdUtil getUtil(){
        return sessionCmdUtil;
    }

    public int getRemoteDataObject(String remoteAddress, int remotePort) {
        int result = 0;
        try {
            Registry registry = LocateRegistry.getRegistry(remoteAddress, remotePort);
            this.remoteAddress = remoteAddress;
            this.remotePort = remotePort;
            dataObject = (IDataObject)registry.lookup("IDataObject");
        } catch (NotBoundException ex) {
            log.error("exception occurred > NotBoundException",ex); result = -2;
        } catch (ConnectException ex) {
            log.error("exception occurred > ConnectException",ex); result = -3;
        } catch (Exception ex)  {
            log.error("exception occurred > ", ex); result = -4;
        } return result;
    }

    public boolean registerHandler(IPacketHandler handler) {
        if(handler != null) {
            this.packetHandler = packetHandler;
        }   return true;
    }

    public boolean register(String userSessionID, String groupID) {
        if(dataObject != null) {
            try {
                sessionID = dataObject.register(userSessionID, groupID) ;
                if (sessionID.equals("FALSE")) return false ;
                dataStatementPool = new DataStatementPool(dataObject,sessionID,3);
                sessionCmdUtil = new SessionCmdUtil(dataObject,sessionID);
                sysGroupID = groupID;
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex);
                return false;
            }   return true;
        }       return false;
    }

   public IDataObject getDataObject(){
	   return dataObject;
   }

   public String getSessionID(){
	   return sessionID;
   }

   public String getSysGroupID(){
	   return sysGroupID;
   }

   public String getUserID(){
	   return userID;
   }

   public int getUserLevel(){
	   return userLevel;
   }

   public String getRemoteAddress(){
	   return remoteAddress;
   }

   public int getRemotePort(){
	   return remotePort;
   }

    public DataStatement allocStatement(String script) {
       return dataStatementPool.allocStatement(script);
    }

    public IDataStatement allocStatementEMS(int options) {
    	IDataStatement dataStatement = null;
        if(dataObject != null) {
            try {
            	dataStatement = dataObject.allocStatementEMS(sessionID,options);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex);
            }
        }   return dataStatement;
    }

    public String getParam(String systemId, String field) {
        String result = null;
        try {
            IClassObject classObject = dataObject.getSystem(sessionID, systemId);
            result = classObject.getParam(field);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
            return result;
        }   return result;
    }

    public int setParam(String systemId, String field, String value) {
        int result = -1;
        try {
            IClassObject classObject  = dataObject.getSystem(sessionID, systemId);
            result = classObject.setParam(field, value);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex); return result;
        } return result;
    }

    public String getGroupScript(String field) {
        String result = null;
        try {
            result = dataObject.getGroupScript( sessionID, field);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
            return result;
        }   return result;
    }

    public int setGroupScript(String field, String value) {
        int result = -1;
        try {
            result = dataObject.setGroupScript( sessionID, field, value);
        } catch (RemoteException ex) {
            log.error("exception occurred > ", ex);
        }   return result;
    }

    public Packet reqPacket(String systemId, Object... message) {
        Packet result  = null;
        if(dataObject != null) {
            try {
                IPacket packet = (IPacket)dataObject.reqPacket(sessionID, systemId, message);
                if(packet != null)
                   result  = new Packet(packet);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public int rptPacket(String systemId, Object... message) {
        int result = -1;
        if(dataObject != null) {
            try {
                result = (Integer)dataObject.rptPacket(sessionID, systemId, message);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public int cmdPacket(String systemId, Object... message) {
        int result = -1;
        if(dataObject != null) {
            try {
                result = (Integer)dataObject.cmdPacket(sessionID, systemId, message);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex); return result;
            }
        }   return result;
    }

    public void freeStatement(IDataStatement dataStatement) {
        if(dataObject != null) {
            try {
                dataObject.freeStatement(sessionID, dataStatement);
            } catch (RemoteException ex) {
                log.error("exception occurred > ", ex);
            }
        }
    }

    public void freeStatement(DataStatement statement) {
        dataStatementPool.freeStatement(statement);
    }

    public void packetHandler(IPacket packet) {
        if(packetHandler != null) {
            packetHandler.responseHandler(packet);
        }
    }

	@Override
	protected int getFieldData(String field, Index idx, StringBuilder value) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	protected int setFieldData(String field, String value) {
		// TODO Auto-generated method stub
		return 0;
	}
}
