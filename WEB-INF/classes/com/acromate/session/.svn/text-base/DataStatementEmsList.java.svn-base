package com.acromate.session;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.rmi.RemoteException;

import com.acromate.util.Logger;
import com.acromate.util.StateObject;
import com.acromate.driver.core.IDataObject;
import com.acromate.driver.db.IDataStatement;

public class DataStatementEmsList {
    List list = Collections.synchronizedList(new LinkedList());
    List labelList = Collections.synchronizedList(new LinkedList());

    private Logger log = Logger.getLogger(this.getClass());
    private IDataObject dataObject = null ;
    private int max = 2 ;
    private String sessionID = "" ;

    public DataStatementEmsList(IDataObject dataObject, String sessionID , int max) {
        this.dataObject = dataObject;
        this.sessionID = sessionID;
        this.max = max;
    }

    public synchronized IDataStatement allocStatement(int options) {
        int size = list.size();

        for ( int i=0; i<size; i++ ) {
            StateObject label = (StateObject)list.get(i);
            if ( label.getState() == options ) {
                IDataStatement dataStatement = (IDataStatement)label.getObject();
                list.remove(i);
                return dataStatement;
            }
        }

        if (size==0) {
        	IDataStatement dataStatement = null;
            try {
            	dataStatement = dataObject.allocStatementEMS(sessionID, options);
            	StateObject label = new StateObject(dataStatement,options);
            	labelList.add(label);
            } catch(RemoteException ex){
                log.error("exception occurred > ", ex);
            }
            return dataStatement;
        }
		return null;
    }

    public synchronized void freeStatement(IDataStatement dataStatement) {
        StateObject label = null;

        int labelSize = labelList.size();
        for ( int i=0; i<labelSize; i++ ) {
        	StateObject tempLabel = (StateObject)labelList.get(i);
            if ( tempLabel.getObject() == dataStatement ) {
            	label = tempLabel;
                break;
            }
        }
        if (label == null) return;
        if (list.size() >= max) {
            try {
            	dataObject.freeStatement(sessionID, dataStatement);
                labelList.remove(label);
            } catch(RemoteException ex){
                log.error("exception occurred > ", ex);
            }
        }
        else {
        	list.add(label);
        }
    }

    public synchronized void removeStatement(IDataStatement dataStatement) {
        StateObject label = null;

        int labelSize = labelList.size();
        for ( int i=0; i<labelSize; i++ ) {
        	StateObject tempLabel = (StateObject)labelList.get(i);
            if ( tempLabel.getObject() == dataStatement ) {
            	label = tempLabel;
                break;
            }
        }
        if (label == null) return;
        try {
            labelList.remove(label);
            dataObject.freeStatement(sessionID, dataStatement);
        } catch(RemoteException ex){
            log.error("exception occurred > ", ex);
        }
    }
}
