package com.acromate.server;

import java.rmi.*;
import java.rmi.server.*;
import java.util.*;
import java.sql.*;

public class RemoteResultSetImpl extends UnicastRemoteObject
	implements IRemoteResultSet
{
	private static final long serialVersionUID = 1L;
	private int colNum;	
	private ResultSet sqlRs;
	private ResultSetMetaData rsmd;	
	private Hashtable columnList;	
	private static int CHUNK_SIZE = 50;

	/*******************************************************************
	 * 
	 * @param rs
	 * @throws RemoteException
	 * @throws SQLException
	 */	
	public RemoteResultSetImpl(ResultSet rs) throws RemoteException,SQLException
	{
		super();		
		sqlRs = rs;		
		rsmd = sqlRs.getMetaData();
		colNum = rsmd.getColumnCount();
		columnList = new Hashtable(20,10);

		for(int i = 1; i <= colNum; i++)
		{
			String columnName = rsmd.getColumnName(i);
			Integer columnIndex = new Integer(i);
			columnList.put(columnName,columnIndex);
		}
	}

	/*******************************************************************
	 * 
	 */	
	public ResultSetChunk getNextChunk() throws RemoteException,SQLException
	{
		Vector rsDataChunk = new Vector();
		for(int curRowIndex = 0; curRowIndex < CHUNK_SIZE; curRowIndex++)
		{	 
			if(sqlRs.next() == false)
				break;
			
			Object []row = new Object[colNum];
			for(int i = 1; i <= colNum; i++)
			{
				row[i-1] = sqlRs.getString(i);
			}
			rsDataChunk.addElement(row);
		}
		
		if(rsDataChunk.size() == 0)
			return null;
		
		ResultSetChunk rsChunk = new ResultSetChunk(rsDataChunk);		
		return rsChunk;
	}
	
	/*******************************************************************
	 * 
	 */
	public void close() throws RemoteException,SQLException
	{
		sqlRs.close();
	}
	
	/*******************************************************************
	 * 
	 */
	public Hashtable getColumnList() throws RemoteException,SQLException
	{
		return columnList;
	}
}
