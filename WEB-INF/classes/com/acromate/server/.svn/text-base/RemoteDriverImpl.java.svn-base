package com.acromate.server;

import java.net.MalformedURLException;
import java.rmi.*;
import java.rmi.server.*;
import java.util.*;
import java.sql.*;

public class RemoteDriverImpl extends UnicastRemoteObject
	implements IRemoteDriver
{
	private static final long serialVersionUID = 1L;
	private static String urlName;
	private static String rmiName;
	private static String driverId;
	private static String userid;
	private static String passwd;
	private static int maxconn = 1;

	/*******************************************************************
	 *
	 */
	public RemoteDriverImpl() throws RemoteException
	{
		super();
		try{init();}catch(Exception e){
			System.out.println("########### RemoteDriverImpl ERROR: " + e.toString());
		}
			System.out.println("########### RemoteDriverImpl Started ########### ");
		
  	}

	/*******************************************************************
	 *
	 */
	public IRemoteConnection getConnection(String userId) throws RemoteException,SQLException
	{

		System.out.println("--- Now login request id: " + userId);
		ConnectionPool pool = ConnectionManager.getInstance().getConnectionPool(userId);
		if(pool != null) {
			Connection sqlCon = pool.getConnection();
			if(sqlCon == null) {
				return null;
			}

			RemoteConnectionImpl ConnectionInstance = new RemoteConnectionImpl(sqlCon, userId);
			return (IRemoteConnection)ConnectionInstance;
		}
		return null;
	}

	/*******************************************************************
	 *
	 *
	 */
	private boolean initializeConnectionPool()
	{
		try {

			//--------------------------------------------------------------------
			//SSWD 테이블에서 등록된 사용자 정보 검색
			Connection sqlCon = DriverManager.getConnection(urlName,userid,passwd);
			Statement stmt = sqlCon.createStatement();
			ResultSet rs = stmt.executeQuery("select SYSGROUPID, DBUSERNAME,DBPASSWORD ,DBCONNECTIONSTRING,DBDRIVERCLASS  from table_system_hardware where machineid like 'SSW%' and machinetype = 1");

			while(rs.next()) {

				String sswid  = rs.getString(1); //sswid
				String name   = rs.getString(2); //user name
				String passwd = rs.getString(3); //user password
				String url    = rs.getString(4); //url
				String driver = rs.getString(5);

				//-----------------------------------------------------------------
				//자신의 드라이버와 같이 않으면
				//드라이버 로딩...
				if(!driver.equals(driverId))
				{
					try {
						Class.forName(driver);
					}
					catch(ClassNotFoundException ex) {
						System.out.println(ex.getMessage());
						return false;
					}
				}
			System.out.println("1 $$$$$$$$$$$$$ ConnectionManager.getInstance() sswid :"+sswid);

				ConnectionPool pool = new ConnectionPool();
			System.out.println("2 $$$$$$$$$$$$$ ConnectionManager.getInstance() sswid :"+sswid);
				if(pool == null) return false;
			System.out.println("3 $$$$$$$$$$$$$ ConnectionManager.getInstance() sswid :"+sswid);
				if(!pool.initializeConnectionPool(maxconn, url, name, passwd)) return false;
			System.out.println("4 $$$$$$$$$$$$$ ConnectionManager.getInstance() sswid :"+sswid);
				ConnectionManager.getInstance().addConnectionPool(sswid, pool);
			System.out.println("5 $$$$$$$$$$$$$ ConnectionManager.getInstance() sswid :"+sswid);
				
			}
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		return true;
	}

	/*******************************************************************
	 *
	 *
	 */
	private void freeConnectionPool()
	{
		try
		{
			Enumeration enumeration = ConnectionManager.getInstance().getIterator();
			while(enumeration.hasMoreElements())
			{
				ConnectionPool connPool = (ConnectionPool)enumeration.nextElement();
				Iterator iterator = connPool.getIterator();
				while(iterator.hasNext()) {
					Connection conn = (Connection)iterator.next();
					if(conn != null) conn.close();
				}
			}
		}
		catch(Exception ex) {}
	}
	public void init() throws RemoteException, MalformedURLException
	{

		ResourceBundle settingsBundle = ResourceBundle.getBundle("jdbc");

		//-----------------------------------------------------------------------------
		//환경설정 파일 정보 로딩...
		rmiName  = settingsBundle.getString("rmi");
		urlName  = settingsBundle.getString("url");
		userid   = settingsBundle.getString("userid");
		passwd   = settingsBundle.getString("passwd");
		driverId = settingsBundle.getString("driver");
		maxconn  = Integer.parseInt(settingsBundle.getString("maxconn"));

		try {

			Class.forName(driverId);
		}
		catch(ClassNotFoundException ex) {
			System.out.println(ex.getMessage());
			System.exit(-1);
		}

		if(System.getSecurityManager() == null) {
			System.setSecurityManager(new RMISecurityManager());
		}

		if(!initializeConnectionPool())
		{
			System.out.println("--- Not creation connection pooling");
			System.exit(-1);
		}

		Naming.rebind(rmiName, this);
		System.out.println("--- RMI Server is started...");

	} 

	/*******************************************************************
	 *
	 * @param args
	 * @throws RemoteException
	 * @throws MalformedURLException
	 */
/*
	public static void main(String args[]) throws RemoteException, MalformedURLException
	{

		ResourceBundle settingsBundle = ResourceBundle.getBundle("jdbc");

		//-----------------------------------------------------------------------------
		//환경설정 파일 정보 로딩...
		rmiName  = settingsBundle.getString("rmi");
		urlName  = settingsBundle.getString("url");
		userid   = settingsBundle.getString("userid");
		passwd   = settingsBundle.getString("passwd");
		driverId = settingsBundle.getString("driver");
		maxconn  = Integer.parseInt(settingsBundle.getString("maxconn"));

		try {

			Class.forName(driverId);
		}
		catch(ClassNotFoundException ex) {
			System.out.println(ex.getMessage());
			System.exit(-1);
		}

		if(System.getSecurityManager() == null) {
			System.setSecurityManager(new RMISecurityManager());
		}

		RemoteDriverImpl serverInstance = new RemoteDriverImpl();
		if(!serverInstance.initializeConnectionPool())
		{
			System.out.println("--- Not creation connection pooling");
			System.exit(-1);
		}

		Naming.rebind(rmiName, serverInstance);
		System.out.println("--- RMI Server is started...");

	} */
}
