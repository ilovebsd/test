package com.acromate.framework.frame;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import com.acromate.data.code.AppCode;
import com.acromate.data.DataIO;
import com.acromate.data.ListIO;
import com.acromate.data.DataIO.Index;

class EmsSectionList extends ListIO{

	@Override
	protected DataIO newListNode() {
		// TODO Auto-generated method stub
		return new EmsSection();
	}
}

public class EmsConfig extends DataIO{
	private String filePath = null;
	private int	nVersion	= 0;
	private EmsSectionList sections = new EmsSectionList();
	public EmsConfig(String path){
		filePath = path;
		if(filePath != null){
			load();
		}
	}

	// current update version
	public int getCurrentVersion() { return nVersion ; }


	/* section control */
	// scrolling section search
	//		cursor	: current ( 0 ), to next( > 0 ), to prev( < 0 )
	//		name	: first section position ( NULL )
	public EmsSection searchSection( String name, int cursor ) {
		EmsSection pSection = null;
		int i=0;
		if(name == null)return pSection;
		for(i=0;i<sections.getCount();i++){
			pSection = (EmsSection)sections.getNode(i);
			if(name.equals(pSection.member)){
				if(cursor >0){
					if( i + cursor > sections.getCount()){
						pSection = (EmsSection) sections.getNode(sections.getCount() - 1);
					}else{
						pSection = (EmsSection) sections.getNode(i + cursor);
					}
				}else{
					if( i - cursor <= 0){
						pSection = (EmsSection) sections.getNode(0);
					}else{
						pSection = (EmsSection) sections.getNode( i - cursor);
					}
				}
				return pSection;
			}
		}
		return null;
	}
	public EmsSection searchSection( String name ) {
		return searchSection(  name, 0 );
	}
	// modify section
	public void	removeSection( String name ) {
		sections.removeNode(name);
	}
	// movement ( > 0 : to next, < 0 : to prev )
	public void	moveSectionPosition( String name, int movement ) {
		EmsSection pSection = null;
		EmsSection pAfterSection = null;
		if(movement == 0) return;
		pSection = searchSection(name);
		pAfterSection = searchSection( name, movement );
		removeSection(name);
		sections.insertNode(pAfterSection, pSection);
		return ;
	}
	/* field control */

	// scrolling field search ( cursor : current ( 0 ), to next( > 0 ), to prev( < 0 ) )
	public EmsField searchSectionField( String section, String field, int cursor ) {
		EmsSection pSection 	= null;
		EmsField pField 		= null;
		if(section == null )	return null;
		if(field   == null ) 	return null;

		pSection = searchSection(section);
		int i=0;
		for( i = 0 ; i < pSection.getCount() ; i++ ){
			pField = (EmsField)pSection.getNode(i);
			if(field.equals(pField.member)){
				if(cursor >0){
					if( i + cursor > pSection.getCount()){
						pField = (EmsField) pSection.getNode(sections.getCount() - 1);
					}else{
						pField = (EmsField) pSection.getNode(i + cursor);
					}
				}else{
					if( i - cursor <= 0){
						pField = (EmsField) pSection.getNode(0);
					}else{
						pField = (EmsField) pSection.getNode( i - cursor);
					}
				}
				return pField;
			}
		}
		return null;

	}
	public EmsField searchSectionField( String section, String field ) {
		return searchSectionField( section, field, 0 );
	}
	// modify section field
	public int updateSectionField( String section, String field, String value, String name , String comment  ) {
		EmsField pField = searchSectionField( section, field );
		if(name != null)
			pField.member	= name;
		if(value != null)
			pField.value 	= value;
		if(comment != null)
			pField.comment	= comment;
		return 0;
	}
	public int updateSectionField( String section, String field, String value,String name ) {
		return updateSectionField( section, field, value,  name, null );
	}
	public int updateSectionField( String section, String field, String value ) {
		return updateSectionField( section, field, value,  null, null );
	}
	public void	removeSectionField( String section, String field ) {
		EmsSection pSection = searchSection(section);
		pSection.removeNode(field);
	}
	public void	moveSectionFieldPosition( String section, String field, int movement ) {	// movement ( > 0 : to next, < 0 : to prev )
		EmsSection pSection = searchSection(section);
		EmsField pField = searchSectionField( section, field );
		if(field == null)return;
		if(movement == 0) return;
		EmsField pAfterField = searchSectionField( section, field ,movement);
		pSection.removeNode(field);
		pSection.insertNode(pAfterField, pField);
		return ;

	}
	public String getFieldValue( String section, String field ) {
		EmsSection pSection = searchSection(section);
		EmsField pField = (EmsField)pSection.getNode(field);
		if(pField != null){
			return pField.value;
		}
		return null;
	}

	// operations
	public int load(){
		ArrayList buffers = null;

        if( ( buffers=load ( filePath ) )  == null) {
            return AppCode.ERR_INVALID_CONFIG_FILE;
        }
        String   data = "";
        Iterator<?> iter = buffers.iterator();
        EmsSection pSection = null;
        while(iter.hasNext()) {
        	/* comment line */
            String lines  = (String)iter.next();
            if(lines.equals("")) continue;
            byte[] bytes = lines.getBytes();
            //If this line data is comment or not
            if((bytes[0] == (byte)';') || (bytes[0] == 0x10) || (bytes[0] == ' ')) {
                continue;
                /*
         	/* section head */
            } else if(bytes[0] == (byte)'[') {
                int index = lines.indexOf(']');
                String member = lines.substring(1, index).trim();
                index = lines.indexOf(';');
                String comment = null;
                if(index >0){
                	comment = lines.substring(index+1).trim();
                }
                pSection = new EmsSection();
                pSection.member = member;
                pSection.comment = comment;
                sections.appendTail(pSection);
                continue;
            //If this line is data or not
            } else {
                //If this line is concactation delimeter char
                int index = lines.indexOf('=');
                String field = lines.substring(0, index).trim();
                String value = lines.substring(index+1).trim();
                int nComment  = lines.indexOf(';');
                String comment = null;
                if( nComment >= 0) {
                    value = lines.substring(index+1,nComment).trim();
                    comment = lines.substring(nComment+1);
                } data = "";
                EmsField pField = new EmsField();
                pField.member = field;
                pField.value = value;
                pField.comment =comment;
                pSection.appendTail(pField);
            }
        }
        return AppCode.ERR_NOERROR;
    }
    public ArrayList load(String fileName) {
        BufferedReader reader = null;
   	 	ArrayList<String> buffers = null;

        try {
        	File file = new File(fileName);
            reader = new BufferedReader(new FileReader(file));
            String readData = null;
            buffers = new ArrayList();
            while((readData = reader.readLine()) != null) {
                readData.trim();
                buffers.add(readData);
            }
        }
        catch (IOException ex){
        	buffers = null;
         	return null;
        } finally {
            if(reader != null) {
                try {
                	reader.close();
                }catch(IOException ex){}
            }
        }
        return buffers;
    }
	public int save(String filePath){
		ArrayList list = load(filePath);
        BufferedWriter writer = null;
		EmsSection pSection = null;
		EmsField pField = null;
        try {
            writer = new BufferedWriter(new FileWriter(filePath));
            StringBuffer buffer = new StringBuffer();
            for( int i = 0; i < sections.getCount(); i++){
            	pSection = (EmsSection)sections.getNode(i);
            	if(pSection == null) continue;
            	if(pSection.member != null){
            		buffer.append("[ ").append(pSection.member).append("] ");
            		if(pSection.comment != null){
                		buffer.append("\t").append(";").append(pSection.comment);
            		}
            	}
            	buffer.append("\n");
            	for(int j = 0;j<pSection.getCount();j++){
	            	pField = (EmsField)pSection.getNode(j);
	            	if(pField == null) continue;
	            	if(pField.member != null)
	            		buffer.append(pField.member).append(" = ");
	            	if(pField.value != null)
	            		buffer.append(pField.value);
	            	if(pField.comment != null)
	            		buffer.append("\t;").append(pField.value);
	            	buffer.append("\n");
            	}
            }
            writer.write(buffer.toString());
        } catch (IOException ex) {
            try {
                writer = new BufferedWriter(new FileWriter(filePath));
                Iterator<?> iter = list.iterator();
                while(iter.hasNext()) {
                    writer.write((String)iter.next()+"\n");
                }
            } catch (IOException e) {
                return AppCode.ERR_INVALID_CONFIG_FILE;
            } finally {
                if(writer != null) {
                    try {
                    	writer.close();
                    } catch (IOException e) {
                    }
                    return AppCode.ERR_INVALID_CONFIG_FILE;
                }
            }
            return AppCode.ERR_INVALID_CONFIG_FILE;
        } finally {
            if(writer != null) {
                try {
                	writer.close();
                } catch (IOException ex) {
                }
                return AppCode.ERR_INVALID_CONFIG_FILE;
            }
        }

		return 0;
	}
	// tools ( value conversion )
	public boolean Boolean( String value ) {
		if   ( value == null )	return false ;
		if   ( "".equals(value) )	return false ;

		/* check true */
		if   ( ! "true".equals( value ) )	return true ;
		if   ( ! "yes".equals( value ) )	return true ;
		/* check false */
		if   ( ! "false".equals( value ) )	return false ;
		if   ( ! "no".equals( value ) )		return false ;

		return (Integer( value )== 1 ? true : false) ;
	}

	public int Integer( String value ) {
		int no = 0 ;
		boolean sign ;
		if   ( value == null 	)	return 0 ;
		if   ( "".equals(value) )	return 0 ;
		try{
			no = Integer.parseInt(value);
		}catch(Exception ex){

		}
		return no ;
	}

    protected int setFieldData(String field, String value) {
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        return 0;
    }
    /*
	public static void main(String argsp[]){
		EmsConfig emsConfig = new EmsConfig("c:\\webstart.ini");
		String section = "EMS Agent";
		String field = "systemID";
		String value = "^^";
		String name = "";
		String comment = "";
		int movement = 1;
		emsConfig.MoveSectionFieldPosition(section,field,movement);
		System.out.println(emsConfig);
		emsConfig.save("c:\\webstart.ini");
	}
	*/
}
