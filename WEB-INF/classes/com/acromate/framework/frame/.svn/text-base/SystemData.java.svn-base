package com.acromate.framework.frame;

import java.rmi.ConnectException;
import java.rmi.NotBoundException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

import com.acromate.driver.core.IDataObject;
import com.acromate.driver.db.IDataStatement;
import com.acromate.session.DataStatementList;
import com.acromate.session.UserSessionClient;
import com.acromate.util.Logger;

public class SystemData extends SystemMenu {
    //member
    private ServiceModuleList moduleList ;
    private IDataObject dataObject ;
    private UserSessionClient userSessionClient ;
    private DataStatementList dataConnectionList ;
    private String sessionID = "" ;
    private Logger log = Logger.getLogger(this.getClass());

    public SystemData(){}
    public SystemData(String pSystemID){
    	super(pSystemID);
    }

    public void init(int poolCount, UserSessionClient userSessionClient){
        dataConnectionList = new DataStatementList(this,poolCount);
        this.userSessionClient = userSessionClient;
    }

    public UserSessionClient getSystemDataEMS(){
        return userSessionClient;
    }

    public int registerServer(String userSessionID, String remoteAddress, int remotePort ) {
        int result = 0;
        try {
            Registry registry = LocateRegistry.getRegistry(remoteAddress, remotePort);
            dataObject = (IDataObject)registry.lookup("IDataObject");
            sessionID = dataObject.register(userSessionID, systemID.toString());
        } catch (NotBoundException ex) {
            log.error("exception occurred > NotBoundException",ex); result = -2;
        } catch (ConnectException ex) {
            log.error("exception occurred > ConnectException",ex); result = -3;
        } catch (Exception ex)  {
            log.error("exception occurred > ", ex); result = -4;
        } return result;
    }

    //method
    public void setLoadbleModuleList (ServiceModuleList moduleList){ this.moduleList = moduleList ; }
    public ServiceModuleList getLoadbleModuleList (){return moduleList;}
    public String getSessionID() { return sessionID; }

    public IDataObject getDataObject(){return dataObject;}
    public int connectDataObject(String uid, String passwd){ return 0; }
    public IDataStatement allocStatement(){ return dataConnectionList.allocStatement();}
    public void freeStatement (IDataStatement dataStatement){ dataConnectionList.freeStatement(dataStatement); }
    public void removeStatement (IDataStatement dataStatement){ dataConnectionList.removeStatement(dataStatement); }
}
