/*
 * Packet.java
 *
 * Created on 2006년 8월 7일 (월), 오후 5:13
 * Copyright 2006 Acromate, Inc. All rights reserved.
 */

package com.acromate.framework.remote.net.packet;

import java.nio.ByteBuffer;

/**
 *
 * @author 아크로메이트 기술연구소
 * @version 1.0.0
 */
public abstract class BasePacket {

    protected int headerSize = 0;
    protected int packetSize = 0;
    protected int packetPos  = 0;
    protected ByteBuffer buffer;

    /**
     *
     * @param buffer
     */
    public void setBuffer(ByteBuffer buffer) {
        this.buffer = buffer;
        this.buffer.position(getHeaderSize());
    }

    /**
     *
     * @param buffer
     */
    public void setBuffer(byte[] buffer) {
        this.buffer = ByteBuffer.wrap(buffer, 0, buffer.length);
        this.buffer.position(getHeaderSize());
    }

    /**
     *
     * @param buffer
     * @param initial
     */
    public void setBuffer(byte[] buffer, boolean initial) {
        setBuffer(buffer);
        if(initial) {
            this.buffer.position(0);
        }
    }

    /**
     *
     *
     */
    public void clearBuffer() {
        this.buffer.position(getHeaderSize());
    }


    /**
     *
     * @param pos
     */
    public void setPosition(int pos) {
        this.buffer.position(pos);
    }

    /**
     *
     * @param value
     */
    public void setByte(byte value) {
        try {
            buffer.put(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setBytes(byte[] value) {
        try {
            buffer.put(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     * @param offset
     * @param size
     */
    public void setBytes(byte[] value, int offset, int size) {
        try {
            ByteBuffer temp = buffer.put(value, offset, size);
            packetSize = temp.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public  void setChar(char value) {
        try {
            buffer.putChar(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setShort(short value) {
        try {
            buffer.putShort(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setInt(int value) {
        try {
            buffer.putInt(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setLong(long value) {
        try {
            buffer.putLong(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setFloat(float value) {
        try {
            buffer.putFloat(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setDouble(double value) {
        try {
            buffer.putDouble(value);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setString(String value) {
        try {
            byte[] bytes = value.getBytes();
            buffer.putInt(bytes.length);
            packetSize = buffer.position() - getHeaderSize();
            buffer.put(bytes);
            packetSize = buffer.position() - getHeaderSize();
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @param value
     */
    public void setString(String value, int length) {
        try {

            int tempLen = value.getBytes().length;
            buffer.put(value.getBytes(), 0, tempLen);
            packetSize = buffer.position() - getHeaderSize();

            if(value.length() < length) {
                int remainder = length - value.getBytes().length;
                for(int index = 0; index < remainder; index++) {
                    buffer.put((byte)0x00);
                }   packetSize = buffer.position() - getHeaderSize();
            }
        }catch(Exception ex) { ex.printStackTrace(); }
    }

    /**
     *
     * @return
     */
    public ByteBuffer getBuffer() {
        return buffer;
    }

    /**
     *
     * @param value
     */
    public byte getByte() {
        byte value = 0;
        try {
            value =  buffer.get();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public char getChar() {
        char value = ' ';
        try {
            value = buffer.getChar();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public short getShort() {
        short value = 0;

        try {
            value = buffer.getShort();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public int getInt() {
        int value = 0;

        try {
            value = buffer.getInt();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public long getLong() {
        long value = 0;

        try {
            value = buffer.getLong();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public float getFloat() {
        float value = 0;
        try {
            value = buffer.getFloat();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param value
     */
    public double getDouble() {
        double value = 0;
        try {
            value = buffer.getDouble();
        }catch(Exception ex) { ex.printStackTrace(); }
        return value;
    }

    /**
     *
     * @param size
     * @return
     */
    public String getString() {
        String tempValue = "";

        try {
            int size = buffer.getInt();
            byte[] bytes = new byte[size];
            buffer.get(bytes, 0, size);
            tempValue = new String(bytes);
        }catch(Exception ex) { ex.printStackTrace(); }
        return tempValue;
    }

    /**
     *
     * @param size
     * @return
     */
    public String getString(int size) {
        String realValue = "";
        try {
            byte[] bytes = new byte[size];
            buffer.get(bytes, 0, size);
            String tempValue = new String(bytes);
            int length = tempValue.indexOf(0x00);
            if(length >= 0)
                  realValue = tempValue.substring(0, length).trim();
            else realValue = tempValue.trim();
        }catch(Exception ex) { ex.printStackTrace(); }
        return realValue;
    }

    /**
     *
     * @return
     */
    public int getPacketSize() {
        return packetSize + getHeaderSize();
    }

    /**
     *
     * @return
     */
    public abstract int getHeaderSize();

    /**
     *
     * @return
     */
    public abstract int getHeader();

    /**
     *
     * @return
     */
    public abstract int getLimitSize();
}
