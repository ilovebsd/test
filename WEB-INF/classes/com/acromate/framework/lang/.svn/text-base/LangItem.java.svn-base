package com.acromate.framework.lang;

import com.acromate.data.DataIO;
import com.acromate.data.ListIO;
import com.acromate.data.code.AppCode;

/* menu item ////////////////////////// */
public class LangItem extends ListIO
{
// construction
	public LangItem(){
		nodeName = new StringBuilder(); 
	}
	public LangItem(  String pMenuName ) {
		if(pMenuName == null ) nodeName = new StringBuilder(); 
		else nodeName = new StringBuilder(pMenuName);
	}
	
// attribute
	
	// object identifier
	protected StringBuilder   nodeName = new StringBuilder();
	protected StringBuilder   txtdata = new StringBuilder();


	// class data i/o
	public int getFieldData( String field, Index indx, StringBuilder data) {
		boolean stop = (field != null) ;
		int errcode;
		StringBuilder sbField =new StringBuilder(field);
		// common field

		if   ( compareFieldID( sbField, "txtdata", indx, data ) )
		{    errcode = getString( txtdata.toString(), data, ! stop ) ;
		     if   ( stop || errcode != AppCode.ERR_NOERROR)	return errcode ;
		}
		return super.getFieldData( field, indx, data) ;
	}
	public int setFieldData( String field, String value) {
		//System.out.println("MenuItem.setFieldData ["+field+"]"+"["+value+"]");

		// common field
		StringBuilder sbfield = new StringBuilder(field);
		if ( compareFieldID( sbfield, "txtdata" ) )
			return setString( txtdata, value ) ;

		return super.setFieldData( field, value ) ;
		
	}
	// object identifier
	public String getClassID() { if(nodeName != null ) return nodeName.toString() ; else return null; }
	// index i/o
	public DataIO getNode( String pNodeID ) {
		DataIO pNode  =null;
		if(pNodeID != null){    
			char temp[] = pNodeID.toCharArray();
			int nStar = 0;
			int nEnd = 0;
			nEnd = temp.length-1;
			for(int i=0;i<nEnd;i++){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nStar++;
				else break;
			}
			for(int i = temp.length-1;i> nStar;i--){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nEnd--;
				else break;
			}
			pNodeID = pNodeID.substring(nStar, nEnd+1);
		}
		if   ( (pNode = super.getNode( pNodeID )) != null )
		     return pNode ;
		if   (pNodeID == null  )
		     return null ;
		if   (( pNode = new LangItem(  pNodeID ) ) != null)
		     appendTail( pNode ) ;
		return pNode;
	}
	public DataIO search(  String pNodeID ) {
		if(pNodeID != null){    
			char temp[] = pNodeID.toCharArray();
			int nStar = 0;
			int nEnd = 0;
			nEnd = temp.length;
			for(int i=0;i<nEnd;i++){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nStar++;
				else break;
			}
			for(int i = temp.length-1;i> nStar;i--){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nEnd--;
				else break;
			}
			pNodeID = pNodeID.substring(nStar, nEnd);
		}
		return super.getNode( pNodeID ) ;
	}

// operations
	@Override
	protected DataIO newListNode() {
		return new LangItem(  ) ;
	}
}
/* menu set list ////////////////////// */
class LangSetList extends ListIO
{
// construction
	public LangSetList() {
	}

// attribute
	// index i/o
	public DataIO getNode( String pNodeID ) {
		DataIO pNode = null;
		if(pNodeID != null){    
			char temp[] = pNodeID.toCharArray();
			int nStar = 0;
			int nEnd = 0;
			nEnd = temp.length-1;
			for(int i=0;i<nEnd;i++){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nStar++;
				else break;
			}
			for(int i = temp.length-1;i> nStar;i--){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nEnd--;
				else break;
			}
			pNodeID = pNodeID.substring(nStar, nEnd+1);
		}
		if( (pNode = super.getNode( pNodeID )) != null )
			return pNode ;
		if( pNodeID == null)
			return null ;
		if( (pNode = new LangSet( pNodeID )) != null )
			appendTail( pNode ) ;
		return pNode ;
	}
	public DataIO search(  String pNodeID ) {
		if(pNodeID != null){    
			char temp[] = pNodeID.toCharArray();
			int nStar = 0;
			int nEnd = 0;
			nEnd = temp.length-1;
			for(int i=0;i<nEnd;i++){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nStar++;
				else break;
			}
			for(int i = temp.length-1;i> nStar;i--){
				if((0 < temp[i] && temp[i] < 0x21) || (temp[i] == '\'')) nEnd--;
				else break;
			}
			pNodeID = pNodeID.substring(nStar, nEnd+1);
		}
		return super.getNode( pNodeID ) ;	
	}

// operations
	protected DataIO newListNode() { return new LangSet() ; }
	// list tools
} 



