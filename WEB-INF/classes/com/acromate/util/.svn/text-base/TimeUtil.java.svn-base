/*
 * Validation.java
 *
 * Created on 2006년 8월 17일 (목), 오후 7:32
 * Copyright 2006 Acromate, Inc. All rights reserved.
 */

package com.acromate.util;

import java.util.Calendar;
import java.text.SimpleDateFormat;

/**
 *
 * @author 아크로메이트 기술연구소
 * @version 1.0.0
 */
public class TimeUtil {

	public static String ConvertMicroSecondToDateString(long lngMicro)
	{
		return ConvertMillisecondtoDateString(lngMicro * 1000);
	}

	public static String ConvertMicroSecondToDateStringNormal(long lngMicro)
	{
		return ConvertMillisecondtoDateStringNormal(lngMicro * 1000);
	}

	public static String ConvertMillisecondtoDateString(long lngMilli)
	{
		Calendar pCal = Calendar.getInstance();
		pCal.setTimeInMillis(lngMilli);
		String strDate = "";
		strDate = Integer.toString(pCal.get(Calendar.YEAR));
		if ((pCal.get(Calendar.MONTH) + 1) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MONTH) + 1);
		else
			strDate += Integer.toString(pCal.get(Calendar.MONTH) + 1);
		if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		else
			strDate += Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		strDate += " ";
		if (pCal.get(Calendar.HOUR_OF_DAY) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		else
			strDate += Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		strDate += ":";
		if (pCal.get(Calendar.MINUTE) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MINUTE));
		else
			strDate += Integer.toString(pCal.get(Calendar.MINUTE));
		strDate += ":";
		if (pCal.get(Calendar.SECOND) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.SECOND));
		else
			strDate += Integer.toString(pCal.get(Calendar.SECOND));
		return strDate;
	}

	public static String ConvertMillisecondtoDateStringNormal(long lngMilli)
	{
		Calendar pCal = Calendar.getInstance();
		pCal.setTimeInMillis(lngMilli);
		String strDate = "";
		strDate = Integer.toString(pCal.get(Calendar.YEAR));
		strDate += "-";
		if ((pCal.get(Calendar.MONTH) + 1) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MONTH) + 1);
		else
			strDate += Integer.toString(pCal.get(Calendar.MONTH) + 1);
		strDate += "-";
		if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		else
			strDate += Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		strDate += " ";
		if (pCal.get(Calendar.HOUR_OF_DAY) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		else
			strDate += Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		strDate += ":";
		if (pCal.get(Calendar.MINUTE) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MINUTE));
		else
			strDate += Integer.toString(pCal.get(Calendar.MINUTE));
		strDate += ":";
		if (pCal.get(Calendar.SECOND) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.SECOND));
		else
			strDate += Integer.toString(pCal.get(Calendar.SECOND));
		return strDate;
	}

	public static String ConvertMillisecondtoDateString_logTime(long lngMilli)
	{
		Calendar pCal = Calendar.getInstance();
		pCal.setTimeInMillis(lngMilli);
		String strDate = "";
		strDate = Integer.toString(pCal.get(Calendar.YEAR));
		if ((pCal.get(Calendar.MONTH) + 1) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MONTH) + 1);
		else
			strDate += Integer.toString(pCal.get(Calendar.MONTH) + 1);
		if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		else
			strDate += Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		if (pCal.get(Calendar.HOUR_OF_DAY) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		else
			strDate += Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		if (pCal.get(Calendar.MINUTE) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MINUTE));
		else
			strDate += Integer.toString(pCal.get(Calendar.MINUTE));
		if (pCal.get(Calendar.SECOND) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.SECOND));
		else
			strDate += Integer.toString(pCal.get(Calendar.SECOND));
		return strDate;
	}

	public static String ConvertMillisecondtoDateString_YYYYMMDD(long lngMilli)
	{
		Calendar pCal = Calendar.getInstance();
		pCal.setTimeInMillis(lngMilli);
		StringBuilder strDate = new StringBuilder();
		strDate.append(Integer.toString(pCal.get(Calendar.YEAR)));
		if ((pCal.get(Calendar.MONTH) + 1) < 10)
			strDate.append("0").append(Integer.toString(pCal.get(Calendar.MONTH) + 1));
		else
			strDate.append(Integer.toString(pCal.get(Calendar.MONTH) + 1));
		if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
			strDate.append("0").append(Integer.toString(pCal.get(Calendar.DAY_OF_MONTH)));
		else
			strDate.append(Integer.toString(pCal.get(Calendar.DAY_OF_MONTH)));
		return strDate.toString();
	}

	public static String ConvertMillisecondtoDateString1(long lngMilli)
	{
		Calendar pCal = Calendar.getInstance();
		pCal.setTimeInMillis(lngMilli);
		String strDate = "";
		strDate = Integer.toString(pCal.get(Calendar.YEAR));
		if ((pCal.get(Calendar.MONTH) + 1) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MONTH) + 1);
		else
			strDate += Integer.toString(pCal.get(Calendar.MONTH) + 1);
		if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		else
			strDate += Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
		strDate += "_";
		if (pCal.get(Calendar.HOUR_OF_DAY) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		else
			strDate += Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
		if (pCal.get(Calendar.MINUTE) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.MINUTE));
		else
			strDate += Integer.toString(pCal.get(Calendar.MINUTE));
		if (pCal.get(Calendar.SECOND) < 10)
			strDate += "0" + Integer.toString(pCal.get(Calendar.SECOND));
		else
			strDate += Integer.toString(pCal.get(Calendar.SECOND));
		return strDate;
	}

        public static String getYear(long lngMilli)
        {
                Calendar pCal = Calendar.getInstance();
                pCal.setTimeInMillis(lngMilli);
                String strDate = "";
                strDate = Integer.toString(pCal.get(Calendar.YEAR));

                return strDate;
	}
        public static String getMonth(long lngMilli)
        {
          Calendar pCal = Calendar.getInstance();
          pCal.setTimeInMillis(lngMilli);
          String strDate = "";
          if ((pCal.get(Calendar.MONTH) + 1) < 10)
                  strDate += "0" + Integer.toString(pCal.get(Calendar.MONTH) + 1);
          else
                  strDate += Integer.toString(pCal.get(Calendar.MONTH) + 1);
          return strDate;
	}
        public static String getDay(long lngMilli)
        {
          Calendar pCal = Calendar.getInstance();
          pCal.setTimeInMillis(lngMilli);
          String strDate = "";
          if (pCal.get(Calendar.DAY_OF_MONTH) < 10)
                  strDate += "0" + Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
          else
                  strDate += Integer.toString(pCal.get(Calendar.DAY_OF_MONTH));
          return strDate;
	}
        public static String getHour(long lngMilli)
        {
          Calendar pCal = Calendar.getInstance();
          pCal.setTimeInMillis(lngMilli);
          String strDate = "";
          if (pCal.get(Calendar.HOUR_OF_DAY) < 10)
                  strDate += "0" + Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
          else
                  strDate += Integer.toString(pCal.get(Calendar.HOUR_OF_DAY));
          return strDate;
	}
        public static String getMin(long lngMilli)
        {
          Calendar pCal = Calendar.getInstance();
          pCal.setTimeInMillis(lngMilli);
          String strDate = "";
          if (pCal.get(Calendar.MINUTE) < 10)
                  strDate += "0" + Integer.toString(pCal.get(Calendar.MINUTE));
          else
                  strDate += Integer.toString(pCal.get(Calendar.MINUTE));
          return strDate;
	}
        public static String getSec(long lngMilli)
        {
          Calendar pCal = Calendar.getInstance();
          pCal.setTimeInMillis(lngMilli);
          String strDate = "";
          if (pCal.get(Calendar.SECOND) < 10)
                  strDate += "0" + Integer.toString(pCal.get(Calendar.SECOND));
          else
                  strDate += Integer.toString(pCal.get(Calendar.SECOND));
          return strDate;
	}

	public static int GetAmount(int nDuration, int nAccUnit, int nUnitChg)
	{
		int nAmount = 0;
		if (nAccUnit == 0) return 0;
		int nMok = (int) (nDuration / nAccUnit);
		int nNam = (int) (nDuration % nAccUnit);
		if (nNam == 0)
		{
			nAmount = nMok * nUnitChg;
		}
		else
		{
			nAmount = (nMok + 1) * nUnitChg;
		}
		return nAmount;
	}
	/**
	 *  현재 월의 마지막 일자
	 *  usage : DateUtil.getDaysOfMonth();
	 */
	public static int GetDaysOfMonth()
	{
		return Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH);
	}

	/**
	 *  특정 월의 마지막 일자
	 *  usage : DateUtil.getDaysOfMonth( 2 ); // 2월의 마지막 날을 가져 올 때
	 */
	public static int GetDaysOfMonth(int vMonth)
	{
		int days = 0 ;

		if ( vMonth < 1 || vMonth > 12 ) vMonth = Calendar.getInstance().get(Calendar.MONTH)+1;

		switch ( vMonth )
		{
			case 1:	days=31;	break; // 1월
			case 2:	days=28;  days = ( Calendar.getInstance().get(Calendar.YEAR)%4 == 0 ) ? 29 : 28  ; 	break;  // 윤달 계산 4년에 한번
			case 3:	days=31;	break;
			case 4:	days=30;	break;
			case 5:	days=31;	break;
			case 6:	days=30;	break;
			case 7:	days=31;	break;
			case 8:	days=31;	break;
			case 9:	days=30;	break;
			case 10:	days=31;	break;
			case 11:	days=30;	break;
			case 12:	days=31;	break; // 12월
		}

		return days;
	}
    //현재시간으로부터 nMinute이전 시간 구하기
    public static String getMinuteBefore(int nMinute){
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MINUTE, -nMinute); //nDelLimit달전
        java.util.Date currentTime = cal.getTime();
        SimpleDateFormat formatters1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String Date = formatters1.format(currentTime);
        return Date;
    }

    //현재로부터 nDay이후 날짜 구하기
    public static String getDateAfter(int nDay){
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, nDay); //nDay일후
        java.util.Date currentTime = cal.getTime();
        SimpleDateFormat formatters1 = new SimpleDateFormat("yyyyMMdd");
        String Date = formatters1.format(currentTime);
        Date = Date.substring(0,4) + Date.substring(4,6)+ Date.substring(6,8);
        return Date;
    }
}


