package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import com.acromate.dto.element.AuthDTO;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.util.Logger;

public class AuthDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private AuthDTO authDTO ;
    QueryStatement statement ;

    public AuthDAO() {}

    public AuthDAO( QueryStatement statement, AuthDTO authDTO ) {
        this.statement = statement ;
        this.authDTO = authDTO ;
    }

    public ArrayList getList(QueryStatement statement, String E164, String EndpointID, int Protocol) {
        ArrayList list = new ArrayList() ;
        AuthDTO authDTO = null ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  endpointID, protocol, e164, authMode, password, userName, ipAddress, ipPort, encryptKey " ;
            queryString += " From Table_AUTH Where e164 = " + E164 + " ";
            queryString += " AND endpointID = '" + EndpointID + "' " ;
            queryString += " AND protocol = " + Protocol + " " ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;
/*
            while ( rs.next() )  {
                authDTO = new AuthDTO() ;
                authDTO.setEndpointID(Str.CheckNullString(rs.getString(1));
                authDTO.setProtocol(rs.getInt(2));
                authDTO.setE164(Str.CheckNullString(rs.getString(3));
                authDTO.setAuthMode(rs.getInt(4)));
                authDTO.setPassword(Str.CheckNullString(rs.getString(5)));
                authDTO.setUserName(Str.CheckNullString(rs.getString(6));
                authDTO.setIpAddress(Str.CheckNullString(rs.getString(7));
                authDTO.setIpPort(rs.getInt(8));
                authDTO.setEncryptKey(Str.CheckNullString(rs.getString(9));
                list.add(authDTO) ;
            }*/
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public AuthDTO getDTO(QueryStatement statement, AuthDTO authDTO) {
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  endpointID, protocol, e164, authMode, password, userName, ipAddress, ipPort, encryptKey " ;
            queryString += " From Table_AUTH Where ";
            queryString += " endpointID = '" + authDTO.getEndpointID()+ "' " ;
            queryString += " AND protocol = " + authDTO.getProtocol()+ " " ;
            queryString += " AND username = '" + authDTO.getUserName()+ "' " ;
            queryString += " AND e164 = '" + authDTO.getE164()+ "' " ;
            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            if ( rs.next() )  {
                authDTO.setEndpointID(Str.CheckNullString(rs.getString(1)));
                authDTO.setProtocol(rs.getInt(2));
                authDTO.setE164(rs.getString(3));
                authDTO.setAuthMode(rs.getInt(4));
                authDTO.setPassword(Str.CheckNullString(rs.getString(5)));
                authDTO.setUserName(Str.CheckNullString(rs.getString(6)));
                authDTO.setIpAddress(Str.CheckNullString(rs.getString(7)));
                authDTO.setIpPort(rs.getInt(8));
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return authDTO;
    }

    public boolean insert ( QueryStatement statement, AuthDTO authDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            if ( authDTO.getUserName().length() == 0 )
                authDTO.setUserName(" ") ;

            queryString =   " INSERT INTO Table_AUTH ";
            queryString += " (endpointID, protocol, e164, authMode, password, userName, ipAddress, ipPort, encryptKey)";
            queryString += " VALUES (" ;
            queryString += " '" + authDTO.getEndpointID() + "' ," ;
            queryString += "  " + authDTO.getProtocol() + "," ;
            queryString += " '" + authDTO.getE164() + "'," ;
            queryString += "  " + authDTO.getAuthMode() + "," ;
            queryString += " '" + authDTO.getPassword() + "'," ;
            queryString += " '" + authDTO.getUserName() + "'," ;
            queryString += " '" + authDTO.getIpAddress() + "'," ;
            queryString += "  " + authDTO.getIpPort() + "," ;
            queryString += " ' ') " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
            if (count <= 0) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, AuthDTO authDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if ( statement == null ) {
                return false ;
            }

            queryString = " UPDATE Table_AUTH SET ";
            queryString += " authMode = " + authDTO.getAuthMode() + "," ;
            queryString += " password = '" + authDTO.getPassword() + "'," ;
            queryString += " ipAddress = '" + authDTO.getIpAddress() + "'," ;
            queryString += " ipPort = " + authDTO.getIpPort() + " " ;
            queryString += " WHERE ";
            queryString += " endpointID = '" + authDTO.getEndpointID() + "' " ;
            queryString += " AND protocol = " + authDTO.getProtocol() + " " ;
            queryString += " AND UserName = '" + authDTO.getUserName() + "' " ;
            queryString += " AND e164 = '" + authDTO.getE164() + "' " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
            if (count < 0) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean updatePassword( QueryStatement statement, String userid, String newPassword  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_AUTH SET ";
            queryString += "password = '" + newPassword + "' " ;
            queryString += " WHERE ";
            queryString += " endpointID like '" + userid + "%' " ;

            log.info("queryString") ;
            count = statement.executeUpdate(queryString);
            if (count < 0) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean deleteEndpointID( QueryStatement statement,  AuthDTO authDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_AUTH Where " ;
            queryString += "  endpointID = '" + authDTO.getEndpointID() + "' " ;
            queryString += " AND protocol = " + authDTO.getProtocol() + " " ;
            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
            if (count < 0) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean deleteUser( QueryStatement statement,  AuthDTO authDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_AUTH Where " ;
            queryString += "  endpointID = '" + authDTO.getEndpointID() + "' " ;
            queryString += " AND protocol = " + authDTO.getProtocol() + " " ;
            queryString += " AND UserName = '" + authDTO.getUserName() + "' " ;
            queryString += " AND e164 = '" + authDTO.getE164() + "' " ;
            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
            if (count < 0) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}


