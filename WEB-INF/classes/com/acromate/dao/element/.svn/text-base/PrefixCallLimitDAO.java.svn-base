package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */

import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.PrefixCallLimitDTO;
import com.acromate.util.Logger;

public class PrefixCallLimitDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private PrefixCallLimitDTO prefixCallLimitDTO ;
    QueryStatement statement ;

    public PrefixCallLimitDAO() {}

    public PrefixCallLimitDAO( QueryStatement statement, PrefixCallLimitDTO prefixCallLimitDTO ) {
        this.statement = statement ;
        this.prefixCallLimitDTO = prefixCallLimitDTO ;
    }

    public ArrayList getList(QueryStatement statement, String StartPrefix) {
        ArrayList list = new ArrayList() ;
        PrefixCallLimitDTO prefixCallLimitDTO = null ;
        ResultSet rs = null ;

        String strWhere = "";

        if(!StartPrefix.equals("")){
            strWhere += " AND StartPrefix = " + StartPrefix +"' ";
        }

        try {
            String queryString = "SELECT  StartPrefix , EndPrefix , CallLimitID, MaxCall, Method FROM table_PrefixCallLimit Where 1 = 1 " ;
            queryString += strWhere ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                prefixCallLimitDTO = new PrefixCallLimitDTO() ;
                prefixCallLimitDTO.setStartPrefix(Str.CheckNullString(rs.getString(1)));
                prefixCallLimitDTO.setEndPrefix(Str.CheckNullString(rs.getString(2)));
                prefixCallLimitDTO.setCallLimitID(Str.CheckNullString(rs.getString(3)));
                prefixCallLimitDTO.setMaxCall(rs.getInt(4));
                prefixCallLimitDTO.setMethod(rs.getInt(5));

                list.add(prefixCallLimitDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, PrefixCallLimitDTO prefixCallLimitDTO  ) {
        String queryString = "";
        int count = 0;
        int maxCall = 0;
        ResultSet rs = null ;

        try {
            if (statement == null) {
                return false;
            }

            queryString = "  Select MaxCall from table_PrefixCallLimitID where CallLimitID = '"+ prefixCallLimitDTO.getCallLimitID() +"' " ;
            rs = statement.executeQuery(queryString) ;

            if ( rs.next() )  {
                maxCall = rs.getInt(1) ;
            } else return false ;

            queryString = " Insert into table_PrefixCallLimit ( StartPrefix , EndPrefix, Method , MaxCall, CallLimitID) values ( " ;
            queryString += " '" + prefixCallLimitDTO.getStartPrefix()+ "', " ;
            queryString += " '" + prefixCallLimitDTO.getEndPrefix()+ "', " ;
            queryString += "  " + prefixCallLimitDTO.getMethod()+ ", " ;
            queryString += "  " + maxCall + ", " ;
            queryString += "  '" + prefixCallLimitDTO.getCallLimitID()+ "' ) " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        if ( count <= 0 )  return false ;
        return true ;
    }

    public boolean update ( QueryStatement statement, PrefixCallLimitDTO prefixCallLimitDTO ) {
        boolean bDelelt = delete (statement, prefixCallLimitDTO) ;
        if ( bDelelt == false ) return false ;

        boolean bInsert = insert  (statement, prefixCallLimitDTO) ;
        if ( bInsert == false ) return false ;

        return true ;
    }

    public boolean delete( QueryStatement statement,  PrefixCallLimitDTO prefixCallLimitDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = "DELETE FROM Table_PrefixCallLimit WHERE  StartPrefix = '"+ prefixCallLimitDTO.getStartPrefix() ;
            queryString +="' AND Method = " + prefixCallLimitDTO.getMethod() ;
            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        if (count <= 0) return false ;
        return true ;
    }
}


