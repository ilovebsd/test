package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.ForwardDTO;
import com.acromate.util.Logger;

public class ForwardDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private ForwardDTO forwardDTO ;
    QueryStatement statement ;

    public ForwardDAO() {}

    public ForwardDAO( QueryStatement statement, ForwardDTO forwardDTO ) {
        this.statement = statement ;
        this.forwardDTO = forwardDTO ;
    }

    public ArrayList getList(QueryStatement statement, String E164, int forwardType) {
        ArrayList list = new ArrayList() ;
        ForwardDTO forwardDTO = null ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  e164, orderNumber, forwardNumber, forwardType, forwardWaitTime, description, fromTime, toTime" ;
            queryString += " From Table_Forward Where e164 = " + E164 +" ";
            queryString += " AND forwardType = " + forwardType + " " ;

            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                forwardDTO = new ForwardDTO() ;
                forwardDTO.setE164(Str.CheckNullString(rs.getString(1)));
                forwardDTO.setOrderNumber(rs.getInt(2));
                forwardDTO.setForwardNumber(Str.CheckNullString(rs.getString(3)));
                forwardDTO.setForwardType(rs.getInt(4));
                forwardDTO.setForwardWaitTime(rs.getInt(5));
                forwardDTO.setDescription(Str.CheckNullString(rs.getString(6)));
                forwardDTO.setFromTime(Str.CheckNullString(rs.getString(7)));
                forwardDTO.setToTime(Str.CheckNullString(rs.getString(8)));
                list.add(forwardDTO) ;
            }

        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, ForwardDTO forwardDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_Forward ";
            queryString += " (e164, orderNumber, forwardNumber, forwardType, forwardWaitTime, description, fromTime, toTime)";
            queryString += " VALUES (" ;
            queryString += " '" + forwardDTO.getE164() + "' ," ;
            queryString += "  " + forwardDTO.getOrderNumber() + "," ;
            queryString += " '" + forwardDTO.getForwardNumber() + "'," ;
            queryString += "  " + forwardDTO.getForwardType() + "," ;
            queryString += "  " + forwardDTO.getForwardWaitTime() + "," ;
            queryString += " '" + forwardDTO.getDescription() + "'," ;
            queryString += " '" + forwardDTO.getFromTime() + "'," ;
            queryString += " '" + forwardDTO.getToTime() + "') " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, ForwardDTO forwardDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_Forward SET ";
            queryString += "forwardType = " + forwardDTO.getForwardType() + "," ;
            queryString += "forwardWaitTime = " + forwardDTO.getForwardWaitTime() + "," ;
            queryString += "description = '" + forwardDTO.getDescription() + "'," ;
            queryString += "toTime = '" + forwardDTO.getToTime() + "' " ;
            queryString += " WHERE e164 = '" + forwardDTO.getE164() + "' ";
            queryString += " AND orderNumber = " + forwardDTO.getOrderNumber() + "  " ;
            queryString += " AND forwardNumber = '" + forwardDTO.getForwardNumber() + "' " ;
            queryString += " AND fromTime = '" + forwardDTO.getFromTime() + "' " ;

            System.out.println(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  ForwardDTO forwardDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_Forward Where e164 = '" + forwardDTO.getE164() + "' " ;
            queryString += " AND orderNumber = " + forwardDTO.getOrderNumber() + "  " ;
            queryString += " AND forwardNumber = '" + forwardDTO.getForwardNumber() + "' " ;
            queryString += " AND fromTime = '" + forwardDTO.getFromTime() + "' " ;

            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean deleteE164All( QueryStatement statement,  String strE164 ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_Forward Where e164 = '" + strE164+ "' " ;
            System.out.println(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  String strE164, int forwardType ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString  = " DELETE FROM Table_Forward ";
            queryString += " WHERE e164 = '" + strE164+ "' AND forwardType=" + forwardType ;
            System.out.println(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }
}


