package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.NeighborGKDTO;
import com.acromate.util.Logger;

public class NeighborGKDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private NeighborGKDTO neighborGKDTO ;
    QueryStatement statement ;

    public NeighborGKDAO() {}

    public NeighborGKDAO( QueryStatement statement, NeighborGKDTO neighborGKDTO ) {
        this.statement = statement ;
        this.neighborGKDTO = neighborGKDTO ;
    }

    public ArrayList getList(QueryStatement statement, String EndpointID) {
        ArrayList list = new ArrayList() ;
        NeighborGKDTO neighborGKDTO = null ;
        ResultSet rs = null ;

        String strWhere = "";

        if(!EndpointID.equals("")){
            strWhere = " AND EndpointID = '" + EndpointID+ "' ";
        }


        try {
            String queryString = "SELECT ENDPOINTID, IDTYPE, INEXTRAID, ENDPOINTCLASS, LRQ, AUTHMODE, Password, ";      //8
            queryString += " RasAddress, RasPort,  SIGNALADDRESS, SIGNALPORT, OutCheckFlag, OutGkID, OutH323ID, Options, Trace, "; //17
            queryString += " FROMNUMBER, TONUMBER, MESSAGETYPE, CHANNELMONITOR ";  //21
            queryString += " From Table_NeighborGK Where 1 = 1 " ;
            queryString += strWhere;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                neighborGKDTO = new NeighborGKDTO() ;
                neighborGKDTO.setEndpointid(Str.CheckNullString(rs.getString(1)));
                neighborGKDTO.setIDType(rs.getInt(2));
                neighborGKDTO.setInExtraID(Str.CheckNullString(rs.getString(3)));
                neighborGKDTO.setEndpointclass(rs.getInt(4));
                neighborGKDTO.setLRQ(rs.getInt(5));
                neighborGKDTO.setAuthMode(rs.getInt(6));
                neighborGKDTO.setPassword(Str.CheckNullString(rs.getString(7)));
                neighborGKDTO.setRASAddress(Str.CheckNullString(rs.getString(8)));
                neighborGKDTO.setRASPort(rs.getInt(9));
                neighborGKDTO.setSignalAddress(Str.CheckNullString(rs.getString(10)));
                neighborGKDTO.setSignalPort(rs.getInt(11));
                neighborGKDTO.setOutCheckFlag(rs.getInt(12));
                neighborGKDTO.setOutGKID(Str.CheckNullString(rs.getString(13)));
                neighborGKDTO.setOutH323ID(Str.CheckNullString(rs.getString(14)));
                neighborGKDTO.setOptions(rs.getInt(15));
                neighborGKDTO.setTrace(rs.getInt(16));
                neighborGKDTO.setFromnumber(Str.CheckNullString(rs.getString(17)));
                neighborGKDTO.setTonumber(Str.CheckNullString(rs.getString(18)));
                neighborGKDTO.setMessagetype(rs.getInt(19));
                neighborGKDTO.setChannelmonitor(rs.getInt(20));

                list.add(neighborGKDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }
}
