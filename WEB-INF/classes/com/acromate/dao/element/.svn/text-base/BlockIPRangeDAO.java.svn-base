package com.acromate.dao.element;

import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.BlockIPRangeDTO;
import com.acromate.util.Logger;


public class BlockIPRangeDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private BlockIPRangeDTO blockIPRangeDTO ;
    QueryStatement statement ;

    public BlockIPRangeDAO() {}

    public BlockIPRangeDAO( QueryStatement statement, BlockIPRangeDTO blockIPRangeDTO ) {
        this.statement = statement ;
        this.blockIPRangeDTO = blockIPRangeDTO ;
    }


    public BlockIPRangeDTO getDTO(QueryStatement statement, String strendpointID, String strstartIP, String strendIP ) {
        BlockIPRangeDTO blockIPRangeDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT endpointID, startIP, endIP, descriptor ";
            queryString += " From Table_BlockIPRange ";
            queryString += " WHERE endpointID = '" + strendpointID + "' ";
            queryString += " AND startIP = '" + strstartIP + "' " ;
            queryString += " AND endIP = '" + strendIP + "' " ;
            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            if ( rs.next() )  {
                blockIPRangeDTO = new BlockIPRangeDTO() ;

                blockIPRangeDTO.setEndpointID(Str.CheckNullString(rs.getString(1)));
                blockIPRangeDTO.setStartIP(Str.CheckNullString(rs.getString(2)));
                blockIPRangeDTO.setEndIP(Str.CheckNullString(rs.getString(3)));
                blockIPRangeDTO.setDescriptor(Str.CheckNullString(rs.getString(4)));
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        return blockIPRangeDTO;
    }


    public ArrayList getList(QueryStatement statement) {
        ArrayList list = new ArrayList();
        BlockIPRangeDTO blockIPRangeDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT endpointID, startIP, endIP, descriptor";
            queryString += " From Table_BlockIPRange ";
            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                blockIPRangeDTO = new BlockIPRangeDTO() ;
                blockIPRangeDTO.setEndpointID(Str.CheckNullString(rs.getString(1)));
                blockIPRangeDTO.setStartIP(Str.CheckNullString(rs.getString(2)));
                blockIPRangeDTO.setEndIP(Str.CheckNullString(rs.getString(3)));
                blockIPRangeDTO.setDescriptor(Str.CheckNullString(rs.getString(4)));

                list.add(blockIPRangeDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, BlockIPRangeDTO blockIPRangeDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_BlockIPRange ";
            queryString += " (endpointID, startIP, endIP, descriptor) ";
            queryString += " VALUES (" ;

            queryString += " '"+blockIPRangeDTO.getEndpointID()+"', ";
            queryString += " '"+blockIPRangeDTO.getStartIP()+"', ";
            queryString += " '"+blockIPRangeDTO.getEndIP()+"', ";
            queryString += " '"+blockIPRangeDTO.getDescriptor()+"') ";

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean update( QueryStatement statement, BlockIPRangeDTO blockIPRangeDTO  ) {
    String queryString = "";
    int count = 0;
    try {
        if (statement == null) {
            return false;
        }

        queryString = " UPDATE Table_BlockIPRange SET ";

        queryString += " descriptor = '"+ blockIPRangeDTO.getDescriptor()+"' ";
        queryString += " WHERE endpointID = '" + blockIPRangeDTO.getEndpointID() +"' ";
        queryString += " AND startIP = '" + blockIPRangeDTO.getStartIP() + "' " ;
        queryString += " AND endIP = '" + blockIPRangeDTO.getEndIP() + "' " ;

        count = statement.executeUpdate(queryString);
        log.info(queryString) ;
    } catch (Exception e) {
        log.error("exception occurred > ", e);
        return false;
    }
    return true ;
}

    public boolean delete( QueryStatement statement,  BlockIPRangeDTO blockIPRangeDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_BlockIPRange WHERE endpointID = '" + blockIPRangeDTO.getEndpointID()+ "' " ;
            queryString += " AND startIP = '" + blockIPRangeDTO.getStartIP() + "' " ;
            queryString += " AND endIP = '" + blockIPRangeDTO.getEndIP() + "' " ;
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean deleteAll( QueryStatement statement ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_BlockIPRange " ;
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

}
