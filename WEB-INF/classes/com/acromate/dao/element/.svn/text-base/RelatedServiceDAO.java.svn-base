package com.acromate.dao.element;

import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.RelatedServiceDTO;

public class RelatedServiceDAO {

    private RelatedServiceDTO relatedServiceDTO ;
    QueryStatement statement ;

    public RelatedServiceDAO() {}

    public RelatedServiceDAO( QueryStatement statement, RelatedServiceDTO relatedServiceDTO ) {
        this.statement = statement ;
        this.relatedServiceDTO = relatedServiceDTO ;
    }

    public RelatedServiceDTO getDTO(QueryStatement statement, int nServiceNo, int nRelatedService  ) {
        RelatedServiceDTO relatedServiceDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT ServiceNo, RelatedService, Dependency ";
            queryString += " From Table_RelatedService ";
            queryString += " WHERE ServiceNo = " + nServiceNo + " ";
            queryString += " AND RelatedService = " + nRelatedService + " " ;

            System.out.println(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                relatedServiceDTO = new RelatedServiceDTO() ;
                relatedServiceDTO.setServiceNo(rs.getInt(1));
                relatedServiceDTO.setRelatedService(rs.getInt(2));
                relatedServiceDTO.setDependency(rs.getInt(3));
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { e.printStackTrace(); }
        }
        return relatedServiceDTO;
    }

    public ArrayList getList(QueryStatement statement) {
        ArrayList list = new ArrayList();
        RelatedServiceDTO relatedServiceDTO = null;
        ResultSet rs = null;

        try {
            String queryString = " SELECT ServiceNo, RelatedService, Dependency ";
            queryString += " From Table_RelatedService ";
            System.out.println(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                relatedServiceDTO = new RelatedServiceDTO() ;
                relatedServiceDTO.setServiceNo(rs.getInt(1));
                relatedServiceDTO.setRelatedService(rs.getInt(2));
                relatedServiceDTO.setDependency(rs.getInt(3));

                list.add(relatedServiceDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { e.printStackTrace(); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, RelatedServiceDTO relatedServiceDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_RelatedService ";
            queryString += " ( ServiceNo, RelatedService, Dependency ) ";
            queryString += " VALUES (" ;

            queryString += " "+relatedServiceDTO.getServiceNo()+", ";
            queryString += " "+relatedServiceDTO.getRelatedService()+", ";
            queryString += " "+relatedServiceDTO.getDependency()+") ";

            System.out.println(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

/*   업데이트 사용 안함
    public boolean update( QueryStatement statement, RelatedServiceDTO relatedServiceDTO  ) {
    String queryString = "";
    int count = 0;
    try {
        if (statement == null) {
            return false;
        }

        queryString = " UPDATE Table_PassWordPolicy SET ";

        queryString += " MinDigit = "+ passWordPolicyDTO.getMinDigit()+", ";
        queryString += " MaxDigit = "+ passWordPolicyDTO.getMaxDigit()+", ";
        queryString += " CharacterType = "+ passWordPolicyDTO.getCharacterType()+" ";
        queryString += " WHERE PasswordType = " + passWordPolicyDTO.getPasswordType() +" ";

        count = statement.executeUpdate(queryString);
        System.out.println(queryString) ;
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
    return true ;
}
*/

    public boolean delete( QueryStatement statement,  RelatedServiceDTO relatedServiceDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RelatedService WHERE ServiceNo = " + relatedServiceDTO.getServiceNo()+ " " ;
            queryString += " AND RelatedService = " + relatedServiceDTO.getRelatedService() + " " ;

            count = statement.executeUpdate(queryString);
            System.out.println(queryString) ;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

    public boolean deleteAll( QueryStatement statement ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RelatedService " ;
            count = statement.executeUpdate(queryString);
            System.out.println(queryString) ;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }
}
