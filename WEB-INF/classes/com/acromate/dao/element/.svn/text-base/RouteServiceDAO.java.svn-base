package com.acromate.dao.element;

import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.RouteServiceDTO;
import com.acromate.util.Logger;

public class RouteServiceDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private RouteServiceDTO routeServiceDTO ;
    QueryStatement statement ;

    public RouteServiceDAO() {}

    public RouteServiceDAO( QueryStatement statement, RouteServiceDTO routeServiceDTO ) {
        this.statement = statement ;
        this.routeServiceDTO = routeServiceDTO ;
    }
    public boolean hasInAddibleService(QueryStatement statement, String EndpointID, int Protocol) {
        ResultSet rs = null ;
    	int cnt = 0;
        try {
            String queryString = "";
            queryString += " SELECT count(*) From Table_RouteService ";
            queryString += " Where EndpointID = '" + EndpointID+ "' AND Protocol = " + Protocol;
            queryString += " AND (InOutFlag = 3 OR InOutFlag = 2)";
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;
            if ( rs.next() )  {
            	cnt = rs.getInt(1);
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return cnt > 0;
    }
    public String getCpsValue(QueryStatement statement, String EndpointID, int Protocol, int ServiceNo) {
        ResultSet rs = null ;
    	String cps = "";
        try {
            String queryString = "";
            queryString += " SELECT UserParam From Table_RouteService ";
            queryString += " Where EndpointID = '" + EndpointID+ "' AND Protocol = " + Protocol+ " AND ServiceNo = " + ServiceNo;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;
            if ( rs.next() )  {
            	cps = Str.CheckNullString(rs.getString("UserParam")).trim();
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return cps;
    }
    
    public ArrayList getList(QueryStatement statement, String EndpointID, int Protocol, int ServiceNo) {
        ArrayList list = new ArrayList() ;
        RouteServiceDTO routeServiceDTO = null ;
        ResultSet rs = null ;
        String strWhere = "";

        if(!EndpointID.equals("")){
            strWhere += " AND r.EndpointID = '" + EndpointID+ "' ";
        }

        if(Protocol > 0){
            strWhere += " AND r.Protocol = " + Protocol+ " ";
        }

        if(ServiceNo > 0){
            strWhere += " AND r.ServiceNo = " + ServiceNo+ " ";
        }


        try {
            String queryString = "SELECT r.endpointID, r.protocol, r.serviceNo, r.priority, r.userParam, r.inoutFlag , f.serviceName " ;
            queryString += " From Table_RouteService r left Join Table_FeatureDetail f on r.serviceNo = f.serviceNo Where 1 = 1 ";

            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                routeServiceDTO = new RouteServiceDTO() ;
                routeServiceDTO.setEndpointID(Str.CheckNullString(rs.getString(1)));
                routeServiceDTO.setProtocol(rs.getInt(2));
                routeServiceDTO.setServiceNo(rs.getInt(3));
                routeServiceDTO.setPriority(rs.getInt(4));
                routeServiceDTO.setUserParam(Str.CheckNullString(rs.getString(5)));
                routeServiceDTO.setInoutFlag(rs.getInt(6));
                routeServiceDTO.setServiceName(Str.CheckNullString(rs.getString(7)));

                list.add(routeServiceDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, RouteServiceDTO routeServiceDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_RouteService ";
            queryString += " (endpointID, protocol, serviceNo, priority, userParam, inoutFlag)";
            queryString += " VALUES (" ;
            queryString += " '" + routeServiceDTO.getEndpointID() + "' ," ;
            queryString += "  " + routeServiceDTO.getProtocol() + "," ;
            queryString += "  " + routeServiceDTO.getServiceNo() + "," ;
            queryString += "  " + routeServiceDTO.getPriority() + "," ;
            queryString += " '" + routeServiceDTO.getUserParam() + "'," ;
            queryString += "  " + routeServiceDTO.getInoutFlag() + ") " ;
            System.out.println(queryString);
            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, RouteServiceDTO routeServiceDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_RouteService SET ";
            queryString += " priority = " + routeServiceDTO.getPriority() + "," ;
            queryString += " userParam = '" + routeServiceDTO.getUserParam() + "'," ;
            queryString += " inoutFlag = " + routeServiceDTO.getInoutFlag() + " " ;
            queryString += " Where endpointID = '" + routeServiceDTO.getEndpointID() + "' ";
            queryString += " AND serviceNo = " + routeServiceDTO.getServiceNo() + " " ;
            queryString += " AND protocol = " + routeServiceDTO.getProtocol() + " " ;


            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  RouteServiceDTO routeServiceDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RouteService Where endpointID = '" + routeServiceDTO.getEndpointID() + "' ";
            queryString += " AND serviceNo = " + routeServiceDTO.getServiceNo() + " " ;
            queryString += " AND protocol = " + routeServiceDTO.getProtocol() + " " ;

            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  String endpointID, int protocol) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RouteService WHERE endpointID = '" + endpointID + "' ";
            queryString += " AND protocol = " + protocol + " " ;
            count = statement.executeUpdate(queryString);
            System.out.println(count + " deleted. " + queryString) ;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  String endpointID, int protocol, int serviceNo) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RouteService WHERE endpointID = '" + endpointID + "' ";
            queryString += " AND protocol = " + protocol + " AND serviceNo=" + serviceNo;
            count = statement.executeUpdate(queryString);
            System.out.println(count + " deleted. " + queryString) ;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }

}


