package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import com.acromate.lang.l ;
import com.acromate.dto.element.SipEndpointDTO;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.util.Logger;
import java.util.Vector;
import java.util.StringTokenizer;
/*
import com.acromate.driver.db.DataStatement;
import acromate.MainFrame;
import acromate.ConnectionManager;
import acromate.WebUtil;
import acromate.l;
import java.util.StringTokenizer;
*/

public class SipEndpointDAO {
    private Logger log = Logger.getLogger(this.getClass());
    private SipEndpointDTO sipEndpointDTO ;
    QueryStatement statement ;

    public SipEndpointDAO() {}

    public SipEndpointDAO( QueryStatement statement, SipEndpointDTO sipEndpointDTO ) {
        this.statement = statement ;
        this.sipEndpointDTO = sipEndpointDTO ;
    }

    public String getHostSet(QueryStatement statement, String strEndpointID) {
        String hostSet = "";
        ResultSet rs = null ;
        try {
            String queryString = "SELECT  HostSet From Table_SIPENDPOINT Where EndpointID = '" + strEndpointID + "' ";
            System.out.println(queryString);
            rs = statement.executeQuery(queryString);
            if (rs.next())
                hostSet = Str.CheckNullString(rs.getString(1));
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { e.printStackTrace(); }
        }
        return hostSet;
    }

    public int getCount(QueryStatement statement, String EndpointID) {
        ResultSet rs = null ;
        int count = 0 ;
        try {
            String queryString = "SELECT count(*) From Table_SIPENDPOINT Where EndpointID = '" + EndpointID + "' " ;
            rs = statement.executeQuery(queryString) ;
            if ( rs.next() )  count = rs.getInt(1) ;
        } catch(Exception e) {
            log.error("exception occurred > ", e);
            count = -1 ;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        return count;
    }

    public ArrayList getList(QueryStatement statement, String strEndpointID) {
        ArrayList list = new ArrayList() ;
        SipEndpointDTO sipEndpointDTO = null ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  endpointID, domainID, endpointClass, peerAddress, dynamicFlag, multiEndpoint, trace, dtmfType, options, lineCode, " ;
            queryString += " serviceFlag, CMCID, CMSID, zoneCode";
            queryString += " From Table_SIPENDPOINT Where EndpointID = '" + strEndpointID+ "' " ;

            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;
/*
            while ( rs.next() )  {
                sipEndpointDTO = new SipEndpointDTO() ;
                sipEndpointDTO.setEndpointID(Str.CheckNullString(rs.getString(1));
                sipEndpointDTO.setDomainID(Str.CheckNullString(rs.getString(2));
                sipEndpointDTO.setEndpointClass(rs.getInt(3));
                sipEndpointDTO.setPeerAddress(rs.getInt(4)));
                sipEndpointDTO.setDynamicFlag(rs.getInt(5)));
                sipEndpointDTO.setMultiEndpoint(rs.getInt(6));
                sipEndpointDTO.setTrace(rs.getInt(7));
                sipEndpointDTO.setDtmfType(rs.getInt(8)));
                sipEndpointDTO.setOptions(rs.getInt(9)));
                sipEndpointDTO.setLineCode(Str.CheckNullString(rs.getString(10));
                sipEndpointDTO.setForceVPNService(rs.getInt(11));
                sipEndpointDTO.setCMCID(Str.CheckNullString(rs.getString(12));
                sipEndpointDTO.setCMSID(Str.CheckNullString(rs.getString(13));
                sipEndpointDTO.setZoneCode(Str.CheckNullString(rs.getString(14));
                sipEndpointDTO.setHostSet(Str.CheckNullString(rs.getString(14));
                list.add(sipEndpointDTO) ;
            }*/
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }
/*
    public Vector getE164ListInfo(String strEndpointID) {
        Vector e164List = new Vector();
        //e164, groupId, areaCode, extensionNum, extensionGroupCode
        String[] e164Info;
        String isGroup = "";
        DataStatement statement = null;
        DataStatement statement2 = null;
        ResultSet rs = null;
        ResultSet rs2 = null;
        String queryString = "";
        try
        {
            statement = ConnectionManager.allocStatement(MainFrame.getMainFrame().getSelectedNode().getSystemPath(), 0);
            statement2 = ConnectionManager.allocStatement(MainFrame.getMainFrame().getSelectedNode().getSystemPath(), 0);

            queryString  = " SELECT route.E164, e164.isGroup, e164.groupid,e164.areacode, e164.ExtensionNumber From table_E164Route route , table_e164 e164 ";
            queryString += " WHERE route.protocol = 2 and route.endpointid ='"+strEndpointID+"' and RoutingNumberType = 1 and route.e164=e164.e164  ";
            System.out.println(queryString);
            rs = statement.executeQuery(queryString);
            while(rs.next()){
                e164Info = new String[5];
                e164Info[0] = WebUtil.CheckNullString(rs.getString(1));
                // 개인 사용자 경우의 수 사용안함 //
//                isGroup = WebUtil.CheckNullString(rs.getString(2));
//                if (isGroup.equals("1"))
                // isGroup에 상관없이 무조건 모든 번호의 그룹을 검색 /
                e164Info[1] = WebUtil.CheckNullString(rs.getString(3));
                e164Info[2] = WebUtil.CheckNullString(rs.getString(4));
                e164Info[3] = WebUtil.CheckNullString(rs.getString(5));

                queryString = "SELECT EXTENSIONGROUPNUM from table_subscriberGroup where groupID ='"+ e164Info[1] +"' ";
                rs2 = statement2.executeQuery(queryString);
                if (rs2.next())
                    e164Info[4] = WebUtil.CheckNullString(rs2.getString(1));

                rs2.close();
                e164List.add(e164Info);
            }
            rs.close();
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (rs2 != null) rs2.close();
                if (statement != null) ConnectionManager.freeStatement(statement);
                if (statement2 != null) ConnectionManager.freeStatement(statement2);
            } catch(Exception e) { e.printStackTrace(); }
        }
        return e164List;
    }
*/
    public SipEndpointDTO getDTO(QueryStatement statement, SipEndpointDTO sipEndpointDTO) {
            ResultSet rs = null ;
            String strUserID = "";
            try {
                String queryString = "SELECT MultiEndpoint, DomainID ,Zonecode, DtmfType, Options, HostSet, ServiceFlag, regHost From table_SipEndpoint WHERE endpointid ='" + sipEndpointDTO.getEndpointID() + "' ";
                rs = statement.executeQuery(queryString);

                if (rs.next() == false)
                    throw new Exception(l.x("존재하지 않는 단말ID 입니다.","This Phone ID does not exist."));
                else {
                    sipEndpointDTO.setMultiEndpoint(rs.getInt(1));
                    sipEndpointDTO.setDomainID(Str.CheckNullString(rs.getString(2)));
                    sipEndpointDTO.setZoneCode(Str.CheckNullString(rs.getString(3)));
                    sipEndpointDTO.setDtmfType(rs.getInt(4));
                    sipEndpointDTO.setOptions(rs.getInt(5));
                    sipEndpointDTO.setHostSet(Str.CheckNullString(rs.getString(6)));
                    sipEndpointDTO.setServiceFlag(rs.getInt(7));
                    sipEndpointDTO.setRegHost(Str.CheckNullString(rs.getString(8)));
                }
                rs.close();
                StringTokenizer strTok = new StringTokenizer(sipEndpointDTO.getEndpointID(), "@");
                if (strTok.hasMoreTokens())
                    strUserID = strTok.nextToken().trim();
                sipEndpointDTO.setTempE164(strUserID);

            } catch(Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (rs != null) rs.close();
                } catch(Exception e) { e.printStackTrace(); }
            }

            return sipEndpointDTO;
    }

    public boolean insert ( QueryStatement statement, SipEndpointDTO sipEndpointDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_SIPENDPOINT ";
            queryString += " (endpointID, domainID, endpointClass, peerAddress, dynamicFlag, multiEndpoint, trace, dtmfType, options, lineCode, ";
            queryString += " serviceFlag, zoneCode, hostSet )";
            queryString += " VALUES (" ;
            queryString += " '" + sipEndpointDTO.getEndpointID() + "'," ;
            queryString += " '" + sipEndpointDTO.getDomainID() + "'," ;
            queryString += "  " + sipEndpointDTO.getEndpointClass() + " ," ;
            queryString += " '" + sipEndpointDTO.getPeerAddress() + "'," ;
            queryString += "  " + sipEndpointDTO.getDynamicFlag() + "," ;
            queryString += "  " + sipEndpointDTO.getMultiEndpoint() + "," ;
            queryString += "  " + sipEndpointDTO.getTrace() + "," ;
            queryString += "  " + sipEndpointDTO.getDtmfType() + "," ;
            queryString += "  " + sipEndpointDTO.getOptions() + "," ;
            queryString += " '" + sipEndpointDTO.getLineCode() + "'," ;
            queryString += "  " + sipEndpointDTO.getServiceFlag() + "," ;
            queryString += " '" + sipEndpointDTO.getZoneCode() + "'," ;
            queryString += " '" + sipEndpointDTO.getHostSet() + "') " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
            if (count < 1) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, SipEndpointDTO sipEndpointDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_SIPENDPOINT SET ";
            queryString += "domainID = '" + sipEndpointDTO.getDomainID() + "'," ;
            queryString += "endpointClass = " + sipEndpointDTO.getEndpointClass() + " ," ;
            queryString += "peerAddress = '" + sipEndpointDTO.getPeerAddress() + "'," ;
            queryString += "dynamicFlag = " + sipEndpointDTO.getDynamicFlag() + "," ;
            queryString += "multiEndpoint = " + sipEndpointDTO.getMultiEndpoint() + "," ;
            queryString += "trace = " + sipEndpointDTO.getTrace() + "," ;
            queryString += "dtmfType = " + sipEndpointDTO.getDtmfType() + "," ;
            queryString += "options  = " + sipEndpointDTO.getOptions() + "," ;
            queryString += "lineCode = '" + sipEndpointDTO.getLineCode() + "'," ;
            queryString += "zoneCode = '" + sipEndpointDTO.getZoneCode() + "', " ;
            queryString += "serviceFlag = " + sipEndpointDTO.getServiceFlag() + "," ;
            queryString += "HostSet = '" + sipEndpointDTO.getHostSet() + "'" ;
            queryString += " WHERE endpointID = '" + sipEndpointDTO.getEndpointID() + "' ";

            count = statement.executeUpdate(queryString);
            if (count < 1) return false ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  String endpointID) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_SIPENDPOINT Where endpointID = '" + endpointID + "' " ;
            System.out.println(queryString) ;
            count = statement.executeUpdate(queryString);
            System.out.println(count + " deleted. " + queryString) ;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true ;
    }
    public boolean delete( QueryStatement statement,  SipEndpointDTO sipEndpointDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_SIPENDPOINT Where endpointID = '" + sipEndpointDTO.getEndpointID() + "' " ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}


