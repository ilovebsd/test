package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.DomainRouteTableDTO;
import com.acromate.util.Logger;

public class DomainRouteTableDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private DomainRouteTableDTO domainRouteTableDTO ;
    QueryStatement statement ;

    public DomainRouteTableDAO() {}

    public DomainRouteTableDAO( QueryStatement statement, DomainRouteTableDTO domainRouteTableDTO ) {
        this.statement = statement ;
        this.domainRouteTableDTO = domainRouteTableDTO ;
    }

    public ArrayList getList(QueryStatement statement, String DomainID) {
        ArrayList list = new ArrayList() ;
        DomainRouteTableDTO domainRouteTableDTO = null ;
        ResultSet rs = null ;
        String strWhere = "";

        if(!DomainID.equals("")){
            strWhere += " AND d.domainID = '" + DomainID + "' ";
        }

        try {
            String queryString = "SELECT d.domainID, d.routeSelectRule, d.routeID, d.protocol, d.callType, d.chargeType, d.description, d.routingEndpointType, r.endpointClass " ;
            queryString += " From Table_DomainRouteTable d left join Table_RouteState r on d.routeID = r.endpointid and d.protocol = r.protocol Where 1 = 1 ";
            queryString += strWhere;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                domainRouteTableDTO = new DomainRouteTableDTO() ;
                domainRouteTableDTO.setDomainID(Str.CheckNullString(rs.getString(1)));
                domainRouteTableDTO.setRouteSelectRule(rs.getInt(2));
                domainRouteTableDTO.setRouteID(Str.CheckNullString(rs.getString(3)));
                domainRouteTableDTO.setProtocol(rs.getInt(4));
                domainRouteTableDTO.setCallType(rs.getInt(5));
                domainRouteTableDTO.setChargeType(rs.getInt(6));
                domainRouteTableDTO.setDescription(Str.CheckNullString(rs.getString(7)));
                domainRouteTableDTO.setRoutingEndpointType(rs.getInt(8));
                domainRouteTableDTO.setEndpointClass(rs.getInt(9));
                list.add(domainRouteTableDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, DomainRouteTableDTO domainRouteTableDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_DomainRouteTable ";
            queryString += " (domainID, routeSelectRule, routeID, protocol, callType, chargeType, description, routingEndpointType)";
            queryString += " VALUES (" ;
            queryString += " '" + domainRouteTableDTO.getDomainID() + "' ," ;
            queryString += "  " + domainRouteTableDTO.getRouteSelectRule() + "," ;
            queryString += " '" + domainRouteTableDTO.getRouteID() + "'," ;
            queryString += "  " + domainRouteTableDTO.getProtocol() + "," ;
            queryString += "  " + domainRouteTableDTO.getCallType() + "," ;
            queryString += "  " + domainRouteTableDTO.getChargeType() + "," ;
            queryString += " '" + domainRouteTableDTO.getDescription() + "'," ;
            queryString += "  " + domainRouteTableDTO.getRoutingEndpointType() + ") " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, DomainRouteTableDTO domainRouteTableDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_DomainRouteTable SET ";
            queryString += "routeSelectRule =  " + domainRouteTableDTO.getRouteSelectRule() + "," ;
            queryString += "routeID =  '" + domainRouteTableDTO.getRouteID() + "'," ;
            queryString += "protocol =  " + domainRouteTableDTO.getProtocol() + "," ;
            queryString += "callType =  " + domainRouteTableDTO.getCallType() + "," ;
            queryString += "chargeType =  " + domainRouteTableDTO.getChargeType() + "," ;
            queryString += "description =  '" + domainRouteTableDTO.getDescription() + "'," ;
            queryString += "routingEndpointType = " + domainRouteTableDTO.getRoutingEndpointType() + " " ;
            queryString += " Where domainID = '" + domainRouteTableDTO.getDomainID() + "' ";


            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  DomainRouteTableDTO domainRouteTableDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_DomainRouteTable Where domainID = '" + domainRouteTableDTO.getDomainID() + "' ";


            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}





