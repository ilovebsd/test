package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import java.sql.ResultSet;
import java.util.ArrayList;

import com.acromate.db.QueryStatement;
import com.acromate.dto.element.PrefixTableDTO;
import com.acromate.util.Logger;
import com.acromate.util.Str;

public class PrefixTableDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private PrefixTableDTO prefixTableDTO ;
    QueryStatement statement ;

    public PrefixTableDAO() {}

    public PrefixTableDAO( QueryStatement statement, PrefixTableDTO prefixTableDTO ) {
        this.statement = statement ;
        this.prefixTableDTO = prefixTableDTO ;
    }

    public ArrayList getList(QueryStatement statement, String PrefixTableID, String StartPrefix) {
        ArrayList list = new ArrayList() ;
        PrefixTableDTO prefixTableDTO = null ;
        ResultSet rs = null ;
        String strWhere = "";

        if(!PrefixTableID.equals("")){
            strWhere += " AND p.PrefixTableID = '" + PrefixTableID +"' ";
        }
        if(!StartPrefix.equals("")){
            strWhere += " AND p.StartPrefix = '" + StartPrefix +"' ";
        }

        try {
            String queryString = "SELECT  p.prefixTableID, p.startPrefix, p.endPrefix, p.routeSelectRule, p.routeID, p.protocol, p.callType, p.chargeType, p.description, " ;
            queryString += " p.minDigitCount, p.maxDigitCount, p.routingEndpointType, r.endpointClass,nrs.NrsService ";
            queryString += " From Table_PrefixTable p Left Join Table_RouteState r on p.routeID = r.endpointID and p.protocol = r.protocol ";
            queryString += " LEFT JOIN Table_NrsServicePrefix nrs on p.PrefixTableID = nrs.PrefixTableID  and p.STARTPREFIX = nrs.STARTPREFIX  Where 1 = 1 " ;
            queryString += strWhere;

            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                prefixTableDTO = new PrefixTableDTO() ;
                prefixTableDTO.setPrefixTableID(Str.CheckNullString(rs.getString(1)));
                prefixTableDTO.setStartPrefix(Str.CheckNullString(rs.getString(2)));
                prefixTableDTO.setEndPrefix(Str.CheckNullString(rs.getString(3)));
                prefixTableDTO.setRouteSelectRule(rs.getInt(4));
                prefixTableDTO.setRouteID(Str.CheckNullString(rs.getString(5)));
                prefixTableDTO.setProtocol(rs.getInt(6));
                prefixTableDTO.setCallType(rs.getInt(7));
                prefixTableDTO.setChargeType(rs.getInt(8));
                prefixTableDTO.setDescription(Str.CheckNullString(rs.getString(9)));
                prefixTableDTO.setMinDigitCount(rs.getInt(10));
                prefixTableDTO.setMaxDigitCount(rs.getInt(11));
                prefixTableDTO.setRoutingEndpointType(rs.getInt(12));
                prefixTableDTO.setEndpointClass(rs.getInt(13));
                prefixTableDTO.setNrsService(rs.getInt(14));

                list.add(prefixTableDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, PrefixTableDTO prefixTableDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_PrefixTable ";
            queryString += " (prefixTableID, startPrefix, endPrefix, routeSelectRule, routeID, protocol, callType, chargeType, description, " ;
            queryString += " minDigitCount, maxDigitCount, routingEndpointType) ";
            queryString += " VALUES (" ;
            queryString += " '" + prefixTableDTO.getPrefixTableID() + "' ," ;
            queryString += " '" + prefixTableDTO.getStartPrefix() + "' ," ;
            queryString += " '" + prefixTableDTO.getEndPrefix() + "'," ;
            queryString += "  " + prefixTableDTO.getRouteSelectRule() + "," ;
            queryString += " '" + prefixTableDTO.getRouteID() + "'," ;
            queryString += "  " + prefixTableDTO.getProtocol() + "," ;
            queryString += "  " + prefixTableDTO.getCallType() + "," ;
            queryString += "  " + prefixTableDTO.getChargeType() + "," ;
            queryString += " '" + prefixTableDTO.getDescription() + "'," ;
            queryString += "  " + prefixTableDTO.getMinDigitCount() + "," ;
            queryString += "  " + prefixTableDTO.getMaxDigitCount() + "," ;
            queryString += "  " + prefixTableDTO.getRoutingEndpointType() + ") " ;

            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        if (count <= 0) return false ;
        return true ;
    }


    public boolean update( QueryStatement statement, PrefixTableDTO prefixTableDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_PrefixTable SET ";
            queryString += " endPrefix = '" + prefixTableDTO.getEndPrefix() + "', " ;
            queryString += "routeSelectRule = " + prefixTableDTO.getRouteSelectRule() + "," ;
            queryString += "routeID = '" + prefixTableDTO.getRouteID() + "'," ;
            queryString += "protocol = " + prefixTableDTO.getProtocol() + "," ;
            queryString += "callType = " + prefixTableDTO.getCallType() + "," ;
            queryString += "chargeType = " + prefixTableDTO.getChargeType() + "," ;
            queryString += "description = '" + prefixTableDTO.getDescription() + "'," ;
            queryString += "minDigitCount = " + prefixTableDTO.getMinDigitCount() + "," ;
            queryString += "maxDigitCount = " + prefixTableDTO.getMaxDigitCount() + "," ;
            queryString += "routingEndpointType = " + prefixTableDTO.getRoutingEndpointType() + " " ;
            queryString += " WHERE prefixTableID = '" + prefixTableDTO.getPrefixTableID() + "' ";
            queryString += " AND startPrefix = '" + prefixTableDTO.getStartPrefix() + "' " ;

            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        if (count <= 0) return false ;
        return true ;
    }

    public boolean delete( QueryStatement statement,  PrefixTableDTO prefixTableDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_PrefixTable WHERE prefixTableID = '" + prefixTableDTO.getPrefixTableID() + "' ";
            queryString += " AND startPrefix = '" + prefixTableDTO.getStartPrefix() + "' " ;

            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        if (count <= 0) return false ;
        return true ;
    }
}


