package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.RouteMonitorDTO;
import com.acromate.util.Logger;

public class RouteMonitorDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private RouteMonitorDTO routeMonitorDTO ;
    QueryStatement statement ;

    public RouteMonitorDAO() {}

    public RouteMonitorDAO( QueryStatement statement, RouteMonitorDTO routeMonitorDTO ) {
        this.statement = statement ;
        this.routeMonitorDTO = routeMonitorDTO ;
    }

    public ArrayList getList(QueryStatement statement, String EndpointID, int Protocol) {
        ArrayList list = new ArrayList() ;
        RouteMonitorDTO routeMonitorDTO = null ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT endpointID, protocol, checkMode, fromNumber, toNumber, messageType, subType, subID " ;
            queryString += " From Table_RouteMonitor Where endpointID = '" + EndpointID + "' ";
            queryString += " AND protocol = " + Protocol + " " ;

            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;
/*
            while ( rs.next() )  {
                routeMonitorDTO = new RouteMonitorDTO() ;
                routeMonitorDTO.setEndpointID(Str.CheckNullString(rs.getString(1));
                routeMonitorDTO.setProtocol(rs.getInt(2));
                routeMonitorDTO.setCheckMode(rs.getInt(3));
                routeMonitorDTO.setFromNumber(Str.CheckNullString(rs.getString(4));
                routeMonitorDTO.setToNumber(Str.CheckNullString(rs.getString(5));
                routeMonitorDTO.setMessageType(rs.getInt(6));
                routeMonitorDTO.setSubType(rs.getInt(7));
                routeMonitorDTO.setSubID(Str.CheckNullString(rs.getString(8));
                list.add(routeMonitorDTO) ;
            }*/
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, RouteMonitorDTO routeMonitorDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_RouteMonitor ";
            queryString += " (endpointID, protocol, checkMode, fromNumber, toNumber, messageType, subType, subID )";
            queryString += " VALUES (" ;
            queryString += " '" + routeMonitorDTO.getEndpointID() + "' ," ;
            queryString += "  " + routeMonitorDTO.getProtocol() + "," ;
            queryString += "  " + routeMonitorDTO.getCheckMode() + "," ;
            queryString += " '" + routeMonitorDTO.getFromNumber() + "'," ;
            queryString += " '" + routeMonitorDTO.getToNumber() + "'," ;
            queryString += "  " + routeMonitorDTO.getMessageType() + "," ;
            queryString += "  " + routeMonitorDTO.getSubType() + "," ;
            queryString += " '" + routeMonitorDTO.getSubID() + "') " ;

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, RouteMonitorDTO routeMonitorDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_RouteMonitor SET ";
            queryString += "checkMode =  " + routeMonitorDTO.getCheckMode() + "," ;
            queryString += "fromNumber =  '" + routeMonitorDTO.getFromNumber() + "'," ;
            queryString += "toNumber =  '" + routeMonitorDTO.getToNumber() + "'," ;
            queryString += "messageType =  " + routeMonitorDTO.getMessageType() + "," ;
            queryString += "subType =  " + routeMonitorDTO.getSubType() + "," ;
            queryString += "subID = '" + routeMonitorDTO.getSubID() + "' " ;
            queryString += " Where endpointID = '" + routeMonitorDTO.getEndpointID() + "' ";
            queryString += " AND protocol = " + routeMonitorDTO.getProtocol() + " " ;

            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  RouteMonitorDTO routeMonitorDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_RouteMonitor Where endpointID = '" + routeMonitorDTO.getEndpointID() + "' ";
            queryString += " AND protocol = " + routeMonitorDTO.getProtocol() + " " ;


            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}





