package com.acromate.dao.element;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2007</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.TimingRouteIDDTO;
import com.acromate.util.Logger;

public class TimingRouteIDDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private TimingRouteIDDTO timingRouteIDDTO;
    QueryStatement statement;

    public TimingRouteIDDAO() {}

    public TimingRouteIDDAO(QueryStatement statement,
                            TimingRouteIDDTO timingRouteIDDTO) {
        this.statement = statement;
        this.timingRouteIDDTO = timingRouteIDDTO;
    }

    public ArrayList getList(QueryStatement statement, String TimingRouteID) {
        ArrayList list = new ArrayList();
        TimingRouteIDDTO timingRouteIDDTO = null;
        ResultSet rs = null;
        String strWhere = "";

        if ("".equals(TimingRouteID) != true) {
            strWhere += " AND t.TimingRouteID LIKE '%" + TimingRouteID + "%' ";
        }
            try {
                String queryString =
                        "SELECT t.TimingRouteID , t.DefaultRouteID, t.DefaultProtocol, r.endpointClass  "
                        + " FROM table_TimingRouteID t Left Join Table_RouteState r "
                        + " on t.DefaultRouteID = r.endpointid and t.DefaultProtocol = r.protocol  where 1 = 1 ";
                rs = statement.executeQuery(queryString);
                log.info(queryString);

                while (rs.next()) {
                    timingRouteIDDTO = new TimingRouteIDDTO();
                    timingRouteIDDTO.setTimingRouteID(Str.CheckNullString(rs.getString(1)));
                    timingRouteIDDTO.setDefaultRouteID(Str.CheckNullString(rs.getString(2)));
                    timingRouteIDDTO.setDefaultProtocol(rs.getInt(3));
                    timingRouteIDDTO.setEndpointClass(rs.getInt(4));
                    list.add(timingRouteIDDTO);
                }
            } catch (Exception e) {
                log.error("exception occurred > ", e);
            } finally {
                try {
                    if (rs != null) rs.close();
                } catch (Exception e) { log.error("exception occurred > ", e); }
            }
        return list;
    }


    public boolean insert(QueryStatement statement, TimingRouteIDDTO timingRouteIDDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = "INSERT INTO table_TimingRouteID(TimingRouteID, DefaultRouteID, DefaultProtocol )";
            queryString += " VALUES (";
            queryString += " '" + timingRouteIDDTO.getTimingRouteID() + "' ,";
            queryString += " '" + timingRouteIDDTO.getDefaultRouteID() + "',";
            queryString += "  " + timingRouteIDDTO.getDefaultProtocol() + " )";

            log.info(queryString);
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        if (count <= 0) return false ;
        return true;
    }

        public boolean update(QueryStatement statement, TimingRouteIDDTO timingRouteIDDTO) {
            String queryString = "";
            int count = 0;
            try {
                if (statement == null) {
                    return false;
                }

                queryString = "UPDATE TABLE_TIMINGROUTEID SET ";
                queryString += " DEFAULTROUTEID = '"+timingRouteIDDTO.getDefaultRouteID()+"', ";
                queryString += " DEFAULTPROTOCOL = "+timingRouteIDDTO.getDefaultProtocol()+" " ;
                queryString += " WHERE TIMINGROUTEID =  '"+timingRouteIDDTO.getTimingRouteID()+ "' " ;


                count = statement.executeUpdate(queryString);
            } catch (Exception e) {
                log.error("exception occurred > ", e);
                return false;
            }
            if (count <= 0) return false ;
            return true;
        }

        public boolean delete(QueryStatement statement, TimingRouteIDDTO timingRouteIDDTO) {
            String queryString = "";
            int count = 0;
            try {
                if (statement == null) {
                    return false;
                }
                queryString = "Delete from table_TimingRouteID ";
                queryString += " where timingrouteid ='" + timingRouteIDDTO.getTimingRouteID() + "'";

                count = statement.executeUpdate(queryString);
            } catch (Exception e) {
                log.error("exception occurred > ", e);
                return false;
            }
        if (count <= 0) return false ;
        return true;
    }
}


