package com.acromate.dao.element;

import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.element.SubscriberGroupDTO;
import com.acromate.util.Logger;

public class SubscriberGroupDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private SubscriberGroupDTO subscriberGroupDTO ;
    QueryStatement statement ;

    public SubscriberGroupDAO() {}

    public SubscriberGroupDAO( QueryStatement statement, SubscriberGroupDTO subscriberGroupDTO ) {
        this.statement = statement ;
        this.subscriberGroupDTO = subscriberGroupDTO ;
    }


    public SubscriberGroupDTO getDTO(QueryStatement statement, String strGROUPID ) {
        SubscriberGroupDTO subscriberGroupDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT GROUPID, GROUPNAME, CALLERTYPE, EXTENSIONGROUPNUM, MAXEXTENSIONDIGITCOUNT, PREFIXTABLEID,";
            queryString += " ISGROUPCHARGE, SPECIALNOGID, GROUPCHARGEE164";
            queryString += " From table_SubscriberGroup ";
            queryString += " WHERE GROUPID = '" + strGROUPID + "' ";

            System.out.println(queryString) ;
            rs = statement.executeQuery(queryString) ;

            if ( rs.next() )  {
                subscriberGroupDTO = new SubscriberGroupDTO() ;
                subscriberGroupDTO.setGroupID(Str.CheckNullString(rs.getString(1)));
                subscriberGroupDTO.setGroupName(Str.CheckNullString(rs.getString(2)));
                subscriberGroupDTO.setCallerType(rs.getInt(3));
                subscriberGroupDTO.setExtensionGroupNum(Str.CheckNullString(rs.getString(4)));
                subscriberGroupDTO.setMaxextensiondigitcount(rs.getInt(5));
                subscriberGroupDTO.setPrefixTableID(Str.CheckNullString(rs.getString(6)));
                subscriberGroupDTO.setIsGroupCharge(rs.getInt(7));
                subscriberGroupDTO.setSpecialNoGID(Str.CheckNullString(rs.getString(8)));
                subscriberGroupDTO.setGroupChargeE164(Str.CheckNullString(rs.getString(9)));

            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { e.printStackTrace(); }
        }
        return subscriberGroupDTO;
    }



    public ArrayList getList(QueryStatement statement, String GroupID) {
        ArrayList list = new ArrayList() ;
        SubscriberGroupDTO subscriberGroupDTO = null ;
        ResultSet rs = null ;
        String strWhere = " where 1 = 1 ";

      //------Search Condition Check -----------------------------------
      if ("".equals(GroupID) != true)
          strWhere += " AND GroupID LIKE '%"+GroupID+"%' ";

        try {
            String queryString = "SELECT GroupID, GroupName, CallerType, MaxExtensionDigitCount, PrefixTableID, IsGroupCharge, GroupChargeE164 "
                                 +	" FROM table_SubscriberGroup  "
                                 +	strWhere ;

            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                subscriberGroupDTO = new SubscriberGroupDTO() ;
                subscriberGroupDTO.setGroupID(Str.CheckNullString(rs.getString(1)));
                subscriberGroupDTO.setGroupName(Str.CheckNullString(rs.getString(2)));
                subscriberGroupDTO.setCallerType(rs.getInt(3));
                subscriberGroupDTO.setMaxextensiondigitcount(rs.getInt(4));
                subscriberGroupDTO.setPrefixTableID(Str.CheckNullString(rs.getString(5)));
                subscriberGroupDTO.setIsGroupCharge(rs.getInt(6));
                subscriberGroupDTO.setGroupChargeE164(Str.CheckNullString(rs.getString(7)));
                list.add(subscriberGroupDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, SubscriberGroupDTO subscriberGroupDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   "INSERT INTO TABLE_SUBSCRIBERGROUP(GROUPID, GROUPNAME, CALLERTYPE, EXTENSIONGROUPNUM, MAXEXTENSIONDIGITCOUNT, PREFIXTABLEID,"
                           + " ISGROUPCHARGE, SPECIALNOGID, GROUPCHARGEE164) VALUES ('"
                           + subscriberGroupDTO.getGroupID() + "','"
                           + subscriberGroupDTO.getGroupName() + "',"
                           + subscriberGroupDTO.getCallerType() + ",'"
                           + subscriberGroupDTO.getExtensionGroupNum() + "',"
                           + subscriberGroupDTO.getMaxextensiondigitcount() + ",'"
                           + subscriberGroupDTO.getPrefixTableID() + "',"
                           + subscriberGroupDTO.getIsGroupCharge() + ",'"
                           + subscriberGroupDTO.getSpecialNoGID() + "','"
                           + subscriberGroupDTO.getGroupChargeE164() + "') ";


            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }


    public boolean update( QueryStatement statement, SubscriberGroupDTO subscriberGroupDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString  = "UPDATE TABLE_SUBSCRIBERGROUP SET "
                           + "GROUPNAME = '" + subscriberGroupDTO.getGroupName() + "',"
                           + "CALLERTYPE = " + subscriberGroupDTO.getCallerType() + ","
                           + "EXTENSIONGROUPNUM = '" + subscriberGroupDTO.getExtensionGroupNum() + "',"
                           + "MAXEXTENSIONDIGITCOUNT = " + subscriberGroupDTO.getMaxextensiondigitcount() +","
                           + "PREFIXTABLEID = '" + subscriberGroupDTO.getPrefixTableID() +"',"
                           + "ISGROUPCHARGE = " + subscriberGroupDTO.getIsGroupCharge() + ","
                           + "SPECIALNOGID = '" + subscriberGroupDTO.getSpecialNoGID() + "',"
                           + "GROUPCHARGEE164 = '" + subscriberGroupDTO.getGroupChargeE164() + "' "
                           + "WHERE GROUPID =  '" +  subscriberGroupDTO.getGroupID() + "'" ;


            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  SubscriberGroupDTO subscriberGroupDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = "Delete from table_SubscriberGroup ";
            queryString += " where GroupID='"+subscriberGroupDTO.getGroupID()+"'" ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}






