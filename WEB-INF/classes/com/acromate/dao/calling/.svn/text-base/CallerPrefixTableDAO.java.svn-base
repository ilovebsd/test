package com.acromate.dao.calling;


import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.dto.calling.CallerPrefixTableDTO;
import com.acromate.util.Logger;

public class CallerPrefixTableDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private CallerPrefixTableDTO callerPrefixTableDTO ;
    QueryStatement statement ;

    public CallerPrefixTableDAO() {}

    public CallerPrefixTableDAO( QueryStatement statement, CallerPrefixTableDTO callerPrefixTableDTO ) {
        this.statement = statement ;
        this.callerPrefixTableDTO = callerPrefixTableDTO ;
    }


    public CallerPrefixTableDTO getDTO(QueryStatement statement, String strstartPrefix, String strendPrefix ) {
        CallerPrefixTableDTO callerPrefixTableDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT startPrefix, endPrefix, routeSelectRule, routeID, protocol, options, callType, description, callerType, ";

            queryString += " ( select endpointClass from Table_routestate where endpointID = cp.routeID and protocol = cp.protocol ) ";    //endpointid
            queryString += " From Table_CallerPrefixTable cp ";
            queryString += " WHERE startPrefix = '" + strstartPrefix + "' ";
            queryString += " AND endPrefix = '" + strendPrefix + "' " ;

            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;


            if ( rs.next() )  {
                callerPrefixTableDTO = new CallerPrefixTableDTO() ;

                callerPrefixTableDTO.setStartPrefix(Str.CheckNullString(rs.getString(1)));
                callerPrefixTableDTO.setEndPrefix(Str.CheckNullString(rs.getString(2)));
                callerPrefixTableDTO.setRouteSelectRule(rs.getInt(3));
                callerPrefixTableDTO.setRouteID(Str.CheckNullString(rs.getString(4)));
                callerPrefixTableDTO.setProtocol(rs.getInt(5));
                callerPrefixTableDTO.setOptions(rs.getInt(6));
                callerPrefixTableDTO.setCallType(rs.getInt(7));
                callerPrefixTableDTO.setDescription(Str.CheckNullString(rs.getString(8)));
                callerPrefixTableDTO.setCallerType(rs.getInt(9));
                callerPrefixTableDTO.setEndpointClass(rs.getInt(10));
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return callerPrefixTableDTO;
    }


    public ArrayList getList(QueryStatement statement) {
        ArrayList list = new ArrayList();
        CallerPrefixTableDTO callerPrefixTableDTO = null;
        ResultSet rs = null;


        try {
            String queryString = "SELECT startPrefix, endPrefix, routeSelectRule, routeID, protocol, options, callType, description, callerType ";
            queryString += " From Table_CallerPrefixTable ";
            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                callerPrefixTableDTO = new CallerPrefixTableDTO() ;
                callerPrefixTableDTO.setStartPrefix(Str.CheckNullString(rs.getString(1)));
                callerPrefixTableDTO.setEndPrefix(Str.CheckNullString(rs.getString(2)));
                callerPrefixTableDTO.setRouteSelectRule(rs.getInt(3));
                callerPrefixTableDTO.setRouteID(Str.CheckNullString(rs.getString(4)));
                callerPrefixTableDTO.setProtocol(rs.getInt(5));
                callerPrefixTableDTO.setOptions(rs.getInt(6));
                callerPrefixTableDTO.setCallType(rs.getInt(7));
                callerPrefixTableDTO.setDescription(Str.CheckNullString(rs.getString(8)));
                callerPrefixTableDTO.setCallerType(rs.getInt(9));
                list.add(callerPrefixTableDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, CallerPrefixTableDTO callerPrefixTableDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_CallerPrefixTable ";
            queryString += " (startPrefix, endPrefix, routeSelectRule, routeID, protocol, options, callType, description, callerType) ";
            queryString += " VALUES (" ;

            queryString += " '"+callerPrefixTableDTO.getStartPrefix()+"', ";
            queryString += " '"+callerPrefixTableDTO.getEndPrefix()+"', ";
            queryString += "  "+callerPrefixTableDTO.getRouteSelectRule()+", ";
            queryString += " '"+callerPrefixTableDTO.getRouteID()+"', ";
            queryString += "  "+callerPrefixTableDTO.getProtocol()+", ";
            queryString += "  "+callerPrefixTableDTO.getOptions()+", ";
            queryString += "  "+callerPrefixTableDTO.getCallType()+", ";
            queryString += " '"+callerPrefixTableDTO.getDescription()+"', ";
            queryString += "  "+callerPrefixTableDTO.getCallerType()+") ";

            log.info(queryString) ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean update( QueryStatement statement, CallerPrefixTableDTO callerPrefixTableDTO  ) {
    String queryString = "";
    int count = 0;
    try {
        if (statement == null) {
            return false;
        }

        queryString = " UPDATE Table_CallerPrefixTable SET ";
        queryString += " routeSelectRule = "+ callerPrefixTableDTO.getRouteSelectRule()+ ", ";
        queryString += " routeID = '" + callerPrefixTableDTO.getRouteID() + "', ";
        queryString += " protocol = "+ callerPrefixTableDTO.getProtocol()+", ";
        queryString += " options = "+ callerPrefixTableDTO.getOptions()+", ";
        queryString += " callType = "+ callerPrefixTableDTO.getCallType()+", ";
        queryString += " description = '"+ callerPrefixTableDTO.getDescription()+"', ";
        queryString += " callerType = "+ callerPrefixTableDTO.getCallerType()+" ";
        queryString += " WHERE startPrefix = '" + callerPrefixTableDTO.getStartPrefix() +"' ";
        queryString += " AND endPrefix = '" + callerPrefixTableDTO.getEndPrefix() + "' " ;

        count = statement.executeUpdate(queryString);
        log.info(queryString) ;
    } catch (Exception e) {
        log.error("exception occurred > ", e);
        return false;
    }
    return true ;
}

    public boolean delete( QueryStatement statement,  CallerPrefixTableDTO callerPrefixTableDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_CallerPrefixTable WHERE startPrefix = '" + callerPrefixTableDTO.getStartPrefix()+ "' " ;
            queryString += " AND endPrefix = '" + callerPrefixTableDTO.getEndPrefix() + "' " ;
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean deleteAll( QueryStatement statement ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_CallerPrefixTable " ;
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

}

