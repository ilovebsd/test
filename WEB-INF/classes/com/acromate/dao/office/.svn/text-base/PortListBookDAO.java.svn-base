package com.acromate.dao.office;

import com.acromate.dto.office.PortListBookDTO;
import com.acromate.db.QueryStatement ;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import com.acromate.util.Logger;

public class PortListBookDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private PortListBookDTO portListBookDTO ;
    QueryStatement statement ;

    public PortListBookDAO() {}

    public PortListBookDAO( QueryStatement statement, PortListBookDTO portListBookDTO ) {
        this.statement = statement ;
        this.portListBookDTO = portListBookDTO ;
    }

    public PortListBookDTO getDTO(QueryStatement statement, int nOrderKey) {
        PortListBookDTO portListBookDTO = null;
        ResultSet rs = null;

        String strWhere = " where OrderKey = "+nOrderKey+" ";

        try {
            String queryString = "SELECT subOrgID, PhoneType, mDF1, mDF2, mDF3, building, floor, bit, switchName, port, ipAddr, e164, etc  ";
            queryString += " From Table_PortListBook ";
            queryString += strWhere ;

            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;


            if ( rs.next() )  {
                portListBookDTO = new PortListBookDTO() ;

                portListBookDTO.setOrderKey(nOrderKey) ;
                portListBookDTO.setSubOrgID(Str.CheckNullString(rs.getString(1)));
                portListBookDTO.setPhoneType(rs.getInt(2));
                portListBookDTO.setMDF1(Str.CheckNullString(rs.getString(3)));
                portListBookDTO.setMDF2(Str.CheckNullString(rs.getString(4)));
                portListBookDTO.setMDF3(Str.CheckNullString(rs.getString(5)));
                portListBookDTO.setBuilding(Str.CheckNullString(rs.getString(6)));
                portListBookDTO.setFloor(Str.CheckNullString(rs.getString(7)));
                portListBookDTO.setBit(Str.CheckNullString(rs.getString(8)));
                portListBookDTO.setSwitchName(Str.CheckNullString(rs.getString(9)));
                portListBookDTO.setPort(Str.CheckNullString(rs.getString(10)));
                portListBookDTO.setIpAddr(Str.CheckNullString(rs.getString(11)));
                portListBookDTO.setE164(Str.CheckNullString(rs.getString(12)));
                portListBookDTO.setEtc(Str.CheckNullString(rs.getString(13)));

            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return portListBookDTO;
    }

    public int getMaxID(QueryStatement statement) {
        int max = 0 ;
        String selectQuery = "SELECT max(OrderKey) " ;
        selectQuery    += " FROM Table_PortListBook ";


        ResultSet rs = null;
        log.info("getMaxID--->"+selectQuery);
        try {
            if (statement != null) {
                rs = statement.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1);
                rs.close();
            } else
                log.info("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            log.info(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) { log.error("exception occurred > ", e); }
        }
        return max;
    }



    public ArrayList getList(QueryStatement statement ) {
        ArrayList list = new ArrayList();
        PortListBookDTO portListBookDTO = null;
        ResultSet rs = null;

        try {
            String queryString = "SELECT OrderKey, PhoneType, subOrgID, mDF1, mDF2, mDF3, building, floor, bit,  port, switchName, ipAddr, e164, etc  ";
            queryString += " From Table_PortListBook ";

            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                portListBookDTO = new PortListBookDTO() ;

                portListBookDTO.setOrderKey(rs.getInt(1));
                portListBookDTO.setPhoneType(rs.getInt(2));
                portListBookDTO.setSubOrgID(Str.CheckNullString(rs.getString(3)));
                portListBookDTO.setMDF1(Str.CheckNullString(rs.getString(4)));
                portListBookDTO.setMDF2(Str.CheckNullString(rs.getString(5)));
                portListBookDTO.setMDF3(Str.CheckNullString(rs.getString(6)));
                portListBookDTO.setBuilding(Str.CheckNullString(rs.getString(7)));
                portListBookDTO.setFloor(Str.CheckNullString(rs.getString(8)));
                portListBookDTO.setBit(Str.CheckNullString(rs.getString(9)));
                portListBookDTO.setPort(Str.CheckNullString(rs.getString(10)));
                portListBookDTO.setSwitchName(Str.CheckNullString(rs.getString(11)));
                portListBookDTO.setIpAddr(Str.CheckNullString(rs.getString(12)));
                portListBookDTO.setE164(Str.CheckNullString(rs.getString(13)));
                portListBookDTO.setEtc(Str.CheckNullString(rs.getString(14)));

                list.add(portListBookDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public boolean insert ( QueryStatement statement, PortListBookDTO portListBookDTO  ) {
        String queryString = "";
        int nResult = 0;
        int max = getMaxID(statement);
        try {
            if (statement == null) {
                return false;
            }

            queryString =   " INSERT INTO Table_PortListBook ";
            queryString += " ( OrderKey, PhoneType, subOrgID, mDF1, mDF2, mDF3, building, floor, bit, port , switchName, ipAddr, e164, etc ) ";
            queryString += " VALUES (" ;

            queryString += "  " + (max + 1) + " , " ;
            queryString += "  "+portListBookDTO.getPhoneType()+", ";
            queryString += " '"+portListBookDTO.getSubOrgID()+"', ";
            queryString += " '"+portListBookDTO.getMDF1()+"', ";
            queryString += " '"+portListBookDTO.getMDF2()+"', ";
            queryString += " '"+portListBookDTO.getMDF3()+"', ";
            queryString += " '"+portListBookDTO.getBuilding()+"', ";
            queryString += " '"+portListBookDTO.getFloor()+"', ";
            queryString += " '"+portListBookDTO.getBit()+"', ";
            queryString += " '"+portListBookDTO.getPort()+"', ";
            queryString += " '"+portListBookDTO.getSwitchName()+"', ";
            queryString += " '"+portListBookDTO.getIpAddr()+"', ";
            queryString += " '"+portListBookDTO.getE164()+"', ";
            queryString += " '"+portListBookDTO.getEtc()+"') ";

            log.info(queryString) ;
            nResult = statement.executeUpdate(queryString);
                if (nResult >= 1)
                      log.info("입력 성공");
            } catch (Exception e) {
                log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean update( QueryStatement statement, PortListBookDTO portListBookDTO  ) {
        String queryString = "";
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_PortListBook SET ";
            queryString += " PhoneType = " + portListBookDTO.getPhoneType() + ", ";
            queryString += " subOrgID = '" + portListBookDTO.getSubOrgID() + "', ";
            queryString += " mDF1 = '" + portListBookDTO.getMDF1() + "', ";
            queryString += " mDF2 = '" + portListBookDTO.getMDF2() + "', ";
            queryString += " mDF3 = '" + portListBookDTO.getMDF3() + "', ";
            queryString += " building = '" + portListBookDTO.getBuilding() + "', ";
            queryString += " floor = '"+ portListBookDTO.getFloor()+"', ";
            queryString += " bit = '"+ portListBookDTO.getBit()+"', ";
            queryString += " switchName = '"+ portListBookDTO.getSwitchName()+"', ";
            queryString += " port = '"+ portListBookDTO.getPort()+"', ";
            queryString += " ipAddr = '"+ portListBookDTO.getIpAddr()+"', ";
            queryString += " e164 = '"+ portListBookDTO.getE164()+"', ";
            queryString += " etc = '"+ portListBookDTO.getEtc()+"' ";
            queryString += " WHERE OrderKey = " + portListBookDTO.getOrderKey() + " ";

            statement.executeUpdate(queryString);
            log.info(queryString) ;

        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  PortListBookDTO portListBookDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_PortListBook WHERE OrderKey = " + portListBookDTO.getOrderKey() + " ";
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean deleteAllSubOrg( QueryStatement statement, String strSubOrgID ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_PortListBook WHERE SubOrgID = '" + strSubOrgID + "' ";
            count = statement.executeUpdate(queryString);
            log.info(queryString) ;
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

}
