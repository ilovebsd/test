package com.acromate.dao.office ;

import com.acromate.db.QueryStatement ;
import com.acromate.dto.office.DeptDTO;
import java.util.ArrayList;
import com.acromate.util.Str;
import java.sql.ResultSet;
import java.util.Hashtable;
import com.acromate.util.Logger;

public class DeptDAO {
    private Logger log = Logger.getLogger(this.getClass());

    private DeptDTO deptDTO ;
    QueryStatement statement ;

    public DeptDAO() {}

    public DeptDAO( QueryStatement statement, DeptDTO deptDTO ) {
        this.statement = statement ;
        this.deptDTO = deptDTO ;
    }

    public int getMax ( QueryStatement statement ) {
        int  nMax =  0 ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  max(DEPTID) From Table_Dept " ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            if ( rs.next() )  nMax = rs.getInt(1);
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        return nMax ;
    }

    public DeptDTO getDTO(QueryStatement statement, int DeptID) {
        DeptDTO deptDTO = null ;
        ResultSet rs = null ;

        try {
            String queryString = "SELECT  DeptID, OrgChartID, ParentID, DeptName, Description, Type, UsePickup, KeyNumber, Officebox, Operation " ;
            queryString += " From Table_Dept Where DeptID = " + DeptID ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            if ( rs.next() )  {
                deptDTO = new DeptDTO() ;
                deptDTO.setDeptID(rs.getInt(1));
                deptDTO.setOrgChartID(rs.getInt(2));
                deptDTO.setParentID(rs.getInt(3));
                deptDTO.setDeptName(Str.CheckNullString(rs.getString(4)));
                deptDTO.setDescription(Str.CheckNullString(rs.getString(5)));
                deptDTO.setType(rs.getInt(6));
                deptDTO.setUsePickup(rs.getInt(7));
                deptDTO.setKeyNumber(Str.CheckNullString(rs.getString(8)));
                deptDTO.setOfficebox(Str.CheckNullString(rs.getString(9)));
                deptDTO.setOperation(rs.getInt(10));
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        return deptDTO;
    }


    public Hashtable getHashList(QueryStatement statement, int OrgChartID, String deptName) {
        Hashtable list = new Hashtable() ;
        DeptDTO deptDTO = null ;
        ResultSet rs = null ;
        String strWhere =  " Where OrgChartID = " + OrgChartID + " ";
        String strOrder =  " order by DeptName asc  ";
        if ( deptName.length() > 0) strWhere += " AND DeptName like '%" + deptName + "%' ";

        try {
            String queryString = "SELECT  DeptID, OrgChartID, ParentID, DeptName, Description, Type, UsePickup, KeyNumber, Officebox, Operation " ;
            queryString += " From Table_Dept " + strWhere + strOrder;
            log.info(queryString) ;
            rs = statement.executeQuery(queryString) ;

            while ( rs.next() )  {
                deptDTO = new DeptDTO() ;
                deptDTO.setDeptID(rs.getInt(1));
                deptDTO.setOrgChartID(rs.getInt(2));
                deptDTO.setParentID(rs.getInt(3));
                deptDTO.setDeptName(Str.CheckNullString(rs.getString(4)));
                deptDTO.setDescription(Str.CheckNullString(rs.getString(5)));
                deptDTO.setType(rs.getInt(6));
                deptDTO.setUsePickup(rs.getInt(7));
                deptDTO.setKeyNumber(Str.CheckNullString(rs.getString(8)));
                deptDTO.setOfficebox(Str.CheckNullString(rs.getString(9)));
                deptDTO.setOperation(rs.getInt(10));
                list.put(String.valueOf(deptDTO.getDeptID()), deptDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public ArrayList getList(QueryStatement statement, int OrgChartID, String deptName) {
        ArrayList list = new ArrayList() ;
        DeptDTO deptDTO = null ;
        ResultSet rs = null ;
        String strWhere =  " Where OrgChartID = " + OrgChartID + " ";
        String strOrder =  " order by DeptName asc  ";
        if ( deptName.length() > 0) strWhere += " AND DeptName like %" + deptName + "% ";

        try {
            String queryString = "SELECT  DeptID, OrgChartID, ParentID, DeptName, Description, Type, UsePickup, KeyNumber, Officebox, Operation " ;
            queryString += " From Table_Dept " + strWhere + strOrder ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;

            while ( rs.next() )  {
                deptDTO = new DeptDTO() ;
                deptDTO.setDeptID(rs.getInt(1));
                deptDTO.setOrgChartID(rs.getInt(2));
                deptDTO.setParentID(rs.getInt(3));
                deptDTO.setDeptName(Str.CheckNullString(rs.getString(4)));
                deptDTO.setDescription(Str.CheckNullString(rs.getString(5)));
                deptDTO.setType(rs.getInt(6));
                deptDTO.setUsePickup(rs.getInt(7));
                deptDTO.setKeyNumber(Str.CheckNullString(rs.getString(8)));
                deptDTO.setOfficebox(Str.CheckNullString(rs.getString(9)));
                deptDTO.setOperation(rs.getInt(10));
                list.add(deptDTO) ;
            }
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }

        return list;
    }

    public int getRootID(QueryStatement statement, int OrgChartID) {
        ArrayList list = new ArrayList() ;
        DeptDTO deptDTO = new DeptDTO() ;
        ResultSet rs = null ;
        int nRootDeptID = 0;
        try {
            String queryString = "SELECT  RootDeptID From Table_OrgChartList Where OrgChartID = " + OrgChartID ;
            rs = statement.executeQuery(queryString) ;
            log.info(queryString) ;
            if ( rs.next() )  nRootDeptID = rs.getInt(0);
        } catch(Exception e) {
            log.error("exception occurred > ", e);
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) { log.error("exception occurred > ", e); }
        }
        return nRootDeptID;
    }

    public boolean insert ( QueryStatement statement, DeptDTO deptDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " INSERT INTO Table_Dept ( DeptID, OrgChartID, ParentID, DeptName, Description, Type, UsePickup, KeyNumber, Officebox, Operation ) ";
            queryString += " VALUES (" + deptDTO.getDeptID() + ", " ;
            queryString += " " + deptDTO.getOrgChartID() +", " ;
            queryString += " " + deptDTO.getParentID()+", " ;
            queryString += " '" + deptDTO.getDeptName() +"', " ;
            queryString += " '" + deptDTO.getDescription() +"', " ;
            queryString += " " + deptDTO.getType() +", " ;
            queryString += " " + deptDTO.getUsePickup() +", " ;
            queryString += " '" + deptDTO.getKeyNumber() +"', " ;
            queryString += " '" + deptDTO.getOfficebox() +"', " ;
            queryString += " " + deptDTO.getOperation() +" ) " ;

            log.info(queryString) ;

            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean update( QueryStatement statement, DeptDTO deptDTO  ) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }

            queryString = " UPDATE Table_Dept SET OrgChartID, ParentID, Description, Type, UsePickup, KeyNumber, Officebox, Operation ) ";
            queryString += " OrgChartID = " + deptDTO.getOrgChartID() +", " ;
            queryString += " ParentID = " +  deptDTO.getParentID() +", " ;
            queryString += " Description ='" +  deptDTO.getDescription() +"', " ;
            queryString += " Type = " +  deptDTO.getType() +", " ;
            queryString += " UsePickup = " +  deptDTO.getUsePickup() +", " ;
            queryString += " KeyNumber = '" +  deptDTO.getKeyNumber() +"', " ;
            queryString += " Officebox = '" +  deptDTO.getOfficebox() +"', " ;
            queryString += " Operation = " +  deptDTO.getOfficebox() +" " ;
            queryString += " Where DeptID = " + deptDTO.getOperation() +" " ;

            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }

    public boolean delete( QueryStatement statement,  DeptDTO deptDTO) {
        String queryString = "";
        int count = 0;
        try {
            if (statement == null) {
                return false;
            }
            queryString = " DELETE FROM Table_Dept Where OrgChartID = " + deptDTO.getOrgChartID() + " AND DeptID = " + deptDTO.getDeptID() ;
            count = statement.executeUpdate(queryString);
        } catch (Exception e) {
            log.error("exception occurred > ", e);
            return false;
        }
        return true ;
    }
}

