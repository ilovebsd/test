package com.acromate.dataio.noms ;

import org.apache.log4j.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class CardInfoDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private int    rackId ;
    private int    shelfId ;
    private int    slotId ;
    private StringBuilder cardId = new StringBuilder();
    private StringBuilder cardType = new StringBuilder();
    private StringBuilder cardName = new StringBuilder();
    private StringBuilder hwVersion = new StringBuilder();
    private StringBuilder swVersion = new StringBuilder();
    private StringBuilder fwVersion = new StringBuilder();
    private int    usageStatus ;
    private int    operStatus ;
    private int    adminStatus ;
    private StringBuilder alarmStatus = new StringBuilder();
    private int    cpsThreshold ;
    private int    conThreshold ;
    private int    cpuThreshold ;
    private int    memThreshold ;

    public int    getRackId() { return rackId ; }
    public void   setRackId( int rackId ) { this.rackId = rackId ; }

    public int    getShelfId() { return shelfId ; }
    public void   setShelfId( int shelfId ) { this.shelfId = shelfId ; }

    public int    getSlotId() { return slotId ; }
    public void   setSlotId( int slotId ) { this.slotId = slotId ; }

    public String getCardId() { return cardId.toString() ; }
    public void   setCardId( String cardId ) {
        this.cardId.delete(0,this.cardId.length());
        this.cardId.append(cardId) ;
    }

    public String getCardType() { return cardType.toString() ; }
    public void   setCardType( String cardType ) {
        this.cardType.delete(0,this.cardType.length());
        this.cardType.append(cardType) ;
    }

    public String getCardName() { return cardName.toString() ; }
    public void   setCardName( String cardName ) {
        this.cardName.delete(0,this.cardName.length());
        this.cardName.append(cardName) ;
    }

    public String getHwVersion() { return hwVersion.toString() ; }
    public void   setHwVersion( String hwVersion ) {
        this.hwVersion.delete(0,this.hwVersion.length());
        this.hwVersion.append(hwVersion) ;
    }

    public String getSwVersion() { return swVersion.toString() ; }
    public void   setSwVersion( String swVersion ) {
        this.swVersion.delete(0,this.swVersion.length());
        this.swVersion.append(swVersion) ;
    }

    public String getFwVersion() { return fwVersion.toString() ; }
    public void   setFwVersion( String fwVersion ) {
        this.fwVersion.delete(0,this.fwVersion.length());
        this.fwVersion.append(fwVersion) ;
    }

    public int    getUsageStatus() { return usageStatus ; }
    public void   setUsageStatus( int usageStatus ) { this.usageStatus = usageStatus ; }

    public int    getOperStatus() { return operStatus ; }
    public void   setOperStatus( int operStatus ) { this.operStatus = operStatus ; }

    public int    getAdminStatus() { return adminStatus ; }
    public void   setAdminStatus( int adminStatus ) { this.adminStatus = adminStatus ; }

    public String getAlarmStatus() { return alarmStatus.toString() ; }
    public void   setAlarmStatus( String alarmStatus ) {
        this.alarmStatus.delete(0,this.alarmStatus.length());
        this.alarmStatus.append(alarmStatus) ;
    }

    public int    getCpsThreshold() { return cpsThreshold ; }
    public void   setCpsThreshold( int cpsThreshold ) { this.cpsThreshold = cpsThreshold ; }

    public int    getConThreshold() { return conThreshold ; }
    public void   setConThreshold( int conThreshold ) { this.conThreshold = conThreshold ; }

    public int    getCpuThreshold() { return cpuThreshold ; }
    public void   setCpuThreshold( int cpuThreshold ) { this.cpuThreshold = cpuThreshold ; }

    public int    getMemThreshold() { return memThreshold ; }
    public void   setMemThreshold( int memThreshold ) { this.memThreshold = memThreshold ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "rackId".toLowerCase()) == true) {
            if(!value.equals("")) rackId = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "shelfId".toLowerCase()) == true) {
            if(!value.equals("")) shelfId = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "slotId".toLowerCase()) == true) {
            if(!value.equals("")) slotId = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "cardId".toLowerCase()) == true) {
            return setString(cardId, value);
        }
        if(compareFieldID(temp, "cardType".toLowerCase()) == true) {
            return setString(cardType, value);
        }
        if(compareFieldID(temp, "cardName".toLowerCase()) == true) {
            return setString(cardName, value);
        }
        if(compareFieldID(temp, "hwVersion".toLowerCase()) == true) {
            return setString(hwVersion, value);
        }
        if(compareFieldID(temp, "swVersion".toLowerCase()) == true) {
            return setString(swVersion, value);
        }
        if(compareFieldID(temp, "fwVersion".toLowerCase()) == true) {
            return setString(fwVersion, value);
        }
        if(compareFieldID(temp, "usageStatus".toLowerCase()) == true) {
            if(!value.equals("")) usageStatus = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "operStatus".toLowerCase()) == true) {
            if(!value.equals("")) operStatus = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "adminStatus".toLowerCase()) == true) {
            if(!value.equals("")) adminStatus = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "alarmStatus".toLowerCase()) == true) {
            return setString(alarmStatus, value);
        }
        if(compareFieldID(temp, "cpsThreshold".toLowerCase()) == true) {
            if(!value.equals("")) cpsThreshold = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "conThreshold".toLowerCase()) == true) {
            if(!value.equals("")) conThreshold = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "cpuThreshold".toLowerCase()) == true) {
            if(!value.equals("")) cpuThreshold = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "memThreshold".toLowerCase()) == true) {
            if(!value.equals("")) memThreshold = Str.CheckNullInt(value);
            return 0;
        }
        log.error("CardInfoDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "rackId", idx, value) == true) {
            errorcode = getInteger(rackId, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "shelfId", idx, value) == true) {
            errorcode = getInteger(shelfId, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "slotId", idx, value) == true) {
            errorcode = getInteger(slotId, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cardId", idx, value) == true) {
            errorcode = getString(cardId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cardType", idx, value) == true) {
            errorcode = getString(cardType.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cardName", idx, value) == true) {
            errorcode = getString(cardName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "hwVersion", idx, value) == true) {
            errorcode = getString(hwVersion.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "swVersion", idx, value) == true) {
            errorcode = getString(swVersion.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "fwVersion", idx, value) == true) {
            errorcode = getString(fwVersion.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "usageStatus", idx, value) == true) {
            errorcode = getInteger(usageStatus, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "operStatus", idx, value) == true) {
            errorcode = getInteger(operStatus, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "adminStatus", idx, value) == true) {
            errorcode = getInteger(adminStatus, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "alarmStatus", idx, value) == true) {
            errorcode = getString(alarmStatus.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cpsThreshold", idx, value) == true) {
            errorcode = getInteger(cpsThreshold, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "conThreshold", idx, value) == true) {
            errorcode = getInteger(conThreshold, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cpuThreshold", idx, value) == true) {
            errorcode = getInteger(cpuThreshold, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "memThreshold", idx, value) == true) {
            errorcode = getInteger(memThreshold, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }

    public String toXmlString( String blank ) {
		StringBuilder xml = new StringBuilder();

		xml.append ( blank+"   <rackId>" + getRackId() + "</rackId>\n") ;
		xml.append ( blank+"   <shelfId>" + getShelfId() + "</shelfId>\n") ;
		xml.append ( blank+"   <slotId>" + getSlotId() + "</slotId>\n") ;
		xml.append ( blank+"   <cardId>" + getCardId() + "</cardId>\n") ;
		xml.append ( blank+"   <cardType>" + getCardType() + "</cardType>\n") ;
		xml.append ( blank+"   <cardName>" + getCardName() + "</cardName>\n") ;
		xml.append ( blank+"   <hwVersion>" + getHwVersion() + "</hwVersion>\n") ;
		xml.append ( blank+"   <swVersion>" + getSwVersion() + "</swVersion>\n") ;
		xml.append ( blank+"   <fwVersion>" + getFwVersion() + "</fwVersion>\n") ;
		xml.append ( blank+"   <usageState>" + getUsageStatus() + "</usageState>\n") ;
		xml.append ( blank+"   <operStatus>" + getOperStatus() + "</operStatus>\n") ;
		xml.append ( blank+"   <adminStatus>" + getAdminStatus() + "</adminStatus>\n") ;
		xml.append ( blank+"   <alarmStatus>" + getAlarmStatus() + "</alarmStatus>\n") ;
		xml.append ( blank+"   <cpsThreshold>" + getCpsThreshold() + "</cpsThreshold>\n") ;
		xml.append ( blank+"   <conThreshold>" + getConThreshold() + "</conThreshold>\n") ;
		xml.append ( blank+"   <cpuThreshold>" + getCpuThreshold() + "</cpuThreshold>\n") ;
		xml.append ( blank+"   <memThreshold>" + getMemThreshold() + "</memThreshold>\n") ;

		return xml.toString();
    }
}
