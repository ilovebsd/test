package com.acromate.dataio.noms ;

import org.apache.log4j.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class SlotHolderDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private int    slotId ;

    public int    getSlotId() { return slotId ; }
    public void   setSlotId( int slotId ) { this.slotId = slotId ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "slotId".toLowerCase()) == true) {
            if(!value.equals("")) slotId = Str.CheckNullInt(value);
            return 0;
        }
        log.error("SlotHolderDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "slotId", idx, value) == true) {
            errorcode = getInteger(slotId, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
	public String toXmlString( String blank ) {
		StringBuilder xml = new StringBuilder();

		xml.append ( blank+"   <slotId>" + getSlotId() + "</slotId>\n") ;

		return xml.toString();
    }
}
