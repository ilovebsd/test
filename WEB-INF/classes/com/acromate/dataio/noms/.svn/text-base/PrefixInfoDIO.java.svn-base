package com.acromate.dataio.noms ;

import org.apache.log4j.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class PrefixInfoDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder pfx = new StringBuilder();
    private StringBuilder callType = new StringBuilder();
    private StringBuilder min = new StringBuilder();
    private StringBuilder max = new StringBuilder();
    private StringBuilder svcType = new StringBuilder();
    private StringBuilder pcha = new StringBuilder();
    private StringBuilder enumS = new StringBuilder();
    private StringBuilder acf = new StringBuilder();
    private StringBuilder asi = new StringBuilder();
    private StringBuilder rlst = new StringBuilder();
    private StringBuilder sRlst = new StringBuilder();

    public String getPfx() { return pfx.toString() ; }
    public void   setPfx( String pfx ) {
        this.pfx.delete(0,this.pfx.length());
        this.pfx.append(pfx) ;
    }

    public String getCallType() { return callType.toString() ; }
    public void   setCallType( String callType ) {
        this.callType.delete(0,this.callType.length());
        this.callType.append(callType) ;
    }

    public String getMin() { return min.toString() ; }
    public void   setMin( String min ) {
        this.min.delete(0,this.min.length());
        this.min.append(min) ;
    }

    public String getMax() { return max.toString() ; }
    public void   setMax( String max ) {
        this.max.delete(0,this.max.length());
        this.max.append(max) ;
    }

    public String getSvcType() { return svcType.toString() ; }
    public void   setSvcType( String svcType ) {
        this.svcType.delete(0,this.svcType.length());
        this.svcType.append(svcType) ;
    }

    public String getPcha() { return pcha.toString() ; }
    public void   setPcha( String pcha ) {
        this.pcha.delete(0,this.pcha.length());
        this.pcha.append(pcha) ;
    }

    public String getEnumS() { return enumS.toString() ; }
    public void   setEnumS( String enumS ) {
        this.enumS.delete(0,this.enumS.length());
        this.enumS.append(enumS) ;
    }

    public String getAcf() { return acf.toString() ; }
    public void   setAcf( String acf ) {
        this.acf.delete(0,this.acf.length());
        this.acf.append(acf) ;
    }

    public String getAsi() { return asi.toString() ; }
    public void   setAsi( String asi ) {
        this.asi.delete(0,this.asi.length());
        this.asi.append(asi) ;
    }

    public String getRlst() { return rlst.toString() ; }
    public void   setRlst( String rlst ) {
        this.rlst.delete(0,this.rlst.length());
        this.rlst.append(rlst) ;
    }

    public String getSRlst() { return sRlst.toString() ; }
    public void   setSRlst( String sRlst ) {
        this.sRlst.delete(0,this.sRlst.length());
        this.sRlst.append(sRlst) ;
    }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "pfx".toLowerCase()) == true) {
            return setString(pfx, value);
        }
        if(compareFieldID(temp, "callType".toLowerCase()) == true) {
            return setString(callType, value);
        }
        if(compareFieldID(temp, "min".toLowerCase()) == true) {
            return setString(min, value);
        }
        if(compareFieldID(temp, "max".toLowerCase()) == true) {
            return setString(max, value);
        }
        if(compareFieldID(temp, "svcType".toLowerCase()) == true) {
            return setString(svcType, value);
        }
        if(compareFieldID(temp, "pcha".toLowerCase()) == true) {
            return setString(pcha, value);
        }
        if(compareFieldID(temp, "enumS".toLowerCase()) == true) {
            return setString(enumS, value);
        }
        if(compareFieldID(temp, "acf".toLowerCase()) == true) {
            return setString(acf, value);
        }
        if(compareFieldID(temp, "asi".toLowerCase()) == true) {
            return setString(asi, value);
        }
        if(compareFieldID(temp, "rlst".toLowerCase()) == true) {
            return setString(rlst, value);
        }
        if(compareFieldID(temp, "sRlst".toLowerCase()) == true) {
            return setString(sRlst, value);
        }
        log.error("PrefixInfoDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "pfx", idx, value) == true) {
            errorcode = getString(pfx.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "callType", idx, value) == true) {
            errorcode = getString(callType.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "min", idx, value) == true) {
            errorcode = getString(min.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "max", idx, value) == true) {
            errorcode = getString(max.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "svcType", idx, value) == true) {
            errorcode = getString(svcType.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "pcha", idx, value) == true) {
            errorcode = getString(pcha.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "enumS", idx, value) == true) {
            errorcode = getString(enumS.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "acf", idx, value) == true) {
            errorcode = getString(acf.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "asi", idx, value) == true) {
            errorcode = getString(asi.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "rlst", idx, value) == true) {
            errorcode = getString(rlst.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "sRlst", idx, value) == true) {
            errorcode = getString(sRlst.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }

    public String toXmlString( String blank ) {
		StringBuilder xml = new StringBuilder();
		xml.append ( blank+"   <pfx>" + getPfx() + "</pfx>\n") ;
		xml.append ( blank+"   <callType>" + getCallType() + "</callType>\n") ;
		xml.append ( blank+"   <min>" + getMin() + "</min>\n") ;
		xml.append ( blank+"   <max>" + getMax() + "</max>\n") ;
		xml.append ( blank+"   <svcType>" + getSvcType() + "</svcType>\n") ;
		xml.append ( blank+"   <pcha>" + getPcha() + "</pcha>\n") ;
		xml.append ( blank+"   <enumS>" + getEnumS() + "</enumS>\n") ;
		xml.append ( blank+"   <acf>" + getAcf() + "</acf>\n") ;
		xml.append ( blank+"   <asi>" + getAsi() + "</asi>\n") ;
		xml.append ( blank+"   <rlst>" + getRlst() + "</rlst>\n") ;
		xml.append ( blank+"   <sRlst>" + getSRlst() + "</sRlst>\n") ;

		return xml.toString();
    }
}
