package com.acromate.dataio.noms ;

import com.acromate.data.DataIO;
import com.acromate.util.Str;
import com.acromate.util.Logger;

public class CardCpuMemDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder emsId = new StringBuilder();
    private StringBuilder equipmentId = new StringBuilder();
    private StringBuilder collectionTime = new StringBuilder();
    private StringBuilder nodeId = new StringBuilder();
    private int    cpuAvg ;
    private int    memUsed ;
    private int    memFree ;

    public String getEmsId() { return emsId.toString() ; }
    public void   setEmsId( String emsId ) {
        this.emsId.delete(0,this.emsId.length());
        this.emsId.append(emsId) ;
    }

    public String getEquipmentId() { return equipmentId.toString() ; }
    public void   setEquipmentId( String equipmentId ) {
        this.equipmentId.delete(0,this.equipmentId.length());
        this.equipmentId.append(equipmentId) ;
    }

    public String getCollectionTime() { return collectionTime.toString() ; }
    public void   setCollectionTime( String collectionTime ) {
        this.collectionTime.delete(0,this.collectionTime.length());
        this.collectionTime.append(collectionTime) ;
    }

    public String getNodeId() { return nodeId.toString() ; }
    public void   setNodeId( String nodeId ) {
        this.nodeId.delete(0,this.nodeId.length());
        this.nodeId.append(nodeId) ;
    }

    public int    getCpuAvg() { return cpuAvg ; }
    public void   setCpuAvg( int cpuAvg ) { this.cpuAvg = cpuAvg ; }

    public int    getMemUsed() { return memUsed ; }
    public void   setMemUsed( int memUsed ) { this.memUsed = memUsed ; }

    public int    getMemFree() { return memFree ; }
    public void   setMemFree( int memFree ) { this.memFree = memFree ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "emsId".toLowerCase()) == true) {
            return setString(emsId, value);
        }
        if(compareFieldID(temp, "equipmentId".toLowerCase()) == true) {
            return setString(equipmentId, value);
        }
        if(compareFieldID(temp, "collectionTime".toLowerCase()) == true) {
            return setString(collectionTime, value);
        }
        if(compareFieldID(temp, "nodeId".toLowerCase()) == true) {
            return setString(nodeId, value);
        }
        if(compareFieldID(temp, "cpuAvg".toLowerCase()) == true) {
            if(!value.equals("")) cpuAvg = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "memUsed".toLowerCase()) == true) {
            if(!value.equals("")) memUsed = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "memFree".toLowerCase()) == true) {
            if(!value.equals("")) memFree = Str.CheckNullInt(value);
            return 0;
        }
        log.error("CardCpuMemDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "emsId", idx, value) == true) {
            errorcode = getString(emsId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "equipmentId", idx, value) == true) {
            errorcode = getString(equipmentId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "collectionTime", idx, value) == true) {
            errorcode = getString(collectionTime.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "nodeId", idx, value) == true) {
            errorcode = getString(nodeId.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "cpuAvg", idx, value) == true) {
            errorcode = getInteger(cpuAvg, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "memUsed", idx, value) == true) {
            errorcode = getInteger(memUsed, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "memFree", idx, value) == true) {
            errorcode = getInteger(memFree, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }

    public String toXmlString( String blank, String emsId, String eqId, String time ) {
		StringBuilder xml = new StringBuilder();

		xml.append ( blank+"   <emsId>" + emsId + "</emsId>\n") ;
		xml.append ( blank+"   <equipmentId>" + eqId + "</equipmentId>\n") ;
		xml.append ( blank+"   <collectionTime>" + time + "</collectionTime>\n") ;
		xml.append ( blank+"   <nodeId>" + getNodeId() + "</nodeId>\n") ;
		xml.append ( blank+"   <cpuAvg>" + getCpuAvg() + "</cpuAvg>\n") ;
		xml.append ( blank+"   <memUsed>" + getMemUsed() + "</memUsed>\n") ;
		xml.append ( blank+"   <memFree>" + getMemFree() + "</memFree>\n") ;

		return xml.toString();
    }
}
