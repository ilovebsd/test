package com.acromate.dataio.server.task.call ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class HandlerDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private boolean enable ;
    private StringBuilder handler = new StringBuilder();

    public boolean    getEnable() { return enable ; }
    public void   setEnable( boolean enable ) { this.enable = enable ; }

    public String getHandler() { return handler.toString() ; }
    public void   setHandler( String handler ) {
        this.handler.delete(0,this.handler.length());
        this.handler.append(handler) ;
    }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "enable".toLowerCase()) == true) {
            enable = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "handler".toLowerCase()) == true) {
            return setString(handler, value);
        }
        log.error("HandlerDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "enable", idx, value) == true) {
            errorcode = getString(Boolean.toString(enable), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "handler", idx, value) == true) {
            errorcode = getString(handler.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}

