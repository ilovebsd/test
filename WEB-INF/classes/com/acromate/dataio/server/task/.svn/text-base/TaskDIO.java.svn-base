package com.acromate.dataio.server.task ;

import com.acromate.data.DataIO;
import com.acromate.dataio.common.ParamListDIO;
import com.acromate.util.Str;
import com.acromate.util.Logger;

public class TaskDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private boolean enable ;
    private StringBuilder handler = new StringBuilder();
    private StringBuilder pattern = new StringBuilder();
    private StringBuilder name = new StringBuilder();
    private StringBuilder desc = new StringBuilder();
    private StringBuilder starttime = new StringBuilder();
    private StringBuilder endtime = new StringBuilder();
    private ParamListDIO param = new ParamListDIO();

    public boolean    getEnable() { return enable ; }
    public void   setEnable( boolean enable ) { this.enable = enable ; }

    public String getHandler() { return handler.toString() ; }
    public void   setHandler( String handler ) {
        this.handler.delete(0,this.handler.length());
        this.handler.append(handler) ;
    }

    public String getPattern() { return pattern.toString() ; }
    public void   setPattern( String pattern ) {
        this.pattern.delete(0,this.pattern.length());
        this.pattern.append(pattern) ;
    }

    public String getName() { return name.toString() ; }
    public void   setName( String name ) {
        this.name.delete(0,this.name.length());
        this.name.append(name) ;
    }

    public String getDesc() { return desc.toString() ; }
    public void   setDesc( String desc ) {
        this.desc.delete(0,this.desc.length());
        this.desc.append(desc) ;
    }

    public String getStarttime() { return starttime.toString() ; }
    public void   setStarttime( String starttime ) {
        this.starttime.delete(0,this.starttime.length());
        this.starttime.append(starttime) ;
    }

    public String getEndtime() { return endtime.toString() ; }
    public void   setEndtime( String endtime ) {
        this.endtime.delete(0,this.endtime.length());
        this.endtime.append(endtime) ;
    }

    public ParamListDIO    getParamDIO() { return param ; }
    public void   setParamDIO( ParamListDIO param ) { this.param = param ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "enable".toLowerCase()) == true) {
            enable = Str.CheckNullBoolean(value);
            return 0;
        }
        if(compareFieldID(temp, "handler".toLowerCase()) == true) {
            return setString(handler, value);
        }
        if(compareFieldID(temp, "pattern".toLowerCase()) == true) {
            return setString(pattern, value);
        }
        if(compareFieldID(temp, "name".toLowerCase()) == true) {
            return setString(name, value);
        }
        if(compareFieldID(temp, "desc".toLowerCase()) == true) {
            return setString(desc, value);
        }
        if(compareFieldID(temp, "starttime".toLowerCase()) == true) {
            return setString(starttime, value);
        }
        if(compareFieldID(temp, "endtime".toLowerCase()) == true) {
            return setString(endtime, value);
        }
        if(compareFieldID(temp, "param".toLowerCase()) == true) {
            return param.setParam(temp.toString(), value);
        }
        log.error("TaskDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "enable", idx, value) == true) {
            errorcode = getString(Boolean.toString(enable), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "handler", idx, value) == true) {
            errorcode = getString(handler.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "pattern", idx, value) == true) {
            errorcode = getString(pattern.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "name", idx, value) == true) {
            errorcode = getString(name.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "desc", idx, value) == true) {
            errorcode = getString(desc.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "starttime", idx, value) == true) {
            errorcode = getString(starttime.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "endtime", idx, value) == true) {
            errorcode = getString(endtime.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "param", idx, value) == true) {
            errorcode = param.getParam(fldAlias.toString(), value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
