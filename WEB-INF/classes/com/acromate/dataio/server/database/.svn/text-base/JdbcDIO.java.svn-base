package com.acromate.dataio.server.database ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class JdbcDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder driverName = new StringBuilder();
    private StringBuilder connString = new StringBuilder();
    private StringBuilder userName = new StringBuilder();
    private StringBuilder password = new StringBuilder();
    private int    maxConnection = 10 ;
    private int    connTimeOut = 5 ;

    public String getDriverName() { return driverName.toString() ; }
    public void   setDriverName( String driverName ) {
        this.driverName.delete(0,this.driverName.length());
        this.driverName.append(driverName) ;
    }

    public String getConnString() { return connString.toString() ; }
    public void   setConnString( String connString ) {
        this.connString.delete(0,this.connString.length());
        this.connString.append(connString) ;
    }

    public String getUserName() { return userName.toString() ; }
    public void   setUserName( String userName ) {
        this.userName.delete(0,this.userName.length());
        this.userName.append(userName) ;
    }

    public String getPassword() { return password.toString() ; }
    public void   setPassword( String password ) {
        this.password.delete(0,this.password.length());
        this.password.append(password) ;
    }

    public int    getMaxConnection() { return maxConnection ; }
    public void   setMaxConnection( int maxConnection ) { this.maxConnection = maxConnection ; }

    public int    getConnTimeOut() { return connTimeOut ; }
    public void   setConnTimeOut( int connTimeOut ) { this.connTimeOut = connTimeOut ; }


    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "driverName".toLowerCase()) == true) {
            return setString(driverName, value);
        }
        if(compareFieldID(temp, "connString".toLowerCase()) == true) {
            return setString(connString, value);
        }
        if(compareFieldID(temp, "userName".toLowerCase()) == true) {
            return setString(userName, value);
        }
        if(compareFieldID(temp, "password".toLowerCase()) == true) {
            return setString(password, value);
        }
        if(compareFieldID(temp, "maxConnection".toLowerCase()) == true) {
            if(!value.equals("")) maxConnection = Str.CheckNullInt(value);
            return 0;
        }
        if(compareFieldID(temp, "connTimeOut".toLowerCase()) == true) {
            if(!value.equals("")) connTimeOut = Str.CheckNullInt(value);
            return 0;
        }
        log.error("JdbcDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "driverName", idx, value) == true) {
            errorcode = getString(driverName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "connString", idx, value) == true) {
            errorcode = getString(connString.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "userName", idx, value) == true) {
            errorcode = getString(userName.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "password", idx, value) == true) {
            errorcode = getString(password.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "maxConnection", idx, value) == true) {
            errorcode = getInteger(maxConnection, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "connTimeOut", idx, value) == true) {
            errorcode = getInteger(connTimeOut, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}

