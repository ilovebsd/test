package com.acromate.dataio.server.router.lan ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;

public class RouterIpDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder ipAddress = new StringBuilder();
    private StringBuilder subnetMask = new StringBuilder();
    private StringBuilder macAddress = new StringBuilder();

    public String getIpAddress() { return ipAddress.toString() ; }
    public void   setIpAddress( String ipAddress ) {
        this.ipAddress.delete(0,this.ipAddress.length());
        this.ipAddress.append(ipAddress) ;
    }

    public String getSubnetMask() { return subnetMask.toString() ; }
    public void   setSubnetMask( String subnetMask ) {
        this.subnetMask.delete(0,this.subnetMask.length());
        this.subnetMask.append(subnetMask) ;
    }

    public String getMacAddress() { return macAddress.toString() ; }
    public void   setMacAddress( String macAddress ) {
        this.macAddress.delete(0,this.macAddress.length());
        this.macAddress.append(macAddress) ;
    }

    public DataIO getFieldObject(String field) {
        if(field != null && field.trim().length() > 0) {
        StringBuilder temp = new StringBuilder(field);
        }   return super.getFieldObject(field);
    }

    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "ipAddress".toLowerCase()) == true) {
        	this.ipAddress.delete(0,this.ipAddress.length());
            return setString(ipAddress, value);
        }
        if(compareFieldID(temp, "subnetMask".toLowerCase()) == true) {
        	this.subnetMask.delete(0,this.subnetMask.length());
            return setString(subnetMask, value);
        }
        if(compareFieldID(temp, "macAddress".toLowerCase()) == true) {
        	this.macAddress.delete(0,this.macAddress.length());
            return setString(macAddress, value);
        }
        log.error("RouterIpDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "ipAddress", idx, value) == true) {
            errorcode = getString(ipAddress.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "subnetMask", idx, value) == true) {
            errorcode = getString(subnetMask.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "macAddress", idx, value) == true) {
            errorcode = getString(macAddress.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
    public Object callMethod(String method, Object... argument) {
        Object result = null;
        if(method == null && method.length() <= 0) return result;
        if(method.equals("save") == true) {
            return save();
        }else if(method.equals("load") == true) {
            return load();
        }else if(method.equals("reboot") == true) {
            return reboot();
        }else if(method.equals("restart") == true) {
            return restart();
        }
        return result;
    }
    public boolean save(){return true;}
    public boolean load(){return true;}
	public boolean restart(){return true;}
	public boolean reboot(){return true;}
}
