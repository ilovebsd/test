package com.acromate.dataio.server.router.lan ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class DhcpUserDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder id = new StringBuilder();
    private StringBuilder ipAddress = new StringBuilder();
    private StringBuilder macAddress = new StringBuilder();
    private int    ipType ;

    public String getId() { return id.toString() ; }
    public void   setId( String id ) {
        this.id.delete(0,this.id.length());
        this.id.append(id) ;
    }

    public String getIpAddress() { return ipAddress.toString() ; }
    public void   setIpAddress( String ipAddress ) {
        this.ipAddress.delete(0,this.ipAddress.length());
        this.ipAddress.append(ipAddress) ;
    }

    public String getMacAddress() { return macAddress.toString() ; }
    public void   setMacAddress( String macAddress ) {
        this.macAddress.delete(0,this.macAddress.length());
        this.macAddress.append(macAddress) ;
    }

    public int    getIpType() { return ipType ; }
    public void   setIpType( int ipType ) { this.ipType = ipType ; }

    public DataIO getFieldObject(String field) {
        if(field != null && field.trim().length() > 0) {
        StringBuilder temp = new StringBuilder(field);
        }   return super.getFieldObject(field);
    }

    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "id".toLowerCase()) == true) {
        	 this.id.delete(0,this.id.length());
            return setString(id, value);
        }
        if(compareFieldID(temp, "ipAddress".toLowerCase()) == true) {
        	this.ipAddress.delete(0,this.ipAddress.length());
            return setString(ipAddress, value);
        }
        if(compareFieldID(temp, "macAddress".toLowerCase()) == true) {
        	this.macAddress.delete(0,this.macAddress.length());
            return setString(macAddress, value);
        }
        if(compareFieldID(temp, "ipType".toLowerCase()) == true) {
            if(!value.equals("")) ipType = Str.CheckNullInt(value);
            return 0;
        }
        log.error("DhcpUserDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "id", idx, value) == true) {
            errorcode = getString(id.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "ipAddress", idx, value) == true) {
            errorcode = getString(ipAddress.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "macAddress", idx, value) == true) {
            errorcode = getString(macAddress.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "ipType", idx, value) == true) {
            errorcode = getInteger(ipType, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
