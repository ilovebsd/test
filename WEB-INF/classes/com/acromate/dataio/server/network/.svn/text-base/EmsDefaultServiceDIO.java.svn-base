package com.acromate.dataio.server.network ;

import com.acromate.util.Logger;
import com.acromate.data.DataIO;
import com.acromate.util.Str;

public class EmsDefaultServiceDIO extends DataIO {
    private Logger log = Logger.getLogger(this.getClass());

    private int    errorcode;
    private StringBuilder defaultGroupID = new StringBuilder();
    private StringBuilder defaultClusterID = new StringBuilder();
    private StringBuilder defaultSystemID = new StringBuilder();
    private StringBuilder defaultHostAddr = new StringBuilder();
    private int    defaultRmiPort ;

    public String getDefaultGroupID() { return defaultGroupID.toString() ; }
    public void   setDefaultGroupID( String defaultGroupID ) {
        this.defaultGroupID.delete(0,this.defaultGroupID.length());
        this.defaultGroupID.append(defaultGroupID) ;
    }

    public String getDefaultClusterID() { return defaultClusterID.toString() ; }
    public void   setDefaultClusterID( String defaultClusterID ) {
        this.defaultClusterID.delete(0,this.defaultClusterID.length());
        this.defaultClusterID.append(defaultClusterID) ;
    }

    public String getDefaultSystemID() { return defaultSystemID.toString() ; }
    public void   setDefaultSystemID( String defaultSystemID ) {
        this.defaultSystemID.delete(0,this.defaultSystemID.length());
        this.defaultSystemID.append(defaultSystemID) ;
    }

    public String getDefaultHostAddr() { return defaultHostAddr.toString() ; }
    public void   setDefaultHostAddr( String defaultHostAddr ) {
        this.defaultHostAddr.delete(0,this.defaultHostAddr.length());
        this.defaultHostAddr.append(defaultHostAddr) ;
    }

    public int    getDefaultRmiPort() { return defaultRmiPort ; }
    public void   setDefaultRmiPort( int defaultRmiPort ) { this.defaultRmiPort = defaultRmiPort ; }

    public int    getServerRmiObjectPort() {
        if (defaultRmiPort == 1099) return 2099;
        else return defaultRmiPort + 1;
    }

    public String getDefaultSystemPath(){
        StringBuilder script = new StringBuilder();
        script.append("(").append(defaultGroupID.toString()).append(")");
        script.append("(").append(defaultClusterID.toString()).append(")");
        script.append("(").append(defaultSystemID.toString()).append(")");
        return script.toString();
    }

    protected int setFieldData(String field, String value) {
        StringBuilder temp = new StringBuilder(field.toLowerCase());
        if(compareFieldID(temp, "defaultGroupID".toLowerCase()) == true) {
            return setString(defaultGroupID, value);
        }
        if(compareFieldID(temp, "defaultClusterID".toLowerCase()) == true) {
            return setString(defaultClusterID, value);
        }
        if(compareFieldID(temp, "defaultSystemID".toLowerCase()) == true) {
            return setString(defaultSystemID, value);
        }
        if(compareFieldID(temp, "defaultHostAddr".toLowerCase()) == true) {
            return setString(defaultHostAddr, value);
        }
        if(compareFieldID(temp, "defaultRmiPort".toLowerCase()) == true) {
            if(!value.equals("")) defaultRmiPort = Str.CheckNullInt(value);
            return 0;
        }
        log.error("EmsDefaultServiceDIO - Not founded field :" + field);
        return 0;
    }

    protected int getFieldData(String field, Index idx, StringBuilder value) {
        boolean resultVal = false;
        StringBuilder fldAlias;
        if(field != null && !field.equals("")) resultVal = true;
        if(field == null) {
            fldAlias = new StringBuilder(); fldAlias.append("");
        } else {
           fldAlias  = new StringBuilder(); fldAlias.append(field);
        }
        if(compareFieldID(fldAlias, "defaultGroupID", idx, value) == true) {
            errorcode = getString(defaultGroupID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "defaultClusterID", idx, value) == true) {
            errorcode = getString(defaultClusterID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "defaultSystemID", idx, value) == true) {
            errorcode = getString(defaultSystemID.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "defaultHostAddr", idx, value) == true) {
            errorcode = getString(defaultHostAddr.toString(), value, !resultVal);
            if(resultVal || errorcode < 0) return errorcode;
        }
        if(compareFieldID(fldAlias, "defaultRmiPort", idx, value) == true) {
            errorcode = getInteger(defaultRmiPort, value);
            if(resultVal || errorcode < 0) return errorcode;
        }
        return(0);
    }
}
