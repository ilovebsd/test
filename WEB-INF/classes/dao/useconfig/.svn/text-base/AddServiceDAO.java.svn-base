package dao.useconfig;

import acromate.*;

import java.io.File;
import java.sql.ResultSet;
import java.util.Vector;
import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
import acromate.common.util.StringUtil;
import acromate.common.StaticString;
import business.CommonData;
import business.LogHistory;

public class AddServiceDAO {

    public AddServiceDAO() {}   
    
    public boolean sendNumberSave(String hiBlockNumber, String hiDescription, String hiBlockType){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
	    	int 		nResult 	= 0;
//	    	String 		startprefix	= hiBlockNumber;	// E164
//	    	String 		description	= hiDescription;	// E164
	    	String 		blockType	= hiBlockType;		// E164
//	    	String		endprefix	= "";
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** table_E164 수정 ********/            
            String temp_CallerService = "";
            String callerService = "";            
    		sql = "\n SELECT c.callerservice ";
    		sql = sql + "\n  FROM table_dept a, table_subscriber b, table_e164 c "; 
    		sql = sql + "\n  WHERE a.deptid = b.department "; 
    		sql = sql + "\n    AND a.deptid != a.parentid "; 
    		sql = sql + "\n    AND c.e164 = b.phonenum ";
    		sql = sql + "\n  Group By c.callerservice ";
    		sql = sql + "\n  Order By c.callerservice ";            
            rs = statement.executeQuery(sql);
            //System.out.println("1:"+sql);
            if (rs.next()) temp_CallerService = rs.getString(1);
            rs.close();

            if(blockType.equals("0")){
            	callerService = temp_CallerService.substring(0, 1) + "0" + temp_CallerService.substring(2, 64);
            }else if(blockType.equals("1")){
            	callerService = temp_CallerService.substring(0, 1) + "1" + temp_CallerService.substring(2, 64);
            }else if(blockType.equals("3")){
            	callerService = temp_CallerService.substring(0, 1) + "3" + temp_CallerService.substring(2, 64);
            }
            
            sql = "\n Update table_E164 set callerservice  = '" + callerService + "' ";
            sql = sql + "\n  WHERE e164 IN (SELECT b.phonenum FROM table_dept a, table_subscriber b, table_e164 c "; 
            sql = sql + "\n  				 WHERE a.deptid = b.department "; 
            sql = sql + "\n  				   AND a.deptid != a.parentid "; 
            sql = sql + "\n  				   AND c.e164 = b.phonenum)";
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[발신제한 등록] '","[Auth Properties Error] '")+l.x("'발신 제한 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

            if(blockType.equals("0") || blockType.equals("1")){
            	sql = " Delete From table_e164block Where inoutflag = 0 ";
            	//System.out.println("3:"+sql);
            	statement.executeUpdate(sql);
            }
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
    }

    public boolean sendPrefixDelete(String deleteStr){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 		= StringUtil.getParser(deleteStr, "");
			String		blockPrefixNo 	= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					String[] dataStr = StringUtil.getParser(blockStr[k], "|");
					if(dataStr != null){
						blockPrefixNo   = dataStr[0];
			            
			            /***** Table_E164block 삭제 ********/
			            sql = "DELETE FROM Table_E164block WHERE startprefix = '"+blockPrefixNo+"' And inoutflag = 0 " ;
			            //System.out.println("1:"+sql);
			            statement.executeUpdate(sql);
					}
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean sendPrefixEdit(String hiBlockNumber, String hiDescription){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** Table_E164block 수정 ********/
            sql = "Update Table_E164block Set description = '"+hiDescription+"' WHERE startprefix = '"+hiBlockNumber+"' And inoutflag = 0 " ;
            //System.out.println("1:"+sql);
            statement.executeUpdate(sql);
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
   
    public boolean virtualcNumberSave(String virtualcType1, String virtualcType2, String virtualcNumber, String e164){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
	    	int 		nResult 	= 0;
	    	String 		blockType	= virtualcType1;
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** table_E164 수정 ********/            
            String temp_CallerService = "";
            String callerService = "";            
    		sql = "SELECT a.callerservice ";
    		sql = sql + " FROM table_e164 a, table_subscriber b "; 
    		sql = sql + " WHERE a.e164 = b.phonenum "; 
    		sql = sql + " Group By a.callerservice ";
    		sql = sql + " Order By a.callerservice ";
            
            rs = statement.executeQuery(sql);
            //System.out.println("1:"+sql);
            if (rs.next()) temp_CallerService = rs.getString(1);
            rs.close();

            if(blockType.equals("0")){
            	callerService = temp_CallerService.substring(0, 2) + "0" + temp_CallerService.substring(3, 64);
            }else if(blockType.equals("1")){
            	callerService = temp_CallerService.substring(0, 2) + "1" + temp_CallerService.substring(3, 64);
            }else if(blockType.equals("2")){
            	callerService = temp_CallerService.substring(0, 2) + "2" + temp_CallerService.substring(3, 64);
            }
            
            if(blockType.equals("2")){
            	if(virtualcType2.equals("A")){
                	sql = "\n Update table_E164 set callerservice  = '" + callerService + "', virtualcid = '' ";
                    sql = sql + "\n  WHERE e164 IN (Select a.e164 From table_e164 a, table_subscriber b "; 
                    sql = sql + "\n  				 Where a.e164 = b.phonenum)";
            	}else{
	            	sql = "\n Update table_E164 set callerservice  = '" + callerService + "' ";
	            	sql = sql + "\n  WHERE e164 = '" + e164 + "'";
            	}
            }else{
            	sql = "\n Update table_E164 set callerservice  = '" + callerService + "', virtualcid = '' ";
                sql = sql + "\n  WHERE e164 IN (Select a.e164 From table_e164 a, table_subscriber b "; 
                sql = sql + "\n  				 Where a.e164 = b.phonenum)";
            }
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

            if(blockType.equals("2")){
            	if(virtualcType2.equals("A")){
                    sql = "\n Update table_E164 set virtualcid  = '" + virtualcNumber + "' ";
                    sql = sql + "\n  WHERE e164 IN (Select a.e164 From table_e164 a, table_subscriber b "; 
                    sql = sql + "\n  				 Where a.e164 = b.phonenum)";
                    //System.out.println("3:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                            		
            	}
            	
            	if(virtualcType2.equals("B")){
                    sql = "\n Update table_E164 set virtualcid  = '" + virtualcNumber + "' ";
                    sql = sql + "\n  WHERE e164 = '" + e164 + "'";
                    //System.out.println("4:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                            		
            	}            	
            }

            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
    }
    
    public boolean virtualCidDelete(String deleteStr){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
		            /***** table_E164 수정 ********/            
		            String temp_CallerService = "";
		            String callerService = "";            
		    		
		            sql = "SELECT callerservice FROM table_e164 WHERE e164 = '" +e164+"' ";		            
		            rs = statement.executeQuery(sql);
		            //System.out.println("1:"+sql);
		            if (rs.next()) temp_CallerService = rs.getString(1);
		            rs.close();

		            callerService = temp_CallerService.substring(0, 2) + "0" + temp_CallerService.substring(3, 64);
					
                	sql = "\n Update table_E164 set callerservice  = '" + callerService + "', virtualcid = '' ";
	            	sql = sql + "\n  WHERE e164 = '" + e164 + "'";
	            	//System.out.println("2:"+sql);
		            statement.executeUpdate(sql);
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean newVirtualcNumberSave(String virtualcType1, String virtualcType2, String displayNumber, String fromNumber, String e164){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	
    	try {
	    	int 		nResult 	= 0;
	    	String 		userparm	= "";
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 가상발신번호 모드 체크
	    	if("".equals(displayNumber)){
	    		if("".equals(fromNumber)){
	    			userparm = "0, "+displayNumber+", "+fromNumber;
	    		}else{
	    			userparm = "2, "+displayNumber+","+fromNumber;
	    		}
	    	}else{
	    		if("".equals(fromNumber)){
	    			userparm = "1,"+displayNumber+", "+fromNumber;
	    		}else{
	    			userparm = "3,"+displayNumber+","+fromNumber;
	    		}
	    	}
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	if("0".equals(virtualcType1)){
	    		// 가상번호 사용안함
            	sql = "\n Delete From table_featureservice WHERE serviceno  = '5431' ";
                nResult = statement.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                            	
	    	}else{
	    		if("A".equals(virtualcType2)){
	    			// 가상번호 일괄처리
	                sql = "Select a.e164 From table_e164 a, table_subscriber b Where a.e164 = b.phonenum ";
	                rs = statement.executeQuery(sql);
	                while(rs.next()){
	                    vecTmpUserE164.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
	                }
	                rs.close();
	                
	            	sql = "\n Delete From table_featureservice WHERE serviceno  = '5431' ";
	                nResult = statement.executeUpdate(sql);
	                if (nResult < 0){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	                
	                int 	nTmp 		= vecTmpUserE164.size();
	                String	strE164 	= ""; 
	                for(int i=0; i < nTmp; i++){
	                	strE164 = (String)vecTmpUserE164.get(i);
		    			
	                	int maxId = getMaxID(statement, strE164);
	                	
	                	sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "\n  values('" + strE164 + "', '5431', "+ (maxId + 1) +", '" + userparm + "', 2, 1, 0, 2)";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	                }
	    		}else{
	    			// 가상번호 내선번호별 처리
	            	sql = "\n Delete From table_featureservice WHERE e164 = '" + e164 + "' And serviceno = '5431' ";
	                nResult = statement.executeUpdate(sql);
	                if (nResult < 0){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	                
	                int maxId = getMaxID(statement, e164);
	                
	    			sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
	    			sql = sql + "\n  values('" + e164 + "', '5431', "+ (maxId + 1) +", '" + userparm + "', 2, 1, 0, 2)";
	    			nResult = statement.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[가상발신 번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	    		}	    		
	    	}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
    }

    public boolean newVirtualCidDelete(String deleteStr){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
                	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5431' ";
		            statement.executeUpdate(sql);
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    
	public int getMaxID(DataStatement stmt, String e164) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(priority),0) " ;
		sql = sql +  "\n   FROM table_featureservice ";
		sql = sql +  "\n  WHERE e164      = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	System.out.println("sql :"+ sql);
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }
    
	// 통화연결음 일괄 사용안함
    public int setDefaultMRBT(DataStatement stmt) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5011 ";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
                if(nTmp>0){
            			// 트랜잭션 시작
    					stmt.stxTransaction();
    					
            			sql  = "\n DELETE FROM table_featureservice  " ;
	            		sql += "\n  WHERE serviceno = 5011 ";
	              
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult >= 1){
	                    	String[]	varTmp;
	                    	String		strTmp 	= "";
	                        String		number1 = "";
	                        String		number2 = "";
	                    	
	                    	for(int i=0; i < nTmp; i++){
	                        	strTmp 	= (String)vecTmp.get(i);
	                        	varTmp 	= strTmp.split("[|]");
	                        	number1	= varTmp[0];
	                        	number2	= varTmp[1];	                        	
	                        	
		                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
		                		sql += "\n  WHERE e164 = '" + number1 + "' ";
		                		sql += "\n  ORDER BY priority ";	                    	

		                        rs2 = stmt.executeQuery(sql);
		                        vecTmp2.clear();
		                        while(rs2.next()){
			    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
			    	            }	                        
		                        rs2.close();
		                        
		                        
		                        // 사용자 지정 연결음 table_callermrbt 테이블, 파일 삭제
	                        	sql  = "\n SELECT filename FROM table_callermrbt ";
		                		sql += "\n  WHERE e164 = '" + number1 + "' ";
		                        rs3 = stmt.executeQuery(sql);
		                        
		                        while (rs3.next()) {
		                        	tempFile = new File(StaticString.userWavPath+"/"+rs3.getString("filename"));
			                    	tempFile.delete();
		                        }
		                        rs3.close();
		                        
		                        sql  = "\n DELETE FROM table_callermrbt WHERE e164 = '" + number1 + "' ";
			                    nResult = stmt.executeUpdate(sql);
			                    
			                    
			                    // 통화 연결음 파일 삭제			                    
			                    String[] param = StringUtil.getParser(number2, ",");
	                            if(param.length == 3){
	                            	dbUserParam = param[2];
	                            }
	                            int nameChk = wavFileChk(stmt, dbUserParam);
	                        	if(nameChk==0){
		                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
			                    	tempFile.delete();	                            
	                        	}
		                    	
	                        	
		                        int 		nTmp2	= vecTmp2.size();
		                        int 		cnt 	= 1;
		                        String		strTmp2	= "";
		                        
		                        for(int k=0; k < nTmp2; k++){
		                        	strTmp2 = (String)vecTmp2.get(k);
		                        	sql  = "\n UPDATE table_featureservice  " ;
		    	                    sql += "\n    Set priority  = " + cnt;
		    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
		    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
		    	            		nResult = stmt.executeUpdate(sql);
		    	                    cnt++;
		                        }
		            			System.out.println("삭제  성공");
		            			returnValue = 1;		                    	
	                    	}
	                    }else{
	                        System.out.println("삭제  실패");
	                        returnValue = 0;
	                    }
	                    
	                    if (stmt != null)
							stmt.endTransaction(true);
                }
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }
	
	public int wavFileChk(DataStatement stmt, String filename) {
		int cnt = 0 ;
		String strTmp = "%,"+filename;
		
		String sql = "\n SELECT count(*) FROM table_featureservice " ;
		sql = sql +  "\n  WHERE userparam like '" + strTmp + "' ";
		sql = sql +  "\n     OR userparam = '" + filename + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) cnt = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return cnt;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return cnt;
    }

	public int wavMRBTFileChk(DataStatement stmt, String filename) {
		int cnt = 0 ;
		
		String sql = "\n SELECT count(*) FROM table_addmrbt " ;
		sql = sql +  "\n  WHERE sound = '" + filename + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) cnt = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return cnt;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return cnt;
    }
	
	// 통화연결음 일괄 사용함
    public int setUserMRBT(DataStatement stmt, String strParm) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5011 ";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
        		// 트랜잭션 시작
				stmt.stxTransaction();
                
                if(nTmp>0){
            		// 사용중인 통화연결음이 있으면 삭제 처리
        			sql  = "\n DELETE FROM table_featureservice  " ;
            		sql += "\n  WHERE serviceno = 5011 ";
              
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = stmt.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
	                        // 사용자 지정 연결음 table_callermrbt 테이블, 파일 삭제
                        	sql  = "\n SELECT filename FROM table_callermrbt ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                        rs3 = stmt.executeQuery(sql);
	                        
	                        while (rs3.next()) {
	                        	tempFile = new File(StaticString.userWavPath+"/"+rs3.getString("filename"));
		                    	tempFile.delete();
	                        }
	                        rs3.close();
	                        
	                        sql  = "\n DELETE FROM table_callermrbt WHERE e164 = '" + number1 + "' ";
		                    nResult = stmt.executeUpdate(sql);
		                    
		                    
		                    // 통화 연결음 파일 삭제			                    
		                    String[] param = StringUtil.getParser(number2, ",");
                            if(param.length == 3){
                            	dbUserParam = param[2];
                            }
                            int nameChk = wavFileChk(stmt, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
	                    	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int k=0; k < nTmp2; k++){
	                        	strTmp2 = (String)vecTmp2.get(k);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = stmt.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
	            			returnValue = 1;		                    	
                    	}
                    }else{
                        System.out.println("삭제  실패");
                        returnValue = 0;
                    }
                
                }
                
            	// 사용중인 통화연결음이 없으니 통화연결음 일괄 처리
            	sql  = "\n SELECT e164 FROM table_featureservice  group by e164 " ;
        		sql += "\n order by e164 ";
        		
                rs = stmt.executeQuery(sql);
                
                vecTmp3.clear();
                while(rs.next()){
	            	vecTmp3.add(WebUtil.CheckNullString(rs.getString("e164")));            	
	            }	                        
                rs.close();
                
                if (rs != null) 
                	rs.close();

                int 	nCnt 	= vecTmp3.size();
                String	strE164 = "";
                
                if(nCnt>0){
                	for(int h=0; h < nCnt; h++){
                    	strE164		= (String)vecTmp3.get(h);                    	
                    	int maxId2 	= getMaxID(stmt, strE164);
	                	sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "\n  values('" + strE164 + "', '5011', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
		    			nResult = stmt.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[일괄 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'일괄 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                    	
                	}
                	
        			System.out.println("일괄 통화연결음 저장 성공");
        			returnValue = 1;
                }else{
        			System.out.println("일괄 통화연결음 저장할 E164가 없습니다.");
        			returnValue = 0;
                }
                if (stmt != null)
					stmt.endTransaction(true);                
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }

	// 내선별 통화연결음 사용함
    public int setE164MRBT(DataStatement stmt, String strParm, String strE164) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5011 AND e164 = '" + strE164 +"'";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
        		// 트랜잭션 시작
				stmt.stxTransaction();
                
                if(nTmp>0){
            		// 사용중인 통화연결음이 있으면 삭제 처리
        			sql  = "\n DELETE FROM table_featureservice  " ;
            		sql += "\n  WHERE serviceno = 5011 AND e164 = '" + strE164 +"'";
              
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = stmt.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
		                    // 통화 연결음 파일 삭제			                    
		                    String[] param = StringUtil.getParser(number2, ",");
                            if(param.length == 3){
                            	dbUserParam = param[2];
                            }
                            int nameChk = wavFileChk(stmt, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
	                    	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int k=0; k < nTmp2; k++){
	                        	strTmp2 = (String)vecTmp2.get(k);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = stmt.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
	            			returnValue = 1;		                    	
                    	}
                    }else{
                        System.out.println("삭제  실패");
                        returnValue = 0;
                    }
                
                }
                
            	// 사용중인 통화연결음이 없으니 내선별 통화연결음 처리
            	int maxId2 	= getMaxID(stmt, strE164);
            	sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
    			sql = sql + "\n  values('" + strE164 + "', '5011', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
    			nResult = stmt.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[내선별 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'내선별 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                    	
                	
    			System.out.println("내선별 통화연결음 저장 성공");
    			returnValue = 1;

        		if (stmt != null)
					stmt.endTransaction(true);                
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }
    
    public boolean e164MRBTDelete(String deleteStr){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
	        String    	dbUserParam = "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
	            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5011 AND e164 = '" + e164 +"'";
	        		
	                rs = statement.executeQuery(sql);
		            while(rs.next()){
		            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
		            }	                        
	                rs.close();
	                int 		nTmp	= vecTmp.size();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (nTmp >= 1){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5011' ";
                    	statement.executeUpdate(sql);
                    	
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = statement.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
	                        // 사용자 지정 연결음 table_callermrbt 테이블, 파일 삭제
                        	sql  = "\n SELECT filename FROM table_callermrbt ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                        rs3 = statement.executeQuery(sql);
	                        
	                        while (rs3.next()) {
	                        	tempFile = new File(StaticString.userWavPath+"/"+rs3.getString("filename"));
		                    	tempFile.delete();
	                        }
	                        rs3.close();
	                        
	                        sql  = "\n DELETE FROM table_callermrbt WHERE e164 = '" + number1 + "' ";
		                    nResult = statement.executeUpdate(sql);
		                    
		                    
		                    // 통화 연결음 파일 삭제			                    
		                    String[] param = StringUtil.getParser(number2, ",");
                            if(param.length == 3){
                            	dbUserParam = param[2];
                            }
                            int nameChk = wavFileChk(statement, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
                        	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int j=0; j < nTmp2; j++){
	                        	strTmp2 = (String)vecTmp2.get(j);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = statement.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
                    	}
                    }                	
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    
    public boolean e164NewMRBTDelete(String deleteStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
//    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5011 AND e164 = '" + e164 +"'";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5011' ";
                    	statement.executeUpdate(sql);
                    	
	                	sql  = "\n SELECT serviceno FROM table_featureservice ";
	            		sql += "\n  WHERE e164 = '" + e164 + "' ";
	            		sql += "\n  ORDER BY priority ";	                    	
	
	                    rs2 = statement.executeQuery(sql);
	                    vecTmp2.clear();
	                    while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
	                    rs2.close();
	                    
	                    int 		nTmp2	= vecTmp2.size();
	                    int 		cnt2 	= 1;
	                    String		strTmp2	= "";
	                    
	                    if(nTmp2>0){
		                    for(int j=0; j < nTmp2; j++){
		                    	strTmp2 = (String)vecTmp2.get(j);
		                    	sql  = "\n UPDATE table_featureservice  " ;
			                    sql += "\n    Set priority  = " + cnt2;
			            		sql += "\n  WHERE e164      = '" + e164 + "' ";
			            		sql += "\n    AND serviceno = " + strTmp2 + " ";
			            		nResult = statement.executeUpdate(sql);
			                    cnt2++;
		                    }
	                    }
	                    
	                    // 사용자 지정 연결음 table_callermrbt 테이블, 파일 삭제
	                	sql  = "\n SELECT filename FROM table_callermrbt ";
	            		sql += "\n  WHERE e164 = '" + e164 + "' ";
	                    rs3 = statement.executeQuery(sql);
	                    
	                    while (rs3.next()) {
	                    	tempFile = new File(StaticString.userWavPath+"/"+rs3.getString("filename"));
	                    	tempFile.delete();
	                    }
	                    rs3.close();
	                    
	                    sql  = "\n DELETE FROM table_callermrbt WHERE e164 = '" + e164 + "' ";
	                    nResult = statement.executeUpdate(sql);
	                    
	                    // addmrbt, 통화 연결음 파일 삭제			                    
		            	sql  = " SELECT sound FROM table_addmrbt WHERE e164 = '" + e164 +"' ";
		        		
	                    rs2 = statement.executeQuery(sql);
	                    vecTmp.clear();
	                    while(rs2.next()){
	    	            	vecTmp.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
	                    rs2.close();
	                    
	                    int cnt3	= vecTmp.size();	                    
		                if (cnt3 > 0){
	                    	sql = " Delete From table_addmrbt WHERE e164 = '" + e164 +"' ";
	                    	statement.executeUpdate(sql);
	                    	
	                        for(int j=0; j < cnt3; j++){
	                        	fileName = (String)vecTmp.get(j);
	                        	
			                    int nameChk = wavMRBTFileChk(statement, fileName);
			                	if(nameChk==0){
			                        tempFile = new File(StaticString.userWavPath+"/"+fileName);
			                    	tempFile.delete();	                            
			                	}		
	                        }
	                    }
		                
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|일반통화 연결음 ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제  성공");
                    }                	
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    
	// 통화대기음 일괄 사용안함
    public int setDefaultMOH(DataStatement stmt) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5031 ";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
                if(nTmp>0){
            			// 트랜잭션 시작
    					stmt.stxTransaction();
    					
            			sql  = "\n DELETE FROM table_featureservice  " ;
	            		sql += "\n  WHERE serviceno = 5031 ";
	              
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult >= 1){
	                    	String[]	varTmp;
	                    	String		strTmp 	= "";
	                        String		number1 = "";
	                        String		number2 = "";
	                    	
	                    	for(int i=0; i < nTmp; i++){
	                        	strTmp 	= (String)vecTmp.get(i);
	                        	varTmp 	= strTmp.split("[|]");
	                        	number1	= varTmp[0];
	                        	number2	= varTmp[1];	                        	
	                        	
		                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
		                		sql += "\n  WHERE e164 = '" + number1 + "' ";
		                		sql += "\n  ORDER BY priority ";	                    	

		                        rs2 = stmt.executeQuery(sql);
		                        vecTmp2.clear();
		                        while(rs2.next()){
			    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
			    	            }	                        
		                        rs2.close();
		                        
		                        
			                    // 통화 연결음 파일 삭제			                    
//			                    String[] param = StringUtil.getParser(number2, ",");
//	                            if(param.length == 3){
//	                            	dbUserParam = param[2];
//	                            }
	                            dbUserParam = number2;
	                            int nameChk = wavFileChk(stmt, dbUserParam);
	                        	if(nameChk==0){
		                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
			                    	tempFile.delete();	                            
	                        	}
		                    	
	                        	
		                        int 		nTmp2	= vecTmp2.size();
		                        int 		cnt 	= 1;
		                        String		strTmp2	= "";
		                        
		                        for(int k=0; k < nTmp2; k++){
		                        	strTmp2 = (String)vecTmp2.get(k);
		                        	sql  = "\n UPDATE table_featureservice  " ;
		    	                    sql += "\n    Set priority  = " + cnt;
		    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
		    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
		    	            		nResult = stmt.executeUpdate(sql);
		    	                    cnt++;
		                        }
		            			System.out.println("삭제  성공");
		            			returnValue = 1;		                    	
	                    	}
	                    }else{
	                        System.out.println("삭제  실패");
	                        returnValue = 0;
	                    }
	                    
	                    if (stmt != null)
							stmt.endTransaction(true);
                }
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }
    
	// 통화대기음 일괄 사용함
    public int setUserMOH(DataStatement stmt, String strParm) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5031 ";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
        		// 트랜잭션 시작
				stmt.stxTransaction();
                
                if(nTmp>0){
            		// 사용중인 통화연결음이 있으면 삭제 처리
        			sql  = "\n DELETE FROM table_featureservice  " ;
            		sql += "\n  WHERE serviceno = 5031 ";
              
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = stmt.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
		                    // 통화 대기음 파일 삭제			                    
//		                    String[] param = StringUtil.getParser(number2, ",");
//                            if(param.length == 3){
//                            	dbUserParam = param[2];
//                            }
                            dbUserParam = number2;
                            int nameChk = wavFileChk(stmt, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
	                    	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int k=0; k < nTmp2; k++){
	                        	strTmp2 = (String)vecTmp2.get(k);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = stmt.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
	            			returnValue = 1;		                    	
                    	}
                    }else{
                        System.out.println("삭제  실패");
                        returnValue = 0;
                    }
                
                }
                
            	// 사용중인 통화대기음이 없으니 통화대기음 일괄 처리
            	sql  = "\n SELECT e164 FROM table_featureservice  group by e164 " ;
        		sql += "\n order by e164 ";
        		
                rs = stmt.executeQuery(sql);
                
                vecTmp3.clear();
                while(rs.next()){
	            	vecTmp3.add(WebUtil.CheckNullString(rs.getString("e164")));            	
	            }	                        
                rs.close();
                
                if (rs != null) 
                	rs.close();

                int 	nCnt 	= vecTmp3.size();
                String	strE164 = "";
                
                if(nCnt>0){
                	for(int h=0; h < nCnt; h++){
                    	strE164		= (String)vecTmp3.get(h);                    	
                    	int maxId2 	= getMaxID(stmt, strE164);
	                	sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "\n  values('" + strE164 + "', '5031', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
		    			nResult = stmt.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[일괄 통화대기음 등록] '","[Auth Properties Error] '")+l.x("'일괄 통화대기음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                    	
                	}
                	
        			System.out.println("일괄 통화대기음 저장 성공");
        			returnValue = 1;
                }else{
        			System.out.println("일괄 통화대기음 저장할 E164가 없습니다.");
        			returnValue = 0;
                }
                if (stmt != null)
					stmt.endTransaction(true);                
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }

	// 내선별 통화대기음 사용함
    public int setE164MOH(DataStatement stmt, String strParm, String strE164) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        Vector 	  vecTmp2 	  = new Vector();
        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
        		sql += "\n  WHERE serviceno = 5031 AND e164 = '" + strE164 +"'";
        		
                rs = stmt.executeQuery(sql);
	            while(rs.next()){
	            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
	            }	                        
                rs.close();
                int 		nTmp	= vecTmp.size();
                
                if (rs != null) 
                	rs.close();
                
        		// 트랜잭션 시작
				stmt.stxTransaction();
                
                if(nTmp>0){
            		// 사용중인 통화 대기음이 있으면 삭제 처리
        			sql  = "\n DELETE FROM table_featureservice  " ;
            		sql += "\n  WHERE serviceno = 5031 AND e164 = '" + strE164 +"'";
              
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = stmt.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
		                    // 통화 대기음 파일 삭제			                    
//		                    String[] param = StringUtil.getParser(number2, ",");
//                            if(param.length == 3){
//                            	dbUserParam = param[2];
//                            }
                            dbUserParam = number2;
                            int nameChk = wavFileChk(stmt, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
	                    	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int k=0; k < nTmp2; k++){
	                        	strTmp2 = (String)vecTmp2.get(k);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = stmt.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
	            			returnValue = 1;		                    	
                    	}
                    }else{
                        System.out.println("삭제  실패");
                        returnValue = 0;
                    }
                
                }
                
            	// 사용중인 통화 대기음이 없으니 내선별 통화 대기음 처리
            	int maxId2 	= getMaxID(stmt, strE164);
            	sql = "\n insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
    			sql = sql + "\n  values('" + strE164 + "', '5031', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
    			nResult = stmt.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[내선별 통화대기음 등록] '","[Auth Properties Error] '")+l.x("'내선별 통화대기음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                    	
                	
    			System.out.println("내선별 통화대기음 저장 성공");
    			returnValue = 1;

        		if (stmt != null)
					stmt.endTransaction(true);                
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }

    public boolean e164MOHDelete(String deleteStr){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
	        String    	dbUserParam = "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
	            	sql  = "\n SELECT e164, userparam FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5031 AND e164 = '" + e164 +"'";
	        		
	                rs = statement.executeQuery(sql);
		            while(rs.next()){
		            	vecTmp.add(WebUtil.CheckNullString(rs.getString("e164")+"|"+rs.getString("userparam")));            	
		            }	                        
	                rs.close();
	                int 		nTmp	= vecTmp.size();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (nTmp >= 1){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5031' ";
                    	statement.executeUpdate(sql);
                    	
                    	String[]	varTmp;
                    	String		strTmp 	= "";
                        String		number1 = "";
                        String		number2 = "";
                    	
                    	for(int i=0; i < nTmp; i++){
                        	strTmp 	= (String)vecTmp.get(i);
                        	varTmp 	= strTmp.split("[|]");
                        	number1	= varTmp[0];
                        	number2	= varTmp[1];	                        	
                        	
	                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + number1 + "' ";
	                		sql += "\n  ORDER BY priority ";	                    	

	                        rs2 = statement.executeQuery(sql);
	                        vecTmp2.clear();
	                        while(rs2.next()){
		    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
		    	            }	                        
	                        rs2.close();
	                        
	                        
		                    // 통화 연결음 파일 삭제			                    
//		                    String[] param = StringUtil.getParser(number2, ",");
//                            if(param.length == 3){
//                            	dbUserParam = param[2];
//                            }
                            dbUserParam = number2;
                            int nameChk = wavFileChk(statement, dbUserParam);
                        	if(nameChk==0){
	                            tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
		                    	tempFile.delete();	                            
                        	}
                        	
                        	
	                        int 		nTmp2	= vecTmp2.size();
	                        int 		cnt 	= 1;
	                        String		strTmp2	= "";
	                        
	                        for(int j=0; j < nTmp2; j++){
	                        	strTmp2 = (String)vecTmp2.get(j);
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
	    	            		nResult = statement.executeUpdate(sql);
	    	                    cnt++;
	                        }
	            			System.out.println("삭제  성공");
                    	}
                    }                	
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	// 통화연결음 저장
    public int setNewUserMRBT(DataStatement stmt, String strParm, String insertStr, String startTime, String endTime, String dayValue, String originalFileName, String userID) {
    	return setNewUserMRBT(stmt, strParm, insertStr, startTime, endTime, dayValue, originalFileName, userID, null) ;
    }
    public int setNewUserMRBT(DataStatement stmt, String strParm, String insertStr, String startTime, String endTime, String dayValue, String originalFileName, String userID, String checkgroupid) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        int		  returnValue = 0;
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {
            if (stmt != null){
            	String[] 	dataStr = StringUtil.getParser(insertStr, "");
            	int			cnt		= 0;
            	int			cnt2	= 0;
            	
        		// 트랜잭션 시작
				stmt.stxTransaction();

            	for(int k=0; k < dataStr.length; k++){
            		String strE164 = dataStr[k];
                	
            		sql  = " SELECT count(*) FROM table_featureservice " ;
            		sql += "  WHERE serviceno = 5011 And e164 = '" + strE164 + "' ";
            		if(checkgroupid!=null) sql += " AND checkgroupid = '" + checkgroupid + "' ";
                    rs = stmt.executeQuery(sql);
					if (rs.next()){ 
						//cnt = Integer.parseInt(rs.getString(1));
						cnt = rs.getInt(1);
					}
					rs.close();
					
					// table_featureservice 등록
					if (cnt == 0){
						int maxId2 	= getMaxID(stmt, strE164);
						if(checkgroupid!=null){
							sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol, checkgroupid) "; 
			    			sql = sql + "  values('" + strE164 + "', '5011', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2, '"+checkgroupid+"')";
						}else{
		                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
			    			sql = sql + "  values('" + strE164 + "', '5011', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
						}
		    			nResult = stmt.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[통화연결음 등록] '","[Auth Properties Error] '")+l.x("'통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
					}
					 
                	sql  = " SELECT count(*) FROM table_addmrbt " ;
            		sql += "  WHERE e164 = '" + strE164 + "' And dayvalue = '" + dayValue + "' ";
            		sql += "    And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
                    rs2 = stmt.executeQuery(sql);
					if (rs2.next()){ 
						//cnt2 = Integer.parseInt(rs2.getString(1));
						cnt2 = rs2.getInt(1);
					}
					rs2.close();
            		
					// table_addmrbt 등록
					if (cnt2 == 0){
						sql = " insert into table_addmrbt(e164, dayvalue, starttime, endtime, sound) "; 
		    			sql = sql + "  values('" + strE164 + "', '" + dayValue + "', '" + startTime + "', '" + endTime + "', '" + originalFileName + "')";
		    			nResult = stmt.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[ADD MRBT 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'ADD MRBT 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
					}
					
					// ############### LogHistory 처리  #############
					LogHistory	logHistory 	= new LogHistory();
					int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|일반통화 연결음 ("+strE164+" 번)|1|");
					// ##############################################

					// commit 처리
					stmt.endTransaction(true);
					returnValue = 1;
            	}
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        return returnValue ;
    }

	// 통화대기음 일괄 저장
    public int setNewUserMOH(DataStatement stmt, String strParm, String originalFileName, String userID) {
    	return setNewUserMOH(stmt, strParm, originalFileName, userID, null) ;
    }
    public int setNewUserMOH(DataStatement stmt, String strParm, String originalFileName, String userID, String checkgroupid) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
//        Vector 	  vecTmp 	  = new Vector();
//        Vector 	  vecTmp2 	  = new Vector();
//        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        String	  strE164	  = "";
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
            	String[] 	dataStr = StringUtil.getParser(strUserParm, "");
            	if(dataStr != null){
            		// 트랜잭션 시작
    				stmt.stxTransaction();
    				
            		for(int i=0; i < dataStr.length; i++){
            			int			cnt 	 = 0;
            			String[] 	dataStr2 = StringUtil.getParser(dataStr[i], "|");
            			
            			strE164  = dataStr2[0];
            			
                		sql  = " SELECT count(*) FROM table_featureservice " ;
                		sql += "  WHERE serviceno = 5031 And e164 = '" + strE164 + "' ";
                        rs = stmt.executeQuery(sql);
    					if (rs.next()){ 
    						//cnt = Integer.parseInt(rs.getString(1));
    						cnt = rs.getInt(1);
    					}
    					rs.close();
    					
    					// table_featureservice 등록
    					if (cnt == 0){
    						int maxId2 	= getMaxID(stmt, strE164);
    						if(checkgroupid!=null){
	    	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol, checkgroupid) "; 
	    		    			sql = sql + "  values('" + strE164 + "', '5031', "+ (maxId2 + 1) +", '" + originalFileName + "', 2, 1, 0, 2, '"+checkgroupid+"')";
    						}else{
    							sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
        		    			sql = sql + "  values('" + strE164 + "', '5031', "+ (maxId2 + 1) +", '" + originalFileName + "', 2, 1, 0, 2)";
    						}
    		    			nResult = stmt.executeUpdate(sql);
    		    			if (nResult < 0){	throw new Exception(l.x("[통화대기음 등록] '","[Auth Properties Error] '")+l.x("'통화대기음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
    	        			
    		    			System.out.println("일괄 통화대기음 저장 성공");
    	        			returnValue = 1;
    	                }else{
    	        			System.out.println("일괄 통화대기음 저장할 E164가 없습니다.");
    	        			returnValue = 0;
    	                }
    					
    					// ############### LogHistory 처리  #############
    					LogHistory	logHistory 	= new LogHistory();
    					int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|통화대기음 ("+strE164+" 번)|1|");
    					// ##############################################

    	                if (stmt != null)
    						stmt.endTransaction(true);
            		}
            	}            	
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }

 // 통화대기음 일괄 삭제
    public boolean e164NewMOHDelete(String deleteStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
//    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        File      	tempFile    = null;  // 파일 객체	        
//	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					String[] 	dataStr2 = StringUtil.getParser(blockStr[k], "|");
					e164   = dataStr2[0];
		            int 	cnt 	= 0;
		            String	strName = "";
		            
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5031 AND e164 = '" + e164 +"'";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
    	            	sql  = " SELECT userparam FROM table_featureservice " ;
    	        		sql += "\n  WHERE serviceno = 5031 AND e164 = '" + e164 +"'";
    	                rs = statement.executeQuery(sql);
    					if (rs.next()){ 
    						strName = rs.getString(1);
    					}
    					rs.close();
    	                if (rs != null)	rs.close();
                    	
    	             // table_featureservice 사용자 지정 대기음 삭제
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5031' ";
                    	statement.executeUpdate(sql);
                    	
	                	sql  = "\n SELECT serviceno FROM table_featureservice ";
	            		sql += "\n  WHERE e164 = '" + e164 + "' ";
	            		sql += "\n  ORDER BY priority ";	                    	
	
	                    rs2 = statement.executeQuery(sql);
	                    vecTmp2.clear();
	                    while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
	                    rs2.close();
	                    
	                    int 		nTmp2	= vecTmp2.size();
	                    int 		cnt2 	= 1;
	                    String		strTmp2	= "";
	                    
	                    if(nTmp2>0){
		                    for(int j=0; j < nTmp2; j++){
		                    	strTmp2 = (String)vecTmp2.get(j);
		                    	sql  = "\n UPDATE table_featureservice  " ;
			                    sql += "\n    Set priority  = " + cnt2;
			            		sql += "\n  WHERE e164      = '" + e164 + "' ";
			            		sql += "\n    AND serviceno = " + strTmp2 + " ";
			            		nResult = statement.executeUpdate(sql);
			                    cnt2++;
		                    }
	                    }
	                    
	                    // 사용자 지정 대기음 파일 삭제
	                    int nameChk = wavFileChk(statement, strName);
	                	if(nameChk==0){
	                		int mrbtChk = wavMRBTFileChk(statement, strName);
	                		if(mrbtChk==0){
	                			// Default 통화 대기음 추가 2011.04.18
	                			if(!"default_moh.wav".equals(strName)){
		                			tempFile = new File(StaticString.userWavPath+"/"+strName);
			                    	tempFile.delete();
	                			}
	                		}
	                	}		
		                
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|통화대기음 ("+e164+" 번)|2|"+strIp);
						// ##############################################
						
	        			//System.out.println("삭제  성공");
                    }                	
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	// 통화대기음 수정
    public int setNewEditMOH(DataStatement stmt, String e164, String originalFileName, String userID) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
//        Vector 	  vecTmp 	  = new Vector();
//        Vector 	  vecTmp2 	  = new Vector();
//        Vector 	  vecTmp3 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
//        String	  strUserParm = strParm;
        String	  newFilename = originalFileName;
        String	  oldFilename = "";
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null){
        		sql  = " SELECT userparam FROM table_featureservice " ;
        		sql += "  WHERE serviceno = 5031 And e164 = '" + e164 + "' ";
                rs = stmt.executeQuery(sql);
				if (rs.next()){ 
					oldFilename = rs.getString(1);
				}
				rs.close();
				
				// table_featureservice 수정
    			sql = " Update table_featureservice Set userparam = '" + newFilename + "' ";
    			sql = sql + "  WHERE serviceno = 5031 And e164 = '" + e164 + "' ";
    			nResult = stmt.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[통화대기음 등록] '","[Auth Properties Error] '")+l.x("'통화대기음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
    			
    			System.out.println("통화대기음 수정 성공");
    			
                // 사용자 지정 대기음 파일 삭제
                if(!"".equals(oldFilename)){
	    			int nameChk = wavFileChk(stmt, oldFilename);
                	if(nameChk==0){
                		int mrbtChk = wavMRBTFileChk(stmt, oldFilename);
                		if(mrbtChk==0){
                			// Default 통화 대기음 추가 2011.04.18
                			if(!"default_moh.wav".equals(oldFilename)){
		                		tempFile = new File(StaticString.userWavPath+"/"+oldFilename);
		                    	tempFile.delete();
                			}
                		}
                	}
                }
            	returnValue = 1;
            	
				// ############### LogHistory 처리  #############
				LogHistory	logHistory 	= new LogHistory();
				int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|통화대기음 ("+e164+" 번)|3|");
				// ##############################################

                if (stmt != null)
					stmt.endTransaction(true);

            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }

    public boolean e164UserMRBTDelete(String e164, String dayValue, String startTime, String endTime, String fileName){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
//    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
//	        String    	fileName 	= "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;		            
        	sql  = "\n SELECT count(*) FROM table_addmrbt " ;
    		sql += "\n  WHERE e164 = '" + e164 +"' And dayvalue = '" + dayValue +"' And starttime = '" + startTime +"' ";
    		sql += "\n    And endtime = '" + endTime +"' And sound = '" + fileName +"' ";
    		
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) 
            	rs.close();
        	
            if (cnt > 0){
            	sql = " Delete From table_addmrbt ";
        		sql += "\n  WHERE e164 = '" + e164 +"' And dayvalue = '" + dayValue +"' And starttime = '" + startTime +"' ";
        		sql += "\n    And endtime = '" + endTime +"' And sound = '" + fileName +"' ";                    	
            	statement.executeUpdate(sql);                    	
            	
            	int cnt2 = 0;
            	sql  = " SELECT count(*) FROM table_addmrbt WHERE e164 = '" + e164 +"' ";                    	
                rs2 = statement.executeQuery(sql);
				if (rs2.next()){ 
					cnt2 = Integer.parseInt(rs2.getString(1));
				}
				rs2.close();    	                
                if (rs2 != null)	rs2.close();
                
                if (cnt2 == 0){
                	// 사용자 지정 연결음 table_featureservice 테이블 삭제
                	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5011' ";
                	statement.executeUpdate(sql);

                	sql  = "\n SELECT serviceno FROM table_featureservice ";
            		sql += "\n  WHERE e164 = '" + e164 + "' ";
            		sql += "\n  ORDER BY priority ";	                    	

                    rs2 = statement.executeQuery(sql);
                    vecTmp2.clear();
                    while(rs2.next()){
    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
    	            }	                        
                    rs2.close();
                    
                    int 		nTmp2	= vecTmp2.size();
                    int 		cnt3 	= 1;
                    String		strTmp2	= "";
                    
                    if(nTmp2>0){
	                    for(int j=0; j < nTmp2; j++){
	                    	strTmp2 = (String)vecTmp2.get(j);
	                    	sql  = "\n UPDATE table_featureservice  " ;
		                    sql += "\n    Set priority  = " + cnt3;
		            		sql += "\n  WHERE e164      = '" + e164 + "' ";
		            		sql += "\n    AND serviceno = " + strTmp2 + " ";
		            		nResult = statement.executeUpdate(sql);
		                    cnt3++;
	                    }
                    }

                    // 사용자 지정 연결음 table_callermrbt 테이블 삭제
                    sql  = "\n DELETE FROM table_callermrbt WHERE e164 = '" + e164 + "' ";
                    nResult = statement.executeUpdate(sql);
                }
            	
                // 사용자 지정 대기음 파일 삭제
                int nameChk = wavFileChk(statement, fileName);
            	if(nameChk==0){
            		int mrbtChk = wavMRBTFileChk(statement, fileName);
            		if(mrbtChk==0){
                		tempFile = new File(StaticString.userWavPath+"/"+fileName);
                    	tempFile.delete();
            		}
            	}
                
    			System.out.println("삭제  성공");
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	// 통화연결음 저장
    public int setAddUserMRBT(DataStatement stmt, String strParm, String strE164, String startTime, String endTime, String dayValue, String originalFileName, String userID) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        int		  returnValue = 0;
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {
            if (stmt != null){
            	int			cnt		= 0;
            	int			cnt2	= 0;
            	
        		// 트랜잭션 시작
				stmt.stxTransaction();

        		sql  = " SELECT count(*) FROM table_featureservice " ;
        		sql += "  WHERE serviceno = 5011 And e164 = '" + strE164 + "' ";
                rs = stmt.executeQuery(sql);
				if (rs.next()){ 
					cnt2 = rs.getInt(1);
				}
				rs.close();
				
				// table_featureservice 등록
				if (cnt2 == 0){
					int maxId2 	= getMaxID(stmt, strE164);
                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
	    			sql = sql + "  values('" + strE164 + "', '5011', "+ (maxId2 + 1) +", '" + strUserParm + "', 2, 1, 0, 2)";
	    			nResult = stmt.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[통화연결음 등록] '","[Auth Properties Error] '")+l.x("'통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
				}

            	sql  = " SELECT count(*) FROM table_addmrbt " ;
        		sql += "  WHERE e164 = '" + strE164 + "' And dayvalue = '" + dayValue + "' ";
        		sql += "    And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
                rs = stmt.executeQuery(sql);
				if (rs.next()){ 
					cnt = rs.getInt(1);
				}
				rs.close();
        		
				// table_addmrbt 등록
				if (cnt == 0){
                	sql = " insert into table_addmrbt(e164, dayvalue, starttime, endtime, sound) "; 
	    			sql = sql + "  values('" + strE164 + "', '" + dayValue + "', '" + startTime + "', '" + endTime + "', '" + originalFileName + "')";
	    			nResult = stmt.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[ADD MRBT 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'ADD MRBT 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
				}
				
				// ############### LogHistory 처리  #############
				LogHistory	logHistory 	= new LogHistory();
				int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|일반통화 연결음 ("+strE164+" 번)|3|");
				// ##############################################
				
				// commit 처리
				stmt.endTransaction(true);
				returnValue = 1;
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        return returnValue ;
    }

	// 대표번호 통화연결음 저장
    public int setNewDeptMRBT(DataStatement stmt, String strParm, String insertStr, String startTime, String endTime, String dayValue, String originalFileName, String userID) {
    	return setNewDeptMRBT(stmt, strParm, insertStr, startTime, endTime, dayValue, originalFileName, userID, null) ;
    }
    public int setNewDeptMRBT(DataStatement stmt, String strParm, String insertStr, String startTime, String endTime, String dayValue, String originalFileName, String userID, String checkgroupid) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        int		  returnValue = 0;
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        String	  strUserParm = strParm;
        File      tempFile    = null;  // 파일 객체

        try {
            if (stmt != null){
            	String[] 	dataStr = StringUtil.getParser(insertStr, "");
            	int			cnt		= 0;
            	int			cnt2	= 0;
            	
        		// 트랜잭션 시작
				stmt.stxTransaction();

            	for(int k=0; k < dataStr.length; k++){
            		String strE164 = dataStr[k];
                	
//            		sql  = " SELECT count(*) FROM table_keynumberid " ;
//            		sql += "  WHERE table_keynumberid = '" + strE164 + "' ";

            		sql  = " Select count(b.KEYNUMBERID) "; 
            		sql += " FROM  table_localprefix a LEFT OUTER JOIN table_KeyNumberID b  ON a.endpointid = b.KEYNUMBERID "; 
            		sql += " Where 1 = 1 and a.prefixtype = 4 ";
            		sql += "   and b.KEYNUMBERID = '" + strE164 + "' ";
            		if(checkgroupid!=null) sql += " AND a.checkgroupid = '" + checkgroupid + "' ";
            		
                    rs = stmt.executeQuery(sql);
					if (rs.next()){ 
						//cnt = Integer.parseInt(rs.getString(1));
						cnt = rs.getInt(1);
					}
					rs.close();
					
					// table_featureservice 등록
					if (cnt == 1){
						int strValue = getHuntConstraint(stmt, strE164);
						strValue = strValue + 4;
						
						sql = " Update table_keynumberid Set sound = '3,9, ', huntconstraint = "+ strValue +" "; 
		    			sql = sql + "  Where keynumberid = '" + strE164 + "' ";
		    			if(checkgroupid!=null) sql += " AND checkgroupid = '" + checkgroupid + "' ";
		    			nResult = stmt.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[대표 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'대표 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
					
	                	sql  = " SELECT count(*) FROM table_addmrbt " ;
	            		sql += "  WHERE e164 = '" + strE164 + "' And dayvalue = '" + dayValue + "' ";
	            		sql += "    And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
	                    rs2 = stmt.executeQuery(sql);
						if (rs2.next()){ 
							//cnt2 = Integer.parseInt(rs2.getString(1));
							cnt2 = rs2.getInt(1);
						}
						rs2.close();
	            		
						// table_addmrbt 등록
						if (cnt2 == 0){
		                	sql = " insert into table_addmrbt(e164, dayvalue, starttime, endtime, sound) "; 
			    			sql = sql + "  values('" + strE164 + "', '" + dayValue + "', '" + startTime + "', '" + endTime + "', '" + originalFileName + "')";
			    			nResult = stmt.executeUpdate(sql);
			    			if (nResult < 0){	throw new Exception(l.x("[ADD MRBT 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'ADD MRBT 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
						}
						
						// ############### LogHistory 처리  #############
						LogHistory	logHistory 	= new LogHistory();
						int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|대표통화 연결음 ("+strE164+" 번)|1|");
						// ##############################################
					}
					
					// commit 처리
					stmt.endTransaction(true);
					returnValue = 1;
            	}
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        return returnValue ;
    }

    public boolean deptNewMRBTDelete(String deleteStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];

					int strValue = getHuntConstraint(statement, e164);
					if(strValue>4){
						strValue = strValue - 4;
					}else{
						strValue = 0;
					}
                	sql = " Update table_keynumberid Set sound = '', huntconstraint = "+ strValue +" ";  
	    			sql = sql + "  Where keynumberid = '" + e164 + "' ";
                	statement.executeUpdate(sql);
                	
                    // addmrbt, 통화 연결음 파일 삭제			                    
	            	sql  = " SELECT sound FROM table_addmrbt WHERE e164 = '" + e164 +"' ";
	        		
                    rs = statement.executeQuery(sql);
                    vecTmp.clear();
                    while(rs.next()){
    	            	vecTmp.add(WebUtil.CheckNullString(rs.getString(1)));            	
    	            }	                        
                    rs.close();
                    
                    int cnt3	= vecTmp.size();	                    
	                if (cnt3 > 0){
                    	sql = " Delete From table_addmrbt WHERE e164 = '" + e164 +"' ";
                    	statement.executeUpdate(sql);
                    	
                        for(int j=0; j < cnt3; j++){
                        	fileName = (String)vecTmp.get(j);
                        	
		                    int nameChk = wavFileChk(statement, fileName);
		                	if(nameChk==0){
		                		int mrbtChk = wavMRBTFileChk(statement, fileName);
		                		if(mrbtChk==0){
			                		tempFile = new File(StaticString.userWavPath+"/"+fileName);
			                    	tempFile.delete();
		                		}
		                	}
                        }
                    }
	                
					// ############### LogHistory 처리  ###############
					int int_result = logHistory.LogHistorySave(userID+"|83|대표통화 연결음 ("+e164+" 번)|2|"+strIp);
					// ##############################################

        			System.out.println("삭제  성공");
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean userDeptMRBTDelete(String e164, String dayValue, String startTime, String endTime, String fileName){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
//    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	ResultSet 	rs3 		= null;
	    	int       	nResult     = 0;
//	        String    	fileName 	= "";
	        File      	tempFile    = null;  // 파일 객체	        
	    	Vector 	  	vecTmp 	  	= new Vector();
	        Vector 	  	vecTmp2 	= new Vector();

	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;		            
        	sql  = "\n SELECT count(*) FROM table_addmrbt " ;
    		sql += "\n  WHERE e164 = '" + e164 +"' And dayvalue = '" + dayValue +"' And starttime = '" + startTime +"' ";
    		sql += "\n    And endtime = '" + endTime +"' And sound = '" + fileName +"' ";
    		
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) 
            	rs.close();
        	
            if (cnt > 0){
            	sql = " Delete From table_addmrbt ";
        		sql += "\n  WHERE e164 = '" + e164 +"' And dayvalue = '" + dayValue +"' And starttime = '" + startTime +"' ";
        		sql += "\n    And endtime = '" + endTime +"' And sound = '" + fileName +"' ";                    	
            	statement.executeUpdate(sql);                    	
            	
            	int cnt2 = 0;
            	sql  = " SELECT count(*) FROM table_addmrbt WHERE e164 = '" + e164 +"' ";                    	
                rs2 = statement.executeQuery(sql);
				if (rs2.next()){ 
					cnt2 = Integer.parseInt(rs2.getString(1));
				}
				rs2.close();    	                
                if (rs2 != null)	rs2.close();
                
                if (cnt2 == 0){
                	// 대표번호 연결음 table_keynumberid 테이블 수정
                	int strValue = getHuntConstraint(statement, e164);
                	if(strValue>4){
                		strValue = strValue - 4;
                	}else{
                		strValue = 0;
                	}
                	
                	sql = " Update table_keynumberid Set sound = '', huntconstraint = "+ strValue +" "; 
	    			sql = sql + "  Where keynumberid = '" + e164 + "' ";                	
                	statement.executeUpdate(sql);
                }
            	
                // 사용자 지정 대기음 파일 삭제
                int nameChk = wavFileChk(statement, fileName);
            	if(nameChk==0){
            		int mrbtChk = wavMRBTFileChk(statement, fileName);
            		if(mrbtChk==0){
                		tempFile = new File(StaticString.userWavPath+"/"+fileName);
                    	tempFile.delete();
            		}
            	}
                
    			System.out.println("삭제  성공");
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	//  대표번호 통화연결음 저장
    public int setAddDeptMRBT(DataStatement stmt, String strE164, String startTime, String endTime, String dayValue, String originalFileName, String userID) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        int		  returnValue = 0;
        String    sql         = "";
        int       nResult     = 0;
        String    dbUserParam = "";
        File      tempFile    = null;  // 파일 객체

        try {
            if (stmt != null){
            	int			cnt		= 0;
            	int			cnt2	= 0;
            	
        		// 트랜잭션 시작
				stmt.stxTransaction();

            	sql  = " SELECT count(*) FROM table_addmrbt WHERE e164 = '" + strE164 + "' " ;
            	System.out.println("sql :"+ sql);
                rs2 = stmt.executeQuery(sql);
				if (rs2.next()){ 
					//cnt2 = Integer.parseInt(rs2.getString(1));
					cnt2 = rs2.getInt(1);
				}
				rs2.close();
        		
				// table_featureservice 등록
				if (cnt2 == 0){
					int strValue = getHuntConstraint(stmt, strE164);
					strValue = strValue + 4;
					
					sql = " Update table_keynumberid Set sound = '3,9, ', huntconstraint = "+ strValue +" "; 
	    			sql = sql + "  Where keynumberid = '" + strE164 + "' ";
	    			System.out.println("sql :"+ sql);
	    			nResult = stmt.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[대표 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'대표 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
				}
				
				
            	sql  = " SELECT count(*) FROM table_addmrbt " ;
        		sql += "  WHERE e164 = '" + strE164 + "' And dayvalue = '" + dayValue + "' ";
        		sql += "    And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
        		System.out.println("sql :"+ sql);
                rs = stmt.executeQuery(sql);
				if (rs.next()){ 
					//cnt2 = Integer.parseInt(rs2.getString(1));
					cnt = rs.getInt(1);
				}
				rs.close();
        		
				// table_addmrbt 등록
				if (cnt == 0){
                	sql = " insert into table_addmrbt(e164, dayvalue, starttime, endtime, sound) "; 
	    			sql = sql + "  values('" + strE164 + "', '" + dayValue + "', '" + startTime + "', '" + endTime + "', '" + originalFileName + "')";
	    			System.out.println("sql :"+ sql);
	    			nResult = stmt.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[ADD MRBT 통화연결음 등록] '","[Auth Properties Error] '")+l.x("'ADD MRBT 통화연결음 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
				}
				
				// ############### LogHistory 처리  #############
				LogHistory	logHistory 	= new LogHistory();
				int int_result = logHistory.LogHistoryGetIpSave(userID+"|83|대표통화 연결음 ("+strE164+" 번)|3|");
				// ##############################################

				// commit 처리
				stmt.endTransaction(true);
				returnValue = 1;
            }
        } catch (Exception e) {
        	stmt.endTransaction(false);		// rollback 처리
        	e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        return returnValue ;
    }

	public int getHuntConstraint(DataStatement stmt, String e164) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(huntconstraint),0) " ;
		sql = sql +  "\n   FROM table_keynumberid ";
		sql = sql +  "\n  WHERE keynumberid = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	System.out.println("sql :"+ sql);
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }

	public String getEndpointID(DataStatement stmt, String e164) {
		String strValue = "" ;
		String sql = "\n SELECT endpointid " ;
		sql = sql +  "\n   FROM table_keynumberid ";
		sql = sql +  "\n  WHERE keynumberid = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	System.out.println("sql :"+ sql);
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) strValue = rs1.getString(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strValue;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return strValue;
    }

	public int getQueueOption(DataStatement stmt, String e164) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(queueoption),0) " ;
		sql = sql +  "\n   FROM table_keynumberid ";
		sql = sql +  "\n  WHERE keynumberid = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	System.out.println("sql :"+ sql);
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }

    public boolean vmsInsert(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = "\n SELECT count(*) FROM nasa_vms_user WHERE vms_id = '" + e164 +"'";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
                    	String strTemp = getCommonservice(statement, e164);
                    	String commonservice = strTemp.substring(0,8)+"1"+strTemp.substring(9,32);

                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
                    	sql += "\n  , Commonservice  = '" + commonservice + "' ";
                    	sql += "\n  Where e164  = '" + e164 + "' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);
                    	
                        sql = "Insert into nasa_vms_user(vms_id, vms_name, vms_pswd, vms_ext, vms_lang, vms_msave ";
                        sql = sql + " , vms_rectime, vms_silence_time, vms_msgretention, vms_userauth) values( ";
                        sql = sql + " '" + e164  + "', '" + e164  + "', '0000', '" + e164  + "', 'kor', 'R', 300, 5, 10, 'P002') ";            		
                        System.out.println("1:"+sql);
                        nResult = statement.executeUpdate(sql);
                        if (nResult < 1){	throw new Exception(l.x("[VMS 등록 오류] '","[Auth Properties Error] '")+e164+l.x("'는 VMS등록이 실패하였습니다. VMS등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            
                        
	        			System.out.println("저장 성공");
                    }else{
                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
                    	sql += "\n  Where e164  = '" + e164 + "' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);
                    	
                    }
                    
					// ############### LogHistory 처리  ###############
					int int_result = logHistory.LogHistorySave(userID+"|83|음성사서함 ("+e164+" 번)|1|"+strIp);
					// ##############################################
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean vmsDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = "\n SELECT count(*) FROM nasa_vms_user WHERE vms_id = '" + e164 +"'";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	String strTemp = getCommonservice(statement, e164);
                    	String commonservice = strTemp.substring(0,8)+"0"+strTemp.substring(9,32);
                    	
                    	sql = " update table_e164 set mailbox = '' ";
                    	sql += "\n  , Commonservice  = '" + commonservice + "' ";
                    	sql += "\n  Where e164  = '" + e164 + "' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);
                    	
                        sql = "delete from nasa_vms_user where vms_id  = '" + e164 + "' ";
                        System.out.println("1:"+sql);
                        statement.executeUpdate(sql);
                        
	        			System.out.println("삭제 성공");
	        			
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|음성사서함 ("+e164+" 번)|2|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	public String getCommonservice(DataStatement stmt, String e164) {
		String strValue = "" ;
		String sql = "SELECT commonservice FROM table_E164 WHERE e164 = '" + e164 + "'";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) strValue = rs1.getString(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strValue;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return strValue;
    }

    public boolean blfInsert(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5421 ";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', '5421', "+ (maxId2 + 1) +", '', 2, 1, 0, 2)";
		    			System.out.println("sql :"+ sql);
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[AlertInfo 등록] '","[Auth Properties Error] '")+l.x("'AlertInfo 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|BLF ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean blfDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5421 AND e164 = '" + e164 +"'";
	        		System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5421' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	
                		System.out.println("sql :"+ sql);
                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		System.out.println("sql :"+ sql);
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|BLF ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean alertInfoInsert(String insertStr, String alertIntoType, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5451 ";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', '5451', "+ (maxId2 + 1) +", '" + alertIntoType + "', 2, 1, 0, 2)";
		    			System.out.println("sql :"+ sql);
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[AlertInfo 등록] '","[Auth Properties Error] '")+l.x("'AlertInfo 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|통화수신음 ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean alertInfoDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5451 AND e164 = '" + e164 +"'";
	        		System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5451' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	
                		System.out.println("sql :"+ sql);
                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		System.out.println("sql :"+ sql);
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|통화수신음 ("+e164+" 번)|2|"+strIp);
						// ##############################################
						
	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean alertInfoEdit(String e164, String alertIntoType){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;		            
        	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5451 ";
        	System.out.println("sql :"+ sql);
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) rs.close();
        	
            if (cnt > 0){
            	sql = " update table_featureservice set userparam = '" + alertIntoType + "' "; 
    			sql = sql + "  WHERE e164 = '" + e164 +"' and serviceno = 5451 ";
    			System.out.println("sql :"+ sql);
    			nResult = statement.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[AlertInfo 수정] '","[Auth Properties Error] '")+l.x("'AlertInfo 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean virtualNumberInsert(String insertStr, String userparam, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5431 ";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', '5431', "+ (maxId2 + 1) +", '" + userparam + "', 2, 1, 0, 2)";
		    			System.out.println("sql :"+ sql);
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[가상발신번호 등록] '","[Auth Properties Error] '")+l.x("'가상발신번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|가상발신번호 ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean virtualNumberDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5431 AND e164 = '" + e164 +"'";
	        		System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5431' ";
                    	System.out.println("sql :"+ sql);
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	
                		System.out.println("sql :"+ sql);
                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		System.out.println("sql :"+ sql);
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|가상발신번호 ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean virtualNumberEdit(String e164, String userparam){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;		            
        	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5431 ";
        	System.out.println("sql :"+ sql);
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) rs.close();
        	
            if (cnt > 0){
            	sql = " update table_featureservice set userparam = '" + userparam + "' "; 
    			sql = sql + "  WHERE e164 = '" + e164 +"' and serviceno = 5431 ";
    			System.out.println("sql :"+ sql);
    			nResult = statement.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[AlertInfo 수정] '","[Auth Properties Error] '")+l.x("'AlertInfo 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callBlockInsert(String insertStr, String callBlockType, String prefixType, String blockType, String blockE164, String note, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
//	        String    	fileName 	= "";
	    	String 		startprefix	= blockE164;
	    	String		endprefix	= "";
	    	
	    	if("3".equals(callBlockType)||"1".equals(callBlockType)){
		        if(!"".equals(blockE164)){
		        	endprefix = "________________________________";
		        	if("#, *".equals(startprefix)){//if special code 
						startprefix = "#";
						endprefix = "*" + endprefix.substring(1);
			        }else if(blockE164.length() < 32) {
			            int nLength = blockE164.length();
			            endprefix = blockE164 + endprefix.substring(nLength);
			        }
			        else if (blockE164.length() == 32 )
			            endprefix = blockE164 ;
		        }
	    	}
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 		= StringUtil.getParser(insertStr, "");
			String		e164 			= "";
			String 		callerService 	= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            String strTemp = "";
		            
	            	sql  = " SELECT callerservice FROM table_e164 WHERE e164 = '" + e164 +"' ";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						strTemp = rs.getString(1);
					}
					rs.close();
	                if (rs != null) rs.close();
                	
                    if (!"".equals(strTemp) && strTemp!=null){
                    	callerService = strTemp.substring(0, 1) + callBlockType + strTemp.substring(2, 64);
                    	
                        sql = "\n Update table_E164 set callerservice  = '" + callerService + "' ";
                        sql = sql + "\n  WHERE e164 = '" + e164 +"' "; 
                        System.out.println("sql :"+ sql);
                        nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[CallBlock 등록] '","[CallBlock Properties Error] '")+l.x("'CallBlock 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
		    			
		    			//if("3".equals(callBlockType)){
		    			if("3".equals(callBlockType)||"1".equals(callBlockType)){
		    				if(!"".equals(blockE164)){
					            sql = " Insert into Table_E164block(e164, inoutflag, startprefix, endprefix, prefixtype, blockidtype, description) ";
					            sql = sql + " Values('" + e164 + "', 0, '" + startprefix + "', '" + endprefix + "', " + prefixType + ", " + blockType + ", '" + note + "') ";
					            System.out.println("sql :"+ sql);
					            statement.executeUpdate(sql);
		    				}
		    			}else{
		                	sql = " Delete From table_e164block Where e164 = '" + e164 +"' ";
		                	System.out.println("sql :"+ sql);
		                	statement.executeUpdate(sql);
		    			}
		    			
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|발신제한 ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callBlockEdit(String e164, String callBlockType, String prefixType, String blockType, String blockE164, String note){
    	return callBlockEdit(e164, callBlockType, prefixType, blockType, blockE164, note, null) ;
    }
    public boolean callBlockEdit(String e164, String callBlockType, String prefixType, String blockType, String blockE164, String note, String checkgroupid){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	int       	nResult     	= 0;
	    	String 		startprefix		= blockE164;
	    	String		endprefix		= "";
	    	String 		callerService 	= "";
	    	String 		strTemp 		= "";
	    	
	    	if("3".equals(callBlockType)||"1".equals(callBlockType)){
	    		if(!"".equals(blockE164)){
			        endprefix = "________________________________";
			        if("#, *".equals(startprefix)){//if special code 
						startprefix = "#";
						endprefix = "*" + endprefix.substring(1);
			        }else if(blockE164.length() < 32) {
			            int nLength = blockE164.length();
			            endprefix = blockE164 + endprefix.substring(nLength);
			        }
			        else if (blockE164.length() == 32 )
			            endprefix = blockE164 ;
	    		}
	    	}

	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
        	sql  = " SELECT callerservice FROM table_e164 WHERE e164 = '" + e164 +"' ";
        	System.out.println("sql :"+ sql);
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				strTemp = rs.getString(1);
			}
			rs.close();
            if (rs != null) rs.close();
        	
            if (!"".equals(strTemp) && strTemp!=null){
            	callerService = strTemp.substring(0, 1) + callBlockType + strTemp.substring(2, 64);
            	
                sql = "\n Update table_E164 set callerservice  = '" + callerService + "' ";
                sql = sql + "\n  WHERE e164 = '" + e164 +"' ";
                System.out.println("sql :"+ sql);
                nResult = statement.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[CallBlock 등록] '","[CallBlock Properties Error] '")+l.x("'CallBlock 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

    			//if("3".equals(callBlockType)){
    			if("3".equals(callBlockType)||"1".equals(callBlockType)){
    				if(!"".equals(blockE164)){
    					if(checkgroupid!=null){
    						sql = " Insert into Table_E164block(e164, inoutflag, startprefix, endprefix, prefixtype, blockidtype, description, checkgroupid) ";
				            sql = sql + " Values('" + e164 + "', 0, '" + startprefix + "', '" + endprefix + "', " + prefixType + ", " + blockType + ", '" + note + "', '"+checkgroupid+"') ";
    					}else{
		    				sql = " Insert into Table_E164block(e164, inoutflag, startprefix, endprefix, prefixtype, blockidtype, description) ";
				            sql = sql + " Values('" + e164 + "', 0, '" + startprefix + "', '" + endprefix + "', " + prefixType + ", " + blockType + ", '" + note + "') ";
    					}
    					System.out.println("sql :"+ sql);
			            statement.executeUpdate(sql);
    				}
    			}else{
                	sql = " Delete From table_e164block Where e164 = '" + e164 +"' ";
                	System.out.println("sql :"+ sql);
                	statement.executeUpdate(sql);
    			}
            }

	        statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callBlockDelete(String e164, String blockE164, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	ResultSet 	rs2				= null;
	    	int       	nResult     	= 0;
	    	int 		cnt 			= 0;
	    	
	    	if("#, *".equals(blockE164)){//if special code 
	    		blockE164 = "#";
	        }
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
        	sql = " Delete From table_e164block Where e164 = '" + e164 +"' and inoutflag = 0 and startprefix = '" + blockE164 +"' ";
        	System.out.println("sql :"+ sql);
        	statement.executeUpdate(sql);

			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			int int_result = logHistory.LogHistorySave(userID+"|83|발신제한 번호삭제 ("+e164+" 번)|2|"+strIp);
			// ##############################################

	        statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callBlockDelete2(String insertStr, String blockE164, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	ResultSet 	rs2				= null;
	    	int       	nResult     	= 0;
	    	int 		cnt 			= 0;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
					String 	strTemp 		= "";
					String 	callerService 	= "";
	            	sql  = " SELECT callerservice FROM table_e164 WHERE e164 = '" + e164 +"' ";
	            	System.out.println("sql :"+ sql);
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						strTemp = rs.getString(1);
					}
					rs.close();
	                if (rs != null) rs.close();
                	
                    if (!"".equals(strTemp) && strTemp!=null){
                    	callerService = strTemp.substring(0, 1) + "0" + strTemp.substring(2, 64);
                    	
                        sql = "\n Update table_E164 set callerservice  = '" + callerService + "' ";
                        sql = sql + "\n  WHERE e164 = '" + e164 +"' "; 
                        System.out.println("sql :"+ sql);
                        nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[CallBlock 등록] '","[CallBlock Properties Error] '")+l.x("'CallBlock 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

		    			//sql = " Delete From table_e164block Where e164 = '" + e164 +"'";
		    			sql = " Delete From table_e164block Where e164 = '" + e164 +"'  And inoutflag = 0 ";
		    			System.out.println("sql :"+ sql);
			        	statement.executeUpdate(sql);
			        	
			        	// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|발신제한 ("+e164+" 번)|2|"+strIp);
						// ##############################################
                    }
				}
			}
			
	        statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean secretaryNumberInsert(String insertStr, String userparam, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5121 ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', '5121', "+ (maxId2 + 1) +", '" + userparam + "', 2, 1, 0, 2)";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[비서번호 등록] '","[Auth Properties Error] '")+l.x("'비서번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|인터컴 ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean SecretaryNumberDeleteCommand(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5121 AND e164 = '" + e164 +"'";
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5121' ";
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	

                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|인터컴 ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean secretaryNumberEdit(String e164, String userparam){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;		            
        	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5121 ";    		
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) rs.close();
        	
            if (cnt > 0){
            	sql = " update table_featureservice set userparam = '" + userparam + "' "; 
    			sql = sql + "  WHERE e164 = '" + e164 +"' and serviceno = 5121 ";
    			nResult = statement.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[비서번호 수정] '","[Auth Properties Error] '")+l.x("'비서번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean fmcInsert(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE e164 = '" + e164 +"' and serviceno = 5433 ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', '5433', "+ (maxId2 + 1) +", '', 2, 1, 0, 2)";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[FMC 등록] '","[Auth Properties Error] '")+l.x("'FMC 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|FMC ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean fmcDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5433 AND e164 = '" + e164 +"'";
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where e164  = '" + e164 + "' And serviceno = '5433' ";
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	

                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|FMC ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean mVoipInsert(String insertStr, String userparam, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_featureservice WHERE serviceno = 5501 and e164 = '" + e164 +"' ";
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxId2 	= getMaxID(statement, e164);
	                	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
		    			sql = sql + "  values('" + e164 + "', 5501, "+ (maxId2 + 1) +", '"+userparam+"', 2, 1, 0, 2)";
		    			System.out.println("sql :"+sql);
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[mVoip 등록] '","[Auth Properties Error] '")+l.x("'mVoip 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|mVoip ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean mVoipDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	ResultSet 	rs2 		= null;
	    	int       	nResult     = 0;
	    	Vector 	  	vecTmp2 	= new Vector();
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
					int cnt = 0;
	            	sql  = "\n SELECT count(*) FROM table_featureservice " ;
	        		sql += "\n  WHERE serviceno = 5501 AND e164 = '" + e164 +"'";
	                rs = statement.executeQuery(sql);
	                
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	sql = " Delete From table_featureservice Where serviceno = 5501 and e164  = '" + e164 + "' ";
                    	System.out.println("sql :"+sql);
                    	statement.executeUpdate(sql);

                    	sql  = "\n SELECT serviceno FROM table_featureservice ";
                		sql += "\n  WHERE e164 = '" + e164 + "' ";
                		sql += "\n  ORDER BY priority ";	                    	

                        rs2 = statement.executeQuery(sql);
                        vecTmp2.clear();
                        while(rs2.next()){
	    	            	vecTmp2.add(WebUtil.CheckNullString(rs2.getString(1)));            	
	    	            }	                        
                        rs2.close();
                        
                        int 		nTmp2	= vecTmp2.size();
                        int 		cnt2 	= 1;
                        String		strTmp2	= "";
                        
                        for(int j=0; j < nTmp2; j++){
                        	strTmp2 = (String)vecTmp2.get(j);
                        	sql  = "\n UPDATE table_featureservice  " ;
    	                    sql += "\n    Set priority  = " + cnt2;
    	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
    	            		sql += "\n    AND serviceno = " + strTmp2 + " ";
    	            		//System.out.println("sql :"+sql);
    	            		nResult = statement.executeUpdate(sql);
    	                    cnt2++;
                        }
                        
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|FMC ("+e164+" 번)|2|"+strIp);
						// ##############################################

	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberInsert(String insertStr, String changeNum, String callType){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
	                	sql = " Update table_KeyNumberID Set forwardtype = 1, forwardnum = '" + changeNum + "' "; 
		    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
		    			if("2".equals(callType)){
		    				
				            int cnt2 = 0;
				            
			            	sql  = "\n SELECT count(*) FROM nasa_vms_user WHERE vms_id = '" + e164 +"'";
			        		
			                rs = statement.executeQuery(sql);
							if (rs.next()){ 
								cnt2 = Integer.parseInt(rs.getString(1));
							}
							rs.close();
			                
			                if (rs != null) 
			                	rs.close();
		                	
		                    if (cnt2 == 0){
		                        String temp_AnswerService = "";
		                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + changeNum + "'";
		                        rs = statement.executeQuery(sql);
		                        if (rs.next()) temp_AnswerService = rs.getString(1);
		                        rs.close();
		                        String answerService = temp_AnswerService.substring(0, 3) + "3" + temp_AnswerService.substring(4, 64);

		                        
		                    	String strTemp = getCommonservice(statement, changeNum);
		                    	String commonservice = strTemp.substring(0,8)+"1"+strTemp.substring(9,32);
		                    	
		                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
		                    	sql += "\n  , Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  , Commonservice  = '" + commonservice + "' ";
		                    	sql += "\n  Where e164  = '" + changeNum + "' ";
		                    	statement.executeUpdate(sql);
		                        
			        			System.out.println("저장 성공");
		                    }else{
		                        String temp_AnswerService = "";
		                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + changeNum + "'";
		                        rs = statement.executeQuery(sql);
		                        if (rs.next()) temp_AnswerService = rs.getString(1);
		                        rs.close();
		                        String answerService = temp_AnswerService.substring(0, 3) + "3" + temp_AnswerService.substring(4, 64);
		                        
		                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
		                    	sql += "\n  , Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  Where e164  = '" + changeNum + "' ";
		                    	statement.executeUpdate(sql);
		                    	
		                    }
		    			}
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
					String 	forwardnum 	= "";
		            int		forwardType	= 0;
		            
	            	//sql  = " SELECT forwardnum FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
	            	sql  = " SELECT forwardType FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
	            	
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						//forwardnum 	= rs.getString(1);
						forwardType	= rs.getInt(1);
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
	                //if (!"".equals(forwardnum) && forwardnum !=  null){
                    if (forwardType==1 || forwardType == 2){
	                	sql = " Update table_KeyNumberID Set forwardtype = 0, forwardnum = '', vmsforward = 0 "; 
		    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 삭제] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
//			            int cnt = 0;
			            
//		            	sql  = " SELECT count(*) FROM table_E164 WHERE e164 = '" + forwardnum +"' ";
		        		
//		                rs = statement.executeQuery(sql);
//						if (rs.next()){ 
//							cnt = Integer.parseInt(rs.getString(1));
//						}
//						rs.close();
		                
//		                if (rs != null) rs.close();
	                	
//	                    if (cnt > 0){
//			    			String temp_AnswerService = "";
//	                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + forwardnum + "'";
//	                        rs = statement.executeQuery(sql);
//	                        if (rs.next()) temp_AnswerService = rs.getString(1);
//	                        rs.close();
//	                        String answerService = temp_AnswerService.substring(0, 3) + "0" + temp_AnswerService.substring(4, 64);
	
//	                    	sql = " update table_e164 set Answerservice  = '" + answerService + "' ";
//	                    	sql += "\n  Where e164  = '" + forwardnum + "' ";
//	                    	statement.executeUpdate(sql);
//	                    }
	                    
	                    // 조건별 호전환 관련 추가
                    	sql = " delete from table_keynumberforward_days Where keynumber  = '" + e164 + "' ";
                    	statement.executeUpdate(sql);
                    	sql = " delete from table_keynumberforward_week Where keynumber  = '" + e164 + "' ";
                    	statement.executeUpdate(sql);
                    	
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|대표번호 착신전화 ("+e164+" 번)|2|"+strIp);
						// ##############################################
						
	        			System.out.println("삭제 성공");
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberEdit(String insertStr, String changeNum, String callType, String oldChangeNum){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
	                	sql = " Update table_KeyNumberID Set forwardtype = 1, forwardnum = '" + changeNum + "' "; 
		    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                    
		    			if("2".equals(callType)){
				            int cnt2 = 0;
			            	sql  = " SELECT count(*) FROM nasa_vms_user WHERE vms_id = '" + e164 +"'";
			                rs = statement.executeQuery(sql);
							if (rs.next()){ 
								cnt2 = Integer.parseInt(rs.getString(1));
							}
							rs.close();
			                
			                if (rs != null) rs.close();
		                	
		                    if (cnt2 == 0){
		                        String temp_AnswerService = "";
		                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + changeNum + "'";
		                        rs = statement.executeQuery(sql);
		                        if (rs.next()) temp_AnswerService = rs.getString(1);
		                        rs.close();
		                        String answerService = temp_AnswerService.substring(0, 3) + "3" + temp_AnswerService.substring(4, 64);

		                    	String strTemp = getCommonservice(statement, changeNum);
		                    	String commonservice = strTemp.substring(0,8)+"1"+strTemp.substring(9,32);
		                    	
		                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
		                    	sql += "\n  , Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  , Commonservice  = '" + commonservice + "' ";
		                    	sql += "\n  Where e164  = '" + changeNum + "' ";
		                    	statement.executeUpdate(sql);
		                        
			        			System.out.println("저장 성공");
		                    }else{
		                        String temp_AnswerService = "";
		                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + changeNum + "'";
		                        rs = statement.executeQuery(sql);
		                        if (rs.next()) temp_AnswerService = rs.getString(1);
		                        rs.close();
		                        String answerService = temp_AnswerService.substring(0, 3) + "3" + temp_AnswerService.substring(4, 64);
		                        
		                    	sql = " update table_e164 set mailbox = '0000000000^13' ";
		                    	sql += "\n  , Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  Where e164  = '" + changeNum + "' ";
		                    	statement.executeUpdate(sql);
		                    }
		    			}else{
	                        String temp_AnswerService = "";
	                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + changeNum + "'";
	                        rs = statement.executeQuery(sql);
	                        if (rs.next()) temp_AnswerService = rs.getString(1);
	                        rs.close();

	                        String answerService = "";
	                    	if(!"".equals(temp_AnswerService) && temp_AnswerService != null){
	                    		answerService 	= temp_AnswerService.substring(0, 3) + "0" + temp_AnswerService.substring(4, 64);
		                    	
	                    		sql = " update table_e164 set Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  Where e164  = '" + changeNum + "' ";
		                    	statement.executeUpdate(sql);
	                    	}

		    			}
                    
		    			// 수정 전의 착신전환 번호가 table_E164 에 있었던 Data면 착신전환 값을 원이치 시킴.
                        String temp_AnswerService = "";
                    	sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + oldChangeNum + "'";
                        rs = statement.executeQuery(sql);
                        if (rs.next()) temp_AnswerService = rs.getString(1);
                        rs.close();

                        String answerService = "";
                    	if(!"".equals(temp_AnswerService) && temp_AnswerService != null){
                    		answerService 	= temp_AnswerService.substring(0, 3) + "0" + temp_AnswerService.substring(4, 64);
	                    	
        		            int cnt2 = 0;
        	            	sql  = " SELECT count(*) FROM table_KeyNumberID WHERE forwardnum = '" + oldChangeNum +"' ";
        	                rs = statement.executeQuery(sql);
        					if (rs.next()){ 
        						cnt2 = Integer.parseInt(rs.getString(1));
        					}
        					rs.close();
        	                
        	                if (rs != null) rs.close();
                        	
                            if (cnt2 == 0){
	                    		sql = " update table_e164 set Answerservice  = '" + answerService + "' ";
		                    	sql += "\n  Where e164  = '" + oldChangeNum + "' ";
		                    	statement.executeUpdate(sql);
                            }
                    	}
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberInsert_New(String insertStr, String changeNum, String callType, String conditionType, String forwardingType, String fDay, String fWeek, String startTime, String endTim, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            int cnt = 0;
		            
	            	sql  = " SELECT count(*) FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){
                    	if("1".equals(conditionType)){
                    		// 무조건 착신전화 (호전환)
                    		sql = " Update table_KeyNumberID Set forwardtype = 1, forwardnum = '" + changeNum + "' ";
                    		if("2".equals(callType)){
				    			sql = sql + " , vmsforward = 1 ";
                    		}else{
                    			sql = sql + " , vmsforward = 0 ";
                    		}
			    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
			    			nResult = statement.executeUpdate(sql);
			    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
			    			
                    	}else{
                    		// 조건별 착신전화 (호전환)
                    		sql = " Update table_KeyNumberID Set forwardtype = 2 ";
                    		if("2".equals(callType)){
				    			sql = sql + " , vmsforward = 1 ";
                    		}else{
                    			sql = sql + " , forwardnum = '', vmsforward = 0 ";
                    		}
			    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
			    			nResult = statement.executeUpdate(sql);
			    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	                    
			    			
			    			if("1".equals(forwardingType)){
			    				// 일자별 시간 조건
		                    	sql = " insert into table_keynumberforward_days(keynumber, forwardday, starttime, endtime, forwardnumber, vmsforward) ";
		                    	sql += "\n  values('" + e164 + "', '" + fDay + "', '" + startTime + "', '" + endTim + "', '" + changeNum + "' ";
		                    	if("2".equals(callType)){
		                    		sql += " , 1)";
		                    	}else{
		                    		sql += " , 0)";
		                    	}
		                    	statement.executeUpdate(sql);
			    			}else{	
			    				// 요일별 시간 조건
		                    	sql = " insert into table_keynumberforward_week(keynumber, dayoftheweek, starttime, endtime, forwardnumber,vmsforward) ";
		                    	sql += "\n  values('" + e164 + "', '" + fWeek + "', '" + startTime + "', '" + endTim + "', '" + changeNum + "' ";
		                    	if("2".equals(callType)){
		                    		sql += " , 1)";
		                    	}else{
		                    		sql += " , 0)";
		                    	}
		                    	statement.executeUpdate(sql);
			    			}
                    	}
                    	
						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|83|대표번호 착신전화 ("+e164+" 번)|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    // 부서 대표번호 무조건 착신전환 수정인 경우
    public boolean callChangeNumberEdit2(String e164, String changeNum, String callType){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
    		sql = " Update table_KeyNumberID Set forwardtype = 1, forwardnum = '" + changeNum + "' ";
    		if("2".equals(callType)){
    			sql = sql + " , vmsforward = 1 ";
    		}else{
    			sql = sql + " , vmsforward = 0 ";
    		}
			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
			nResult = statement.executeUpdate(sql);
			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

			
        	sql = " delete from table_keynumberforward_days Where keynumber  = '" + e164 + "' ";
        	statement.executeUpdate(sql);
        	sql = " delete from table_keynumberforward_week Where keynumber  = '" + e164 + "' ";
        	statement.executeUpdate(sql);
        	
			
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberEdit_New(String e164, String changeNum, String callType, String conditionType, String forwardingType, String fDay, String fWeek, String startTime, String endTime){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            int cnt = 0;
            
        	sql  = " SELECT count(*) FROM table_KeyNumberID WHERE KEYNUMBERID = '" + e164 +"' ";
    		
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            
            if (rs != null) 
            	rs.close();
        	
            if (cnt > 0){
            	if("1".equals(conditionType)){
            		// 무조건 착신전화 (호전환)
            		sql = " Update table_KeyNumberID Set forwardtype = 1, forwardnum = '" + changeNum + "' ";
            		if("2".equals(callType)){
		    			sql = sql + " , vmsforward = 1 ";
            		}else{
            			sql = sql + " , vmsforward = 0 ";
            		}
	    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
	    			nResult = statement.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	    			
                	sql = " delete from table_keynumberforward_days Where keynumber  = '" + e164 + "' ";
                	statement.executeUpdate(sql);
                	sql = " delete from table_keynumberforward_week Where keynumber  = '" + e164 + "' ";
                	statement.executeUpdate(sql);
                	
            	}else{
            		// 조건별 착신전화 (호전환)
            		sql = " Update table_KeyNumberID Set forwardtype = 2 ";
            		if("2".equals(callType)){
		    			sql = sql + " , forwardnum = '', vmsforward = 1 ";
            		}else{
            			sql = sql + " , forwardnum = '', vmsforward = 0 ";
            		}
	    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
	    			nResult = statement.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
	    			
	    			if("1".equals(forwardingType)){
	    				// 일자별 시간 조건
                    	sql = " insert into table_keynumberforward_days(keynumber, forwardday, starttime, endtime, forwardnumber, vmsforward) ";
                    	sql += "\n  values('" + e164 + "', '" + fDay + "', '" + startTime + "', '" + endTime + "', '" + changeNum + "' ";
                    	if("2".equals(callType)){
                    		sql += " , 1)";
                    	}else{
                    		sql += " , 0)";
                    	}
                    	statement.executeUpdate(sql);
	    			}else{	
	    				// 요일별 시간 조건
                    	sql = " insert into table_keynumberforward_week(keynumber, dayoftheweek, starttime, endtime, forwardnumber,vmsforward) ";
                    	sql += "\n  values('" + e164 + "', '" + fWeek + "', '" + startTime + "', '" + endTime + "', '" + changeNum + "' ";
                    	if("2".equals(callType)){
                    		sql += " , 1)";
                    	}else{
                    		sql += " , 0)";
                    	}
                    	statement.executeUpdate(sql);
	    			}
            	}
            }
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean callChangeNumberDelete_New(String e164, String forwardingType, String forwardValue, String startTime, String endTime){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    		    			
			if("1".equals(forwardingType)){
				// 일자별 시간 조건
            	sql = " Delete From table_keynumberforward_days ";
            	sql += "\n  Where keynumber = '" + e164 + "' And forwardday = '" + forwardValue + "' And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
            	statement.executeUpdate(sql);
			}else{	
				// 요일별 시간 조건
            	sql = " Delete From table_keynumberforward_week ";
            	sql += "\n  Where keynumber = '" + e164 + "' And dayoftheweek = '" + forwardValue + "' And starttime = '" + startTime + "' And endtime = '" + endTime + "' ";
            	statement.executeUpdate(sql);
			}
			
			// table_keynumberforward_days 데이타가 있는지 확인
            int cnt = 0;
        	sql  = " SELECT count(*) FROM table_keynumberforward_days WHERE keynumber = '" + e164 +"' ";
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            if (rs != null) rs.close();
        	
            
            // table_keynumberforward_week 데이타가 있는지 확인
            int cnt2 = 0;
        	sql  = " SELECT count(*) FROM table_keynumberforward_week WHERE keynumber = '" + e164 +"' ";
            rs = statement.executeQuery(sql);
			if (rs.next()){ 
				cnt2 = Integer.parseInt(rs.getString(1));
			}
			rs.close();
            if (rs != null) rs.close();

            
            if(cnt == 0 && cnt2 == 0){
        		// 착신전화 사용 안함으로 설정
        		sql = " Update table_KeyNumberID Set forwardtype = 0 , forwardnum = '', vmsforward = 0 ";
    			sql = sql + " WHERE KEYNUMBERID = '" + e164 +"' ";
    			nResult = statement.executeUpdate(sql);
    			if (nResult < 0){	throw new Exception(l.x("[대표번호 착신전환 번호 등록] '","[Auth Properties Error] '")+l.x("'대표번호 착신전환 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }
            
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean forkingInsert(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	int       	nResult     	= 0;
	        String    	fileName 		= "";
	        String		sipEndpointId 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		e164 		= "";
			
			CommonData		commonData	= new CommonData();
			String 			domainid 	= commonData.getDomain(statement);			// 도메인ID 조회

			String[]		tempDomain;
			if(!"".equals(domainid)){
				tempDomain 		= domainid.split("[.]");
				domainid		= tempDomain[0];
				sipEndpointId 	= "@" + domainid + ".callbox.kt.com:5060";
			}
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
		            String temp_AnswerService 	= "";
		            String answerService 		= "";
		            
		            sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + e164 + "'";
		            rs = statement.executeQuery(sql);
		            if (rs.next()) temp_AnswerService = rs.getString(1);
		            rs.close();                    	
		            answerService = temp_AnswerService.substring(0, 7) + "1" + temp_AnswerService.substring(8, 64);
	
	            	sql = " Update table_E164 Set answerservice = '" + answerService + "' Where e164 = '" + e164 + "' ";
	            	//System.out.println("sql 1 : "+sql);
	            	statement.executeUpdate(sql);
	            	
	            	sql = " Update table_sipendpoint Set multiendpoint = 1 Where endpointid = '" + e164 + sipEndpointId + "' ";
	            	//System.out.println("sql 2 : "+sql);
	            	statement.executeUpdate(sql);
	            	
	            	//hc-add : req.chun : 인증 ID별 복수 단말 허용
	            	sql = " Update table_sipendpoint Set multiendpoint = 1 ";
	            	sql += "\n Where endpointid = (select endpointid from table_e164route where e164 = '"+ e164 +"' and routingnumbertype = 1) ";
	            	statement.executeUpdate(sql);
	            	
	            	/***** SSW 처리(090615) ********/
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,endpointID, statement.getString());
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)0,e164 + sipEndpointId, "");
	                int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,e164 + sipEndpointId," ",  "(SSW).active" );
	                
					// ############### LogHistory 처리  ###############
					int int_result = logHistory.LogHistorySave(userID+"|83|원넘버멀티폰 ("+e164+" 번)|1|"+strIp);
					// ##############################################
					
	    			System.out.println("저장 성공");
	        			
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean forkingDelete(String deleteStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	int       	nResult     	= 0;
	        String    	fileName 		= "";
	        String		sipEndpointId 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(deleteStr, "");
			String		e164 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			CommonData		commonData	= new CommonData();
			String 			domainid 	= commonData.getDomain(statement);			// 도메인ID 조회

			String[]		tempDomain;
			if(!"".equals(domainid)){
				tempDomain 		= domainid.split("[.]");
				domainid		= tempDomain[0];
				sipEndpointId 	= "@" + domainid + ".callbox.kt.com:5060";
			}
			

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					e164   = blockStr[k];
		            
		            String temp_AnswerService 	= "";
		            String answerService 		= "";
		            
		            sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + e164 + "'";
		            rs = statement.executeQuery(sql);
		            if (rs.next()) temp_AnswerService = rs.getString(1);
		            rs.close();                    	
		            answerService = temp_AnswerService.substring(0, 7) + "0" + temp_AnswerService.substring(8, 64);
	
	            	sql = " Update table_E164 Set answerservice = '" + answerService + "' Where e164 = '" + e164 + "' ";
	            	//System.out.println("sql 1 : "+sql);
	            	statement.executeUpdate(sql);
	            	
	            	sql = " Update table_sipendpoint Set multiendpoint = 0 Where endpointid = '" + e164 + sipEndpointId + "' ";
	            	//System.out.println("sql 2 : "+sql);
	            	statement.executeUpdate(sql);
	            	
	            	//hc-add : req.chun : 인증 ID별 복수 단말 허용
	            	sql = " Update table_sipendpoint Set multiendpoint = 0 ";
	            	sql += "\n Where endpointid = (select endpointid from table_e164route where e164 = '" +e164+ "' and routingnumbertype = 1)  ";
	            	statement.executeUpdate(sql);
	            	
	            	/***** SSW 처리(090615) ********/
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,endpointID, statement.getString());
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)0,e164 + sipEndpointId, "");
	                int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,e164 + sipEndpointId," ",  "(SSW).active" );
	                
					// ############### LogHistory 처리  ###############
					int int_result = logHistory.LogHistorySave(userID+"|83|원넘버멀티폰 ("+e164+" 번)|2|"+strIp);
					// ##############################################

	    			System.out.println("저장 성공");
	        			
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

}
