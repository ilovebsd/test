package dao.addrbook;

import java.sql.ResultSet;
import java.util.List;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.AddrBookDTO;
import dto.AddrBookGroupDTO;

public class AddrBookFileDAO {

    public AddrBookFileDAO() {}
    
    /*
	 * addrid 가져오기
	 */
	public int getMaxID(DataStatement stmt, String OwnerID, int GroupId ) {
		int max = 0 ;
		String selectQuery = "SELECT coalesce(max(AddrID),0) " ;
        selectQuery    += " FROM table_AddrBook ";
        selectQuery += "WHERE OwnerID= '"   +   OwnerID  +   "' and GroupId ="    +    GroupId;
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
	
	/*
	 * grouid 가져오기
	 */
	public int getMaxID(DataStatement stmt, String OwnerID ) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(GroupID),0) " ;
		sql = sql +  "\n   FROM table_AddrBookGroup ";
		sql = sql +  "\n  WHERE OwnerID = '" + OwnerID + "'"  ;
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
    
    public int getExistChk(DataStatement stmt, AddrBookDTO addrBook) {
    	int cnt = 0;
    	String selectQuery = "";
    	
    	selectQuery  = "\n SELECT count(*) " ;
        selectQuery += "\n   FROM table_AddrBook ";
        if(addrBook.getCommon() == 1){
        	selectQuery += "\n  WHERE common    = 1 ";
        	selectQuery += "\n    AND OwnerID   = '" + addrBook.getOwnerID()   + "'";
            selectQuery += "\n    AND name      = '" + addrBook.getName()      + "'";
            selectQuery += "\n    AND keynumber = '" + addrBook.getKeyNumber() + "'";
        }else if(addrBook.getCommon() == 2){
        	selectQuery += "\n  WHERE common    = 2 ";
            selectQuery += "\n    AND name      = '" + addrBook.getName()      + "'";
            selectQuery += "\n    AND keynumber = '" + addrBook.getKeyNumber() + "'";
        }

        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) cnt = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return cnt;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
    	return cnt;
    }
    
    public int insert(DataStatement stmt, AddrBookDTO addrBook) {
        System.out.println("insert--->1");

        ResultSet rs = null;
        int nResult = 0;
        int max = getMaxID(stmt, addrBook.getOwnerID(),addrBook.getGroupID());
       
        try {            
            if (stmt != null) {
                String sql = "INSERT INTO table_AddrBook (ownerid, groupid,AddrID,IdType,name,idx,PhoneNum,Mobile,Position";
                	sql = sql + " ,mailaddress,company,companynumber,fax,birthday ";		// 2011.01.10 엑셀 주소록 가져오기 관련 추가
                	sql = sql + " ,Department,Address,Memo,UsePhoneACF,UseMobileACF,companyaddress,keynumber,common,shareddate,Createdate ) ";
                	sql = sql + " values ( " ;
                	sql = sql + "'" + addrBook.getOwnerID()        + "', " ;
                	sql = sql + " " + addrBook.getGroupID()        + " , " ;            
                	sql = sql + " " + (max + 1)                    + " , " ; 
                	sql = sql + " " + addrBook.getIdType()         + " , " ; 
                	sql = sql + "'" + addrBook.getName()           + "', " ;
                	sql = sql + " " + (max + 1)                    + " , " ; 
                	sql = sql + "'" + addrBook.getPhoneNum()       + "', " ;
                	sql = sql + "'" + addrBook.getMobile()         + "', " ;
                	sql = sql + "'" + addrBook.getPosition()       + "', " ;
                	
                	sql = sql + "'" + addrBook.getMailAddress()    + "', " ;
                	sql = sql + "'" + addrBook.getCompany()        + "', " ;
                	sql = sql + "'" + addrBook.getCompanyNumber()  + "', " ;
                	sql = sql + "'" + addrBook.getFax()       	   + "', " ;
                	sql = sql + "'" + addrBook.getBirthday()       + "', " ;
                	
                	sql = sql + "'" + addrBook.getDepartment()     + "', " ;
                	sql = sql + "'" + addrBook.getAddress()        + "', " ;
                	sql = sql + "'" + addrBook.getMemo()           + "', " ;
                	sql = sql + ""  + addrBook.getUsePhoneACF()    + " , " ;
                	sql = sql + ""  + addrBook.getUseMobileACF()   + " , " ;
                	sql = sql + "'" + addrBook.getCompanyAddress() + "', " ;
                	sql = sql + "'" + addrBook.getKeyNumber()      + "', " ;
                	sql = sql + ""  + addrBook.getCommon()         + " , " ;
                	if(addrBook.getCommon() == 2){
                    	sql +=  " Now(), ";
                	}else{
                    	sql +=  " null, ";
                	}
                	sql = sql + " Now()) ";
                    System.out.println("insert--->"+sql);
                    
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    /*
     * 핸드폰 업로드시 추가
     */
    public int insert(DataStatement stmt, String ownerid , String groupName) {

        ResultSet rs = null;
        int    nResult = 0;
        int    groupid = 0;
        String sql     = "";
        
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT groupid " ;
            	sql += "\n   FROM table_AddrBookGroup ";
            	sql += "\n  WHERE OwnerID = '" + ownerid   + "'";
            	sql += "\n    AND name    = '" + groupName + "'";
            	
            	rs = stmt.executeQuery(sql);
                if (rs.next()){ 
                	groupid = rs.getInt(1); 
                }else{
                	int max = getMaxID(stmt, ownerid);
                	
                	sql  = "INSERT INTO table_AddrBookGroup (ownerid, groupid, name, idx, idtype, memo, common) ";
                	sql += " values ( " ;
                	sql += "'" + ownerid   + "', " ;
                	sql += " " + (max + 1) + " , " ;            
                	sql += "'" + groupName + "', " ;
                	sql += " " + (max + 1) + " , " ;
                	sql += " " + (max + 1) + " , " ;
                	sql += "'', " ;
                	sql += "1";
                	sql += ") ";

	                nResult = stmt.executeUpdate(sql);
	                if (nResult >= 1)
	                	groupid = max + 1;
	                else
	                    System.out.println("입력 실패");
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}

            return groupid ;
        }        
    }
    
    /*
     * 핸드폰 업로드시 중복체크
     */
    public int getExistChk(DataStatement stmt, String ownerid, String mobile, String name) {
    	int cnt = 0;
    	String selectQuery = "";
    	
    	selectQuery  = "\n SELECT count(*) " ;
        selectQuery += "\n   FROM table_AddrBook ";
        selectQuery += "\n  WHERE OwnerID = '" + ownerid + "'";
        selectQuery += "\n    AND mobile  = '" + mobile  + "'";
        selectQuery += "\n    AND name    = '" + name    + "'";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) cnt = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return cnt;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
    	return cnt;
    }

}