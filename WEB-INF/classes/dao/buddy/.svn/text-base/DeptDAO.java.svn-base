package dao.buddy;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;

import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;

import dto.DeptDTO;
import acromate.common.util.StringUtil;

// PYK 20090120 ------------
import dto.ipcs.IpcsDeptDTO;
import dao.ipcs.IpcsDeptDAO;
import business.CommonData;
import acromate.ConnectionManager;
// -------------------------
import acromate.*;

public class DeptDAO {

    public DeptDAO() {}
    
	public int getMaxID(DataStatement stmt) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(deptid),0) " ;
		sql = sql +  "\n   FROM table_dept ";
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }

	public int getMaxSort1(DataStatement stmt) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(sortnumber1),0) " ;
		sql = sql +  "\n   FROM table_dept ";
		sql = sql +  "\n  WHERE deptid  != parentid ";
		sql = sql +  "\n    AND parentid = 1";
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }

	public int getMaxSort2(DataStatement stmt, int parentid) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(sortnumber2),0) " ;
		sql = sql +  "\n   FROM table_dept ";
		sql = sql +  "\n  WHERE sortnumber1  = " + parentid;
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }

	public int getParentSort(DataStatement stmt, int parentid) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(sortnumber1,0) " ;
		sql = sql +  "\n   FROM table_dept ";
		sql = sql +  "\n  WHERE deptid = " + parentid;
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
	
    public int insert(DataStatement stmt, DeptDTO deptDTO) {

        ResultSet rs = null;
        int nResult = 0;

        int max = getMaxID(stmt);

        int sortMax1 = 0;
        int sortMax2 = 0;
        
        if("0".equals(deptDTO.getDeptGubun())){
        	sortMax1 = getMaxSort1(stmt);
        	sortMax1 = sortMax1 + 1;
        	sortMax2 = 0;
        }else if("1".equals(deptDTO.getDeptGubun())){
        	sortMax1 = getParentSort(stmt, deptDTO.getParentID());
        	//sortMax2 = getMaxSort2(stmt, deptDTO.getParentID());
        	//sortMax2 = sortMax2 + 1;
        	sortMax2 = 1;			// 20090724(조직도 관련해서 SortNumber2 가 2로 저장되는 경우가 있어서 무조건 1로 되게 수정)
        }else{
        	sortMax1 = -1;
        	sortMax2 = -1;
        }

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n INSERT INTO table_dept (deptid, deptname, orgchartid, parentid, description, type, ";
            	sql = sql +  "\n                         usepickup, keynumber, officebox, operation, sortnumber1, sortnumber2) ";
            	sql = sql +  "\n                 values (" ;
            	sql = sql + " " + (max + 1)              + " , " ;            
            	sql = sql + "'" + deptDTO.getDeptName()  + "', " ;
            	sql = sql + " " + "0"                    + " , " ; 
            	sql = sql + " " + deptDTO.getParentID()  + " , " ; 
            	sql = sql + "'" + ""                     + "', " ;
            	sql = sql + " " + "0"                    + " , " ; 
            	sql = sql + " " + "1"                    + " , " ; 
            	sql = sql + "'" + deptDTO.getKeyNumber() + "', " ;
            	sql = sql + "'" + ""                     + "', " ;
            	sql = sql + " " + "1"                    + " , " ; 
            	sql = sql + " " + sortMax1               + " , " ;            
            	sql = sql + " " + sortMax2               + "   " ;            
            	sql = sql + ") ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // 부서대표번호 SMS 관련 추가 (2012.11.21) ---------------
                if(!"".equals(deptDTO.getKeyNumber()) && deptDTO.getKeyNumber() != null){
	                String sql2 = "\n INSERT INTO table_keynumber_sms (keynumberid, e164) values ('" + deptDTO.getKeyNumber() + "', '')";
	                System.out.println("insert--->"+sql2);
	                                        
	                nResult = stmt.executeUpdate(sql2);
	                if (nResult >= 1)
	                    System.out.println("KeyNumber SMS 입력 성공");
	                else
	                    System.out.println("KeyNumber SMS 입력 실패");
                }
                // --------------------------------------------------
                
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult ;
    }
    
    public int update(DataStatement stmt, DeptDTO deptDTO, String keynumberType) {
    	ResultSet rs = null;
        int 	nResult 		= 0;
        int 	oldMaxHuntIndex = 0;
        int 	newMaxHuntIndex = 0;
        String	sql 			= "";
        Vector 	vecTmpKeyNum 	= new Vector();
        try {            
        	if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptDTO.getDeptID() + "";
                rs = stmt.executeQuery(sql);
                String oldKeynumber = "";
                if(rs.next()==true){
                	oldKeynumber = rs.getString("keynumber");	// 사용중인 부서 대표번호
                }
                rs.close();            	
                String newKeynumber = deptDTO.getKeyNumber();	// 변경된 부서 대표번호
            	
                if("1".equals(keynumberType)){                	
                	// 부서 대표번호를 사용하는 경우
                	if (!"".equals(oldKeynumber) && oldKeynumber != null){
                		// 부서 대표번호가 있었는데 다른 번호로 변경 되는 경우								(1번경우)
                    	sql = "\n UPDATE table_dept " ;
                        sql = sql +  "\n    Set deptname   = '" + deptDTO.getDeptName() + "' " ;
                        sql = sql +  "\n      , keynumber  = '" + newKeynumber + "' " ;
                        sql = sql +  "\n Where deptid = " + deptDTO.getDeptID();                  
                        nResult = stmt.executeUpdate(sql);
                        System.out.println("1-1:"+sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                    	sql = "\n UPDATE table_keynumber " ;
                        sql = sql +  "\n    Set keynumberid  = '" + newKeynumber + "' " ;
                        sql = sql +  "\n Where keynumberid = '" + oldKeynumber + "'";                  
                        nResult = stmt.executeUpdate(sql);
                        System.out.println("1-2:"+sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                		
                        
                        sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "'";
                        rs = stmt.executeQuery(sql);
                        if (rs.next()) oldMaxHuntIndex = rs.getInt(1);
                        rs.close();
                    
                        sql   = "Update table_keynumberid set maxhuntindex = " + oldMaxHuntIndex + " Where keynumberid = '" + oldKeynumber + "'";
                        System.out.println("1-3:"+sql);
                        nResult = stmt.executeUpdate(sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                        
                        
                        sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
                        rs = stmt.executeQuery(sql);
                        if (rs.next()) newMaxHuntIndex = rs.getInt(1);
                        rs.close();
                    
                        sql   = "Update table_keynumberid set maxhuntindex = " + newMaxHuntIndex + " Where keynumberid = '" + newKeynumber + "'";
                        System.out.println("1-4:"+sql);
                        nResult = stmt.executeUpdate(sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                        

                	}else{
                		// 전에 부서 대표번호를 사용하지 않다가 지금부터 새로운 부서 대표번호를 사용하는 경우		(3번경우)
                    	sql = "\n UPDATE table_dept " ;
                        sql = sql +  "\n    Set deptname   = '" + deptDTO.getDeptName() + "' " ;
                        sql = sql +  "\n      , keynumber  = '" + newKeynumber + "' " ;
                        sql = sql +  "\n Where deptid = " + deptDTO.getDeptID();                  
                        nResult = stmt.executeUpdate(sql);
                        System.out.println("2-1:"+sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                		
	    	            sql = "SELECT phonenum FROM table_subscriber WHERE department = " + deptDTO.getDeptID();
	    	            rs = stmt.executeQuery(sql);
	    	            while(rs.next()){
	    	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
	    	            }
	    	            rs.close();
	    	            
	    	            int 	nTmp2 		= vecTmpKeyNum.size();
	    	            int 	nTmp3 		= 0;
	    	            String	strE164 	= ""; 
	    	            for(int i=0; i < nTmp2; i++){
	    	            	strE164 = (String)vecTmpKeyNum.get(i);
	    	            	nTmp3 = nTmp3 + 1;
	    	            	sql = "\n  Insert into table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
	    	            	sql = sql + "\n  values('" + newKeynumber + "', '" + strE164 + "', " + nTmp3 + ", 0, '0000', '2400')";
	    	                System.out.println("2-2-"+i+"번째:"+sql);
	    	                stmt.executeUpdate(sql);                
	    	            }
                		
	    	            sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
	    	            rs = stmt.executeQuery(sql);
	    	            if (rs.next()) newMaxHuntIndex = rs.getInt(1);
	    	            rs.close();

	    	            sql   = "Update table_keynumberid set maxhuntindex = " + newMaxHuntIndex + " Where keynumberid = '" + newKeynumber + "'";
	    	            System.out.println("2-3:"+sql);
	    	            nResult = stmt.executeUpdate(sql);
	    	            if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                        
	    	            
                	}
                	
                }else{
                	// 부서 대표번호를 사용하지 않는 경우
                	if (!"".equals(oldKeynumber) && oldKeynumber != null){
                		// 전에 부서 대표번호를 사용하다가 지금은 부서 대표번호를 사용하지 않는 경우				(2번경우)
                		sql = "\n UPDATE table_dept " ;
                		sql = sql +  "\n    Set deptname   = '" + deptDTO.getDeptName() + "' " ;
                		sql = sql +  "\n      , keynumber  = null " ;
                		sql = sql +  "\n Where deptid = " + deptDTO.getDeptID();                  
                		nResult = stmt.executeUpdate(sql);
                		System.out.println("3-1:"+sql);
                		if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                		
                		sql = "Delete From table_keynumber Where keynumberid = '" + oldKeynumber + "'";
                		nResult = stmt.executeUpdate(sql);
                		System.out.println("3-2:"+sql);
                		if (nResult < 0){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                		
                		sql   = "Update table_keynumberid set maxhuntindex = 0 Where keynumberid = '" + oldKeynumber + "'";
                		System.out.println("3-3:"+sql);
                		nResult = stmt.executeUpdate(sql);
                		if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                		
                	}else{
                		// 전부터 지금까지 부서 대표번호 사용하지 않음
                    	sql = "\n UPDATE table_dept  " ;
                        sql = sql +  "\n    Set deptname   = '" + deptDTO.getDeptName() + "' " ;
                        sql = sql +  "\n Where deptid = " + deptDTO.getDeptID();                  
                        nResult = stmt.executeUpdate(sql);
                        System.out.println("4-1:"+sql);
                        if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                	}
                }
                
                // 부서대표번호 SMS 관련 추가 (2012.11.21) ----------------
            	if (!"".equals(oldKeynumber) && oldKeynumber != null){
            		sql = "Delete From table_keynumber_sms Where keynumberid = '" + oldKeynumber + "'";
            		nResult = stmt.executeUpdate(sql);
            		System.out.println("5-1:"+sql);
            		if (nResult < 0){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+newKeynumber+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            	}
            	
            	if("1".equals(keynumberType)){
	                if(!"".equals(newKeynumber) && newKeynumber != null){
		                sql = "\n INSERT INTO table_keynumber_sms (keynumberid, e164) values ('" + newKeynumber + "', '')";
		                System.out.println("insert--->"+sql);               
		                nResult = stmt.executeUpdate(sql);
	                }
            	}
            	// ---------------------------------------------------
            	
            	
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
            e.printStackTrace();
        }        
        return nResult ;
    }
    
    public int delete(DataStatement stmt, DeptDTO deptDTO) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
            	String sql = "";
            	// 부서대표번호 SMS 관련 추가 (2012.11.21) ----------------
                sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptDTO.getDeptID() + "";
                rs = stmt.executeQuery(sql);
                String oldKeynumber = "";
                if(rs.next()==true){
                	oldKeynumber = rs.getString("keynumber");	// 사용중인 부서 대표번호
                }
            	if (!"".equals(oldKeynumber) && oldKeynumber != null){
            		sql = " Delete From table_keynumber_sms Where keynumberid = '" + oldKeynumber + "' ";
            		nResult = stmt.executeUpdate(sql);
            		System.out.println("부서대표번호 SMS Delete : "+sql);
            	}
            	// ---------------------------------------------------

            	sql = " Delete From table_dept WHERE  deptid = " + deptDTO.getDeptID() + " ";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }

    public boolean deptNumberInsert(DeptDTO deptDTO, int deptID, String groupid) {
    	boolean 		returnVal = false;
    	try {                    	
        	IpcsDeptDTO ipcsDeptDTO = new IpcsDeptDTO();
        	// LocalPrefix 테이블
        	ipcsDeptDTO.setStartprefix(WebUtil.CheckNullString(deptDTO.getKeyNumber().trim()));
        	ipcsDeptDTO.setEndprefix(deptDTO.getKeyNumber());
        	ipcsDeptDTO.setPrefixtype(4);
        	ipcsDeptDTO.setEndpointid(deptDTO.getKeyNumber());
        	
        	// KeyNumberID 테이블
        	ipcsDeptDTO.setKeynumberid(deptDTO.getKeyNumber());
        	ipcsDeptDTO.setKeynumberdesc(deptDTO.getKeyNumber());
        	ipcsDeptDTO.setHunt(1);
        	ipcsDeptDTO.setMaxhuntindex(0);
        	ipcsDeptDTO.setHuntconstraint(0);
        	ipcsDeptDTO.setGroupid(groupid);		// 지역번호 제외한 전화번호
        	
        	IpcsDeptDAO ipcsDao = new IpcsDeptDAO();
        	returnVal = ipcsDao.ipcsDeptInsert(ipcsDeptDTO);
        	
        	if(returnVal){
        		System.out.println("부서대표번호 저장성공------^^");
        	}else{
        		System.out.println("부서대표번호 저장실패------ㅜㅜ");
        	}	
            
        	returnVal = true;
        	
        } catch (Exception e) {
        	returnVal = false;
        	
        	e.printStackTrace();
        }
        
        return returnVal ;
    }

    public int deptPickUpInsert(DataStatement stmt, String groupid, int max2, String deptname) {
    	ResultSet rs = null;
        int nResult = 0;
        deptname = deptname + " Pick-Up Group";
        try {            
            if (stmt != null) {
                String sql = "Insert Into Table_Subgroup Values('" +groupid+ "', '" +max2+ "', '" + deptname + "')";
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("Pick-Up 부서 저장 성공"); 
                }
                else
                    System.out.println("Pick-Up 부서 저장 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }

    public int localprefixDelete(DataStatement stmt, String keynumber) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From Table_Localprefix ";
                sql = sql +  "\n       Where endpointid = '" + keynumber + "'";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }

    public int keynumberidDelete(DataStatement stmt, String keynumber) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From Table_Keynumberid ";
                sql = sql +  "\n       Where keynumberid = '" + keynumber + "'";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }

    public int subgroupDelete(DataStatement stmt, String deptId) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From Table_Subgroup ";
                sql = sql +  "\n       Where subid = '" + deptId + "'";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }
    
    public int updateSortPro(DataStatement stmt, String sortStr, String sortDeptnumber, String smsNumber) {
        int      nResult = 0;
        String[] positionStr = StringUtil.getParser(sortStr, "");
        
        try {      
	        if(positionStr != null){
	        	// 트랜잭션 시작
				stmt.stxTransaction();
				
				for(int i=0; i < positionStr.length; i++){
					String[] dataStr = StringUtil.getParser(positionStr[i], "|");
					if (stmt != null) {
		                String sql = "\n UPDATE TABLE_Keynumber  " ;
		                sql = sql +  "\n    Set indexno    = " + dataStr[1];
		                sql = sql +  "\n  Where e164 = '" + dataStr[0] + "' ";
		                sql = sql +  "\n    And keynumberid = '" + sortDeptnumber + "' ";
		                nResult = stmt.executeUpdate(sql);
		                if (nResult >= 1)
		                    System.out.println("수정  성공");
		                else
		                    System.out.println("수정  실패");		                
					}
				}
				
                String sql2 = "\n UPDATE table_keynumber_sms  Set e164 = '" + smsNumber + "'  Where keynumberid = '" + sortDeptnumber + "' ";
                nResult = stmt.executeUpdate(sql2);

                
				if (stmt != null)
					stmt.endTransaction(true);
	        }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return nResult ;			
        }
    }
    
}