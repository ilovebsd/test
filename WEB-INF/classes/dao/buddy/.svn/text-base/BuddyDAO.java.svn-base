package dao.buddy;

import acromate.*;

import java.sql.ResultSet;
import java.util.Vector;
//import java.util.List;
import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
//import dto.ipcs.IpcsUserDTO;
import acromate.common.util.StringUtil;

import business.LogHistory;

public class BuddyDAO {

    public BuddyDAO() {}   
    
    public boolean buddyInsert(String hiEndPointID, String hiEi64, String hiPwd, String hiName, String hiPosition, String hiDept, String hiMobile, String hiHomeNumber, String hiMail, String hiExtension){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpKeyNum 	= new Vector();
    	try {
    		System.out.println("############ 수정 : 1111111");
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		endpointID	= hiEndPointID;		// 연결된 단말기 ID
	    	String 		e164		= hiEi64;			// E164
	    	String 		pwd			= hiPwd;			// E164
	    	String 		name		= hiName;			// 사용자명
	    	String 		position	= hiPosition;		// 직위
	    	String 		dept		= hiDept;			// 부서/상위부서ID
	    	String 		mobile		= hiMobile;			// 핸드폰
	    	String 		homeNumber	= hiHomeNumber;		// 집전화
	    	String 		mail		= hiMail;			// 메일
	    	System.out.println("############ 수정 : 222222");
			String[]	tempStr 	= dept.split("[|]");
			String 		deptId		= tempStr[0];		
			String		parentID	= tempStr[1];
			String		pickUpID	= "";
			System.out.println("############ 수정 : 3333333");
			System.out.println("############ 부서/상위부서 : "+dept);
			System.out.println("############ 상위부서 : "+parentID);
			System.out.println("############ 수정  444444 : "+e164);
			//int			sumTemp		= e164.length()-4;
			//System.out.println("############ 시작위치 : "+sumTemp);
			//System.out.println("############ 4자리 : "+e164.substring(5, 4));
			//String		extensionNum= e164.substring(sumTemp);
			String		extensionNum= hiExtension;
			System.out.println("############ 내선번호 : "+extensionNum);
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	System.out.println("############ 수정 : 55555555");
            /***** TABLE_SUBSCRIBER 추가/수정 ********/
	    	sql = "SELECT COUNT(*) FROM TABLE_SUBSCRIBER WHERE ID = '"+endpointID+"'";
	    	System.out.println("00:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count == 0){
            	// 추가 저장
                /***** 사용자테이블(table_subscriber) 등록********/
                sql = "INSERT INTO table_subscriber(id, loginlevel , pwd, phonenum, name, position, department, mobile, homenumber, extension, mailaddress) ";
                sql = sql + " VALUES ('" + endpointID  + "', 1, '" + pwd  + "', '" + e164  + "', '" + name  + "', '" + position  + "', " + deptId  + ", ";
                sql = sql + " '" + mobile  + "', '" + homeNumber  + "', '" + extensionNum  + "', '" + mail  + "')";
                System.out.println("1:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[사용자 등록 오류] '","[Auth Properties Error] '")+endpointID+l.x("'는 사용자 정보등록이 실패하였습니다. 사용자 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            

            	/***** 프레즌스(Presence) 테이블 업데이트 *******/
                sql = "SELECT COUNT(*) FROM table_Presence WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                //등록시각을 불러온다
                int registerTime = 0;
                sql = "SELECT registeredTime FROM table_sipcontact WHERE endpointid='" + endpointID + "'";
                rs = statement.executeQuery(sql);
                if (rs.next()) registerTime = rs.getInt(1);
                rs.close();
                
                sql   = "INSERT INTO table_presence(UserE164, EndpointID, Protocol, UserType, Options, RegisterTime, PresenceStatus) ";            
                sql += " VALUES ('" + e164  + "', '" + endpointID  + "', 2, 101, 0, " + registerTime + ",0)";
                System.out.println("1-2:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
                sql = "SELECT COUNT(*) FROM table_PresenceReport WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[PresenceReport정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 PresenceReport 정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                sql   = "INSERT INTO table_PresenceReport(UserE164, OfferID, Protocol, OfferType, ReportType) ";
                sql += " VALUES ('" + e164  + "', '', 0, 0, 101)";
                System.out.println("1-3:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){            
    	            sql   = "Insert into table_presenceReport(usere164, offerid, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 From table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' ";
    	            System.out.println("1-4:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            System.out.println("1-4-1:"+nResult);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                }
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' and offerid <> '' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){                        
    	            sql   = "Insert into table_presenceReport(offerid, usere164, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 from table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' and offerid <> '' ";           
    	            System.out.println("1-5:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	            
                }
                
                /***** 부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록********/
                sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String tempKeynumber = "";
                if(rs.next()==true){
                	tempKeynumber = rs.getString("keynumber");
                }
                rs.close();
                if (!"".equals(tempKeynumber) && tempKeynumber != null){	
                    int nextIndex = 0;
                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
                    rs.close();
                	
                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
                    sql += " VALUES ('"+tempKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
                    System.out.println("1-6:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                    int maxHuntIndex = 0;
                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) maxHuntIndex = rs.getInt(1);
                    rs.close();
                
                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + tempKeynumber + "'";
                    System.out.println("1-7:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                }
                
            }else{
            	// 수정 (부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록)

            	/***** 기존 부서대표번호 조회********/
            	sql = "SELECT keynumber, deptid FROM table_dept WHERE  deptid = (Select department From Table_Subscriber Where id = '" + endpointID + "')";
                rs = statement.executeQuery(sql);
                String 	oldKeynumber = "";
                int		oldID		= 0;
                if(rs.next()==true){
                	oldKeynumber 	= rs.getString("keynumber");
                	oldID			= rs.getInt("deptid");
                }
                rs.close();
                
            	/***** 새롭게 변경된 부서대표번호 조회********/
            	sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String newKeynumber = "";
                if(rs.next()==true){
                	newKeynumber = rs.getString("keynumber");
                }
                rs.close();
                
                // 기존의 부서 대표번호와 새로운 부서 대표번호가 같은지 비교
                if((oldKeynumber.equals(newKeynumber)) && (oldID == Integer.parseInt(deptId))){
	                // 부서 변경을 안한 경우
                	sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }else{
                	// 부서가 변경된 경우
	                if (!"".equals(newKeynumber) && newKeynumber != null){	
	                    // 새로운 부서에 부서 대표번호가 있는 경우
	                	int nextIndex = 0;
	                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
	                    rs = statement.executeQuery(sql);
	                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
	                    rs.close();
	                	
	                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
	                    sql += " VALUES ('"+newKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
	                    System.out.println("1-6:"+sql);
	                    nResult = statement.executeUpdate(sql);
	                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
	                
	                    int maxHuntIndex = 0;
	                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
	                    rs = statement.executeQuery(sql);
	                    if (rs.next()) maxHuntIndex = rs.getInt(1);
	                    rs.close();
	                
	                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + newKeynumber + "'";
	                    System.out.println("1-7:"+sql);
	                    nResult = statement.executeUpdate(sql);
	                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                	                
	                }

	                if (!"".equals(oldKeynumber) && oldKeynumber != null){	
	                    // 기존 부서에 부서 대표번호가 있는 경우
	                    sql   = "DELETE FROM table_keynumber WHERE e164 = '" + e164  + "' And keynumberid = '" + oldKeynumber + "' ";            
	                    System.out.println("1-6:"+sql);
	                    nResult = statement.executeUpdate(sql);
	                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
	                    //////////////////////
	    	            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "' Order by indexno";
	    	            rs = statement.executeQuery(sql);
	    	            while(rs.next()){
	    	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
	    	            }
	    	            rs.close();
	    	            
	    	            int 	nTmp2 		= vecTmpKeyNum.size();
	    	            int 	nTmp3 		= 0;
	    	            String	strE164 	= ""; 
	    	            for(int i=0; i < nTmp2; i++){
	    	            	strE164 = (String)vecTmpKeyNum.get(i);
	    	            	nTmp3 = nTmp3 + 1;
	    	            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' ";
	    	                System.out.println("9-"+i+"번째:"+sql);
	    	                statement.executeUpdate(sql);                
	    	            }
	    	            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + oldKeynumber + "' ";
	    	            System.out.println("10번째:"+sql);
	    	            statement.executeUpdate(sql);	                	                
	                }
	                
	                sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }
            }

            
            System.out.println("############ 수정 : 6666666");
            statement.endTransaction(true);			// commit 처리
            System.out.println("############ 수정 : 77777777");
	        returnVal = true;
	        System.out.println("############ 수정 : 88888888");
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    
    public boolean buddyEdit(String hiEndPointID, String hiEi64, String hiName, String hiPosition, String hiDept, String hiMobile, String hiHomeNumber, String hiMail, String hiExtension){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpKeyNum 	= new Vector();
    	try {
    		System.out.println("############ 수정 : 1111111");
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		endpointID	= hiEndPointID;		// E164
	    	String 		e164		= hiEi64;			// 연결된 단말기 ID	    	
	    	String 		name		= hiName;			// 사용자명
	    	String 		position	= hiPosition;		// 직위
	    	String 		dept		= hiDept;			// 부서/상위부서ID
	    	String 		mobile		= hiMobile;			// 핸드폰
	    	String 		homeNumber	= hiHomeNumber;		// 집전화
	    	String 		mail		= hiMail;			// 메일
			String[]	tempStr 	= dept.split("[|]");
			String 		deptId		= tempStr[0];		
//			String		parentID	= tempStr[1];
//			String		pickUpID	= "";
			
			//int			sumTemp		= e164.length()-4;
			//String		extensionNum= e164.substring(sumTemp);
			String		extensionNum= hiExtension;
			String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	System.out.println("############ 수정 : 55555555");
            /***** TABLE_SUBSCRIBER 추가/수정 ********/
	    	sql = "SELECT COUNT(*) FROM TABLE_SUBSCRIBER WHERE ID = '"+endpointID+"'";
	    	System.out.println("00:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count == 0){
            	// 추가 저장
                /***** 사용자테이블(table_subscriber) 등록********/
                sql = "INSERT INTO table_subscriber(id, loginlevel , pwd, phonenum, name, position, department, mobile, homenumber, extension, mailaddress) ";
                sql = sql + " VALUES ('" + endpointID  + "', 1, '" + e164  + "', '" + e164  + "', '" + name  + "', '" + position  + "', " + deptId  + ", ";
                sql = sql + " '" + mobile  + "', '" + homeNumber  + "', '" + extensionNum  + "', '" + mail  + "')";
                System.out.println("1:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[사용자 등록 오류] '","[Auth Properties Error] '")+endpointID+l.x("'는 사용자 정보등록이 실패하였습니다. 사용자 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            

            	/***** 프레즌스(Presence) 테이블 업데이트 *******/
                sql = "SELECT COUNT(*) FROM table_Presence WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                //등록시각을 불러온다
                int registerTime = 0;
                sql = "SELECT registeredTime FROM table_sipcontact WHERE endpointid='" + endpointID + "'";
                rs = statement.executeQuery(sql);
                if (rs.next()) registerTime = rs.getInt(1);
                rs.close();
                
                sql   = "INSERT INTO table_presence(UserE164, EndpointID, Protocol, UserType, Options, RegisterTime, PresenceStatus) ";            
                sql += " VALUES ('" + e164  + "', '" + endpointID  + "', 2, 101, 0, " + registerTime + ",0)";
                System.out.println("1-2:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
                sql = "SELECT COUNT(*) FROM table_PresenceReport WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[PresenceReport정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 PresenceReport 정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                sql   = "INSERT INTO table_PresenceReport(UserE164, OfferID, Protocol, OfferType, ReportType) ";
                sql += " VALUES ('" + e164  + "', '', 0, 0, 101)";
                System.out.println("1-3:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){            
    	            sql   = "Insert into table_presenceReport(usere164, offerid, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 From table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' ";
    	            System.out.println("1-4:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            System.out.println("1-4-1:"+nResult);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                }
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' and offerid <> '' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){                        
    	            sql   = "Insert into table_presenceReport(offerid, usere164, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 from table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' and offerid <> '' ";           
    	            System.out.println("1-5:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	            
                }
                
                /***** 부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록********/
                sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String tempKeynumber = "";
                if(rs.next()==true){
                	tempKeynumber = rs.getString("keynumber");
                }
                rs.close();
                if (!"".equals(tempKeynumber) && tempKeynumber != null){	
                    int nextIndex = 0;
                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
                    rs.close();
                	
                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
                    sql += " VALUES ('"+tempKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
                    System.out.println("1-6:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                    int maxHuntIndex = 0;
                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) maxHuntIndex = rs.getInt(1);
                    rs.close();
                
                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + tempKeynumber + "'";
                    System.out.println("1-7:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                }
                
            }else{
            	// 수정 (부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록)

            	/***** 기존 부서대표번호 조회********/
            	sql = "SELECT keynumber, deptid FROM table_dept WHERE  deptid = (Select department From Table_Subscriber Where id = '" + endpointID + "')";
                rs = statement.executeQuery(sql);
                String 	oldKeynumber = "";
                int		oldID		= 0;
                if(rs.next()==true){
                	//oldKeynumber 	= rs.getString("keynumber");
                	oldKeynumber 	= Str.CheckNullString(rs.getString("keynumber"));
                	oldID			= rs.getInt("deptid");
                }
                rs.close();
                
            	/***** 새롭게 변경된 부서대표번호 조회********/
            	sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String newKeynumber = "";
                if(rs.next()==true){
                	//newKeynumber = rs.getString("keynumber");
                	newKeynumber = Str.CheckNullString(rs.getString("keynumber"));
                }
                rs.close();
                
                // 기존의 부서 대표번호와 새로운 부서 대표번호가 같은지 비교
                if((oldKeynumber.equals(newKeynumber)) && (oldID == Integer.parseInt(deptId))){
	                // 부서 변경을 안한 경우
                	sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }else{
                	// 부서가 변경된 경우
	                if (!"".equals(newKeynumber) && newKeynumber != null){	
	                    // 새로운 부서에 부서 대표번호가 있는 경우
	                    sql = "SELECT COUNT(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "' And e164 = '" + e164 + "' ";
	                    rs = statement.executeQuery(sql);
	                    if(rs.next()==true)	count = rs.getInt(1);
	                    rs.close();
	                    if (count == 0){
		                	int nextIndex = 0;
		                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
		                    rs = statement.executeQuery(sql);
		                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
		                    rs.close();
		                	
		                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
		                    sql += " VALUES ('"+newKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
		                    System.out.println("1-6:"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
		                
		                    int maxHuntIndex = 0;
		                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
		                    rs = statement.executeQuery(sql);
		                    if (rs.next()) maxHuntIndex = rs.getInt(1);
		                    rs.close();
		                
		                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + newKeynumber + "'";
		                    System.out.println("1-7:"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                	                
	                    }
	                }
	                
	                if (!"".equals(oldKeynumber) && oldKeynumber != null){	
	                    // 기존 부서에 부서 대표번호가 있는 경우
	                    sql = "SELECT COUNT(*) FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "' And e164 = '" + e164 + "' ";
	                    System.out.println("1-5:"+sql);
	                    rs = statement.executeQuery(sql);
	                    if(rs.next()==true)	count = rs.getInt(1);
	                    rs.close();
	                    if (count > 0){
		                	sql   = "DELETE FROM table_keynumber WHERE e164 = '" + e164  + "' And keynumberid = '" + oldKeynumber + "' ";            
		                    System.out.println("###### 1-6 Delete :"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 0){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
		                    //////////////////////
		    	            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "' Order by indexno";
		    	            rs = statement.executeQuery(sql);
		    	            while(rs.next()){
		    	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
		    	            }
		    	            rs.close();
		    	            
		    	            int 	nTmp2 		= vecTmpKeyNum.size();
		    	            int 	nTmp3 		= 0;
		    	            String	strE164 	= ""; 
		    	            for(int i=0; i < nTmp2; i++){
		    	            	strE164 = (String)vecTmpKeyNum.get(i);
		    	            	nTmp3 = nTmp3 + 1;
		    	            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' And keynumberid = '" + oldKeynumber + "' ";
		    	                System.out.println("9-"+i+"번째:"+sql);
		    	                statement.executeUpdate(sql);                
		    	            }
		    	            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + oldKeynumber + "' ";
		    	            System.out.println("10번째:"+sql);
		    	            statement.executeUpdate(sql);
	                    }
	                }
	                
	                sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }
            }
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean buddyDelete(String deleteStr, String strIp, String userID){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	Vector 			vecTmpKeyNum 	= new Vector();
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	addrStr = StringUtil.getParser(deleteStr, "");
			String		endpointID = "";
			String		e164 = "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(addrStr != null){
				for(int k=0; k < addrStr.length; k++){
					String[] dataStr = StringUtil.getParser(addrStr[k], "|");
					if(dataStr != null){
						endpointID  = dataStr[0];
						e164   		= dataStr[1];
////////////////////////////////////////////
			            /***** Table_E164 에서 Subid(Pick Up 값 초기화 'Pick-Up') ********/
			            sql = "Update Table_E164 Set Subid = 'Pick-Up' WHERE E164='" + e164 + "'";
			            System.out.println("1:"+sql);
			            statement.executeUpdate(sql);

			            
			            /***** Table_Subscriber 삭제 ********/
			            sql = "DELETE FROM Table_Subscriber WHERE id='"+endpointID+"'" ;
			            System.out.println("2:"+sql);
			            statement.executeUpdate(sql);
			            
			            
			            /***** Table_Presence / Table_PresenceReport 삭제 ********/
			            sql = "SELECT OfferID FROM Table_PresenceReport WHERE UserE164 = '"+e164+"'";
			            rs = statement.executeQuery(sql);
			            while(rs.next()){
			                vecTmpUserE164.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
			            }
			            rs.close();
			            
			            sql = "DELETE FROM Table_Presence WHERE UserE164='" + e164 + "'";
			            System.out.println("3:"+sql);
			            statement.executeUpdate(sql);
			            
			            int 	nTmp 		= vecTmpUserE164.size();
			            String	strOfferID 	= ""; 
			            for(int i=0; i < nTmp; i++){
			            	strOfferID = (String)vecTmpUserE164.get(i);
			                sql = "DELETE FROM Table_PresenceReport WHERE UserE164='" + e164 + "' And OfferID='" + strOfferID + "' ";
			                System.out.println("4-"+i+"번째:"+sql);
			                statement.executeUpdate(sql);
			                
			                if(!strOfferID.equals("")){
				                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)0,strOfferID," ");
				                int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,strOfferID," ",  "(SSW).active" );
				                
				                System.out.println("result "+i+"번째 ==>:"+nPacketResult+"  str Sip endpoint ID test ==>:" + strOfferID );
			                }
			            }            
			            sql = "DELETE FROM Table_PresenceReport WHERE OfferID='" + e164 + "' ";
			            System.out.println("5:"+sql);
			            statement.executeUpdate(sql);
			            
			            
			            /***** Table_keynumber 삭제 ********/
				    	sql = "SELECT count(*) FROM table_keynumber WHERE e164 = '" + e164 + "' ";
				    	System.out.println("6:"+sql);
				    	rs = statement.executeQuery(sql);
			            rs.next();
			            count = rs.getInt(1);
			            rs.close();
			            if(count > 0){
				            sql = "SELECT keynumberid FROM table_keynumber WHERE e164 = '" + e164 + "' ";
					    	System.out.println("7:"+sql);
					    	rs = statement.executeQuery(sql);
				            rs.next();
				            String tempKeyNum = rs.getString(1);
				            rs.close();
				          
				            sql = "DELETE FROM table_keynumber WHERE e164 = '" + e164 + "' ";
				            System.out.println("8:"+sql);
				            statement.executeUpdate(sql);
				
				            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + tempKeyNum + "' Order by indexno";
				            rs = statement.executeQuery(sql);
				            while(rs.next()){
				            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
				            }
				            rs.close();
				            
				            int 	nTmp2 		= vecTmpKeyNum.size();
				            int 	nTmp3 		= 0;
				            String	strE164 	= ""; 
				            for(int i=0; i < nTmp2; i++){
				            	strE164 = (String)vecTmpKeyNum.get(i);
				            	nTmp3 = nTmp3 + 1;
				            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' ";
				                System.out.println("9-"+i+"번째:"+sql);
				                statement.executeUpdate(sql);                
				            }
				            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + tempKeyNum + "' ";
				            System.out.println("10번째:"+sql);
				            statement.executeUpdate(sql);            
			            }
			            
			            /***** table_addrbook 삭제 ********/
			            sql = "DELETE FROM table_addrbook WHERE ownerid='" + e164 + "'";
			            System.out.println("11:"+sql);
			            statement.executeUpdate(sql);

			            /***** table_addrbookgroup 삭제 ********/
			            sql = "DELETE FROM table_addrbookgroup WHERE ownerid='" + e164 + "'";
			            System.out.println("12:"+sql);
			            statement.executeUpdate(sql);			            
////////////////////////////////////////////

			            // ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|84|조직도 개인관리 ("+e164+" 번)|2|"+strIp);
						// ##############################################

					}
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
}
