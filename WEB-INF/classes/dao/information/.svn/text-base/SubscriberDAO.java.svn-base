package dao.information;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import webuser.ServerLogin;
import acromate.ConnectionManager;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;

import dto.AddrBookDTO;
import dto.AddrBookGroupDTO;
import dto.SubscriberInfoDTO;
import acromate.common.util.StringUtil;

public class SubscriberDAO {

    public SubscriberDAO() {}

    /*
     * 개인정보 프로필  보기
     */     
    public List userInfo(DataStatement stmt, String userID) {
    	SubscriberInfoDTO 	subscriberDTO;
        ResultSet 	rs = null ;

        List<SubscriberInfoDTO> list = new ArrayList<SubscriberInfoDTO>();
        
        try {
        	String strIdDomain = WebUtil.CheckNullString(getIdDomain()).trim();
        	
            String sql = "\n SELECT id, loginlevel, pwd, phonenum, name, position, department, mobile, companynumber, ";
            sql = sql  + "\n        homenumber, extension, mailaddress, homepage, address, introduction, fax, birthday," ;
            sql = sql  + "\n        (select deptname from table_dept where deptid = department) as deptname ";
            sql = sql  + "\n   FROM table_subscriber " ;
            sql = sql  + "\n  WHERE id = '" + userID + "@" + strIdDomain + ":5060' ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
                subscriberDTO = new SubscriberInfoDTO();
                subscriberDTO.setSubsID(Str.CheckNullString(rs.getString("id")));
                subscriberDTO.setLoginLevel(rs.getInt("loginlevel"));
                subscriberDTO.setSusbsPwd(Str.CheckNullString(rs.getString("pwd")));
                subscriberDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
                subscriberDTO.setName(Str.CheckNullString(rs.getString("name")));
                subscriberDTO.setPosition(Str.CheckNullString(rs.getString("position")));
                subscriberDTO.setDepartment(rs.getInt("department"));
                subscriberDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
                subscriberDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
                subscriberDTO.setHomeNumber(Str.CheckNullString(rs.getString("homenumber")));
                subscriberDTO.setExtension(Str.CheckNullString(rs.getString("extension")));
                subscriberDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
                subscriberDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
                subscriberDTO.setAddress(Str.CheckNullString(rs.getString("address")));
                subscriberDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
                subscriberDTO.setFax(Str.CheckNullString(rs.getString("fax")));
                subscriberDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
                subscriberDTO.setDeptName(Str.CheckNullString(rs.getString("deptname")));

                list.add(subscriberDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }
    
    /*
     * 개인정보 프로필 수정
     */
    public int update(DataStatement stmt, String id, String mobile, String homenumber, String fax, String birth, String email) {
        int nResult = 0;
        try {            
            if (stmt != null) {
            	mobile     = StringUtil.replace(mobile, "-", "");
            	homenumber = StringUtil.replace(homenumber, "-", "");
            	fax        = StringUtil.replace(fax, "-", "");

            	String sql = "\n UPDATE table_subscriber  " ;
                sql = sql +  "\n    Set mobile      = '" + mobile     + "' " ;
                sql = sql +  "\n       ,homenumber  = '" + homenumber + "' " ;
                sql = sql +  "\n       ,fax         = '" + fax        + "' " ;
                sql = sql +  "\n       ,birthday    = '" + birth      + "' " ;
                sql = sql +  "\n       ,mailaddress = '" + email      + "' " ;
                sql = sql +  "\n  Where id          = '" + id         + "'";
          
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }

    /*
     * 비밀번호 수정
     */
    public String updatePwd(DataStatement stmt, String id, String oldPwd, String newPwd) {
    	ResultSet 	rs = null ;
    	int    nResult   = 0;
        String strResult = "";
        int    count     = 0;
        String sql       = "";  
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT count(id) ";
                sql += "\n   FROM table_subscriber " ;
                sql += "\n  WHERE id  = '" + id     + "' ";
                sql += "\n    AND pwd = '" + oldPwd + "' ";
                sql += "\n    AND loginlevel = 2 And name != 'api login id' "; 
                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	count = rs.getInt(1);
                }
                
                if(count == 0){
                	strResult = "1";
                }else if(count == 1){
                	sql  = "\n UPDATE table_subscriber  " ;
                    sql += "\n    SET pwd = '" + newPwd + "' ";
                    sql += "\n  WHERE id  = '" + id     + "' ";
                    sql += "\n    AND pwd = '" + oldPwd + "' ";
                    sql += "\n    AND loginlevel = 2 And name != 'api login id' ";
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	strResult = "0";
                    }
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
            
            return strResult ;
        }
        
    }
    
    /*
	 * 로그인 ID 도메인 가져오기
	 */ 
	public String getIdDomain(){
		String strId = "";
	    DataStatement statement=null;
	    ResultSet rs = null;
	    String sql = "";
	    try {        	  
	    	statement = ConnectionManager.allocStatement("SSW");
	        sql   = " select domainid from table_domain ";
	        rs = statement.executeQuery(sql);
	        if (rs.next()) {
	        	strId = rs.getString(1);
	        }
	
	    } catch (Exception e) {
	    	  
	    	ServerLogin.getServerLogin().login();
	    	  
	    } finally {
	    	try{
	    		if (rs != null) rs.close();
				if (statement != null) ConnectionManager.freeStatement(statement);
			}catch(Exception ee){}
	    }
	  
	    return strId;
	}	

    /*
     * 관리자 정보보기
     */     
    public List adminInfo(DataStatement stmt, String userID, String loginLevel) {
    	SubscriberInfoDTO 	subscriberDTO;
        ResultSet 	rs = null ;
        int adminLevel = Integer.parseInt(loginLevel);
        
        List<SubscriberInfoDTO> list = new ArrayList<SubscriberInfoDTO>();
        
        try {
        	String strIdDomain = WebUtil.CheckNullString(getIdDomain()).trim();
        	
            String sql = "\n SELECT id, loginlevel, pwd, phonenum, name, position, department, mobile, companynumber, ";
            sql = sql  + "\n        homenumber, extension, mailaddress, homepage, address, introduction, fax, birthday," ;
            sql = sql  + "\n        (select deptname from table_dept where deptid = department) as deptname ";
            sql = sql  + "\n   FROM table_subscriber " ;
            sql = sql  + "\n  WHERE id = '" + userID + "' ";
            sql = sql  + "\n    AND loginlevel = " + adminLevel + " ";
            sql = sql  + "\n    AND name != 'api login id' ";
            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
                subscriberDTO = new SubscriberInfoDTO();
                subscriberDTO.setSubsID(Str.CheckNullString(rs.getString("id")));
                subscriberDTO.setLoginLevel(rs.getInt("loginlevel"));
                subscriberDTO.setSusbsPwd(Str.CheckNullString(rs.getString("pwd")));
                subscriberDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
                subscriberDTO.setName(Str.CheckNullString(rs.getString("name")));
                subscriberDTO.setPosition(Str.CheckNullString(rs.getString("position")));
                subscriberDTO.setDepartment(rs.getInt("department"));
                subscriberDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
                subscriberDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
                subscriberDTO.setHomeNumber(Str.CheckNullString(rs.getString("homenumber")));
                subscriberDTO.setExtension(Str.CheckNullString(rs.getString("extension")));
                subscriberDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
                subscriberDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
                subscriberDTO.setAddress(Str.CheckNullString(rs.getString("address")));
                subscriberDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
                subscriberDTO.setFax(Str.CheckNullString(rs.getString("fax")));
                subscriberDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
                subscriberDTO.setDeptName(Str.CheckNullString(rs.getString("deptname")));

                list.add(subscriberDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }
	
    public String updateID(DataStatement stmt, String id, String oldID, String newID) {
    	ResultSet 	rs = null ;
    	int    nResult   = 0;
        String strResult = "";
        int    count     = 0;
        String sql       = "";  
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT count(id) ";
                sql += "\n   FROM table_subscriber " ;
                sql += "\n  WHERE id  = '" + oldID + "' ";
                sql += "\n    AND loginlevel = 2 ";
                sql += "\n    AND name != 'api login id' "; 
                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	count = rs.getInt(1);
                }
                
                if(count == 0){
                	strResult = "1";
                }else if(count == 1){
                	sql  = "\n UPDATE table_subscriber  " ;
                    sql += "\n    SET id = '" + newID + "' ";
                    sql += "\n  WHERE id  = '" + oldID     + "' ";
                    sql += "\n    AND loginlevel = 2 ";
                    sql += "\n    AND name != 'api login id' ";
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	strResult = "0";
                    }
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
            
            return strResult ;
        }
        
    }

    
    /*
     * API 관리자 정보보기
     */     
    public List apiAdminInfo(DataStatement stmt, String loginLevel) {
    	SubscriberInfoDTO 	subscriberDTO;
        ResultSet 	rs = null ;
        int adminLevel = Integer.parseInt(loginLevel);
        
        List<SubscriberInfoDTO> list = new ArrayList<SubscriberInfoDTO>();
        
        try {
        	String strIdDomain = WebUtil.CheckNullString(getIdDomain()).trim();
        	
            String sql = "\n SELECT id, loginlevel, pwd, phonenum, name, position, department, mobile, companynumber, ";
            sql = sql  + "\n        homenumber, extension, mailaddress, homepage, address, introduction, fax, birthday," ;
            sql = sql  + "\n        (select deptname from table_dept where deptid = department) as deptname ";
            sql = sql  + "\n   FROM table_subscriber " ;
            sql = sql  + "\n  WHERE loginlevel = " + adminLevel + " ";
            sql = sql  + "\n    AND name = 'api login id' ";
            
            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
                subscriberDTO = new SubscriberInfoDTO();
                subscriberDTO.setSubsID(Str.CheckNullString(rs.getString("id")));
                subscriberDTO.setLoginLevel(rs.getInt("loginlevel"));
                subscriberDTO.setSusbsPwd(Str.CheckNullString(rs.getString("pwd")));
                subscriberDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
                subscriberDTO.setName(Str.CheckNullString(rs.getString("name")));
                subscriberDTO.setPosition(Str.CheckNullString(rs.getString("position")));
                subscriberDTO.setDepartment(rs.getInt("department"));
                subscriberDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
                subscriberDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
                subscriberDTO.setHomeNumber(Str.CheckNullString(rs.getString("homenumber")));
                subscriberDTO.setExtension(Str.CheckNullString(rs.getString("extension")));
                subscriberDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
                subscriberDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
                subscriberDTO.setAddress(Str.CheckNullString(rs.getString("address")));
                subscriberDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
                subscriberDTO.setFax(Str.CheckNullString(rs.getString("fax")));
                subscriberDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
                subscriberDTO.setDeptName(Str.CheckNullString(rs.getString("deptname")));

                list.add(subscriberDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }
	
    /*
     * API ID 수정
     */
    public String updateApiID(DataStatement stmt, String id, String oldID, String newID) {
    	ResultSet 	rs = null ;
    	int    nResult   = 0;
        String strResult = "";
        int    count     = 0;
        String sql       = "";  
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT count(id) ";
                sql += "\n   FROM table_subscriber " ;
                sql += "\n  WHERE id  = '" + oldID + "' ";
                sql += "\n    AND loginlevel = 2 ";
                sql += "\n    AND name = 'api login id' "; 
                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	count = rs.getInt(1);
                }
                
                if(count == 0){
                	strResult = "1";
                }else if(count == 1){
                	sql  = "\n UPDATE table_subscriber  " ;
                    sql += "\n    SET id = '" + newID + "' ";
                    sql += "\n  WHERE id  = '" + oldID     + "' ";
                    sql += "\n    AND loginlevel = 2 ";
                    sql += "\n    AND name = 'api login id' ";
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	strResult = "0";
                    }
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
            
            return strResult ;
        }
        
    }
    
    /*
     * API 비밀번호 수정
     */
    public String updateApiPwd(DataStatement stmt, String id, String oldPwd, String newPwd) {
    	ResultSet 	rs = null ;
    	int    nResult   = 0;
        String strResult = "";
        int    count     = 0;
        String sql       = "";  
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT count(id) ";
                sql += "\n   FROM table_subscriber " ;
                sql += "\n  WHERE id  = '" + id     + "' ";
                sql += "\n    AND pwd = '" + oldPwd + "' ";
                sql += "\n    AND loginlevel = 2 And name = 'api login id' "; 
                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	count = rs.getInt(1);
                }
                
                if(count == 0){
                	strResult = "1";
                }else if(count == 1){
                	sql  = "\n UPDATE table_subscriber  " ;
                    sql += "\n    SET pwd = '" + newPwd + "' ";
                    sql += "\n  WHERE id  = '" + id     + "' ";
                    sql += "\n    AND pwd = '" + oldPwd + "' ";
                    sql += "\n    AND loginlevel = 2 And name = 'api login id' ";
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1){
                    	strResult = "0";
                    }
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
            
            return strResult ;
        }
        
    }
}
