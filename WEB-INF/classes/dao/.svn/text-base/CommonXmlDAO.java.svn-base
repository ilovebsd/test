package dao;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import webuser.ServerLogin;

import acromate.ConnectionManager;
import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import acromate.common.util.StringUtil;
import com.acromate.driver.db.DataStatement;
//import com.acromate.dto.office.SubscriberInfoDTO;

import dto.AddrBookDTO;
import dto.SubscriberInfoDTO;
import dto.AddrBookGroupDTO;
import dto.PositionDTO;
import dto.DeptDTO;
import dto.NoteDTO;

public class CommonXmlDAO {

    public CommonXmlDAO() {}

/*
 * 개인전화번호부 정보 보기
 */    
    public List userAddressList(DataStatement stmt, String userID) {
    	AddrBookDTO 	addrBookDTO;
        ResultSet 	rs = null ;

        List<AddrBookDTO> list = new ArrayList<AddrBookDTO>();
        
        try {
            String sql = "\n SELECT a.name AS groupname, ";
            sql = sql  + "\n        b.ownerid, b.groupid, b.addrid, b.idtype, b.name, b.idx, b.phonenum, " ;
            sql = sql  + "\n        b.mobile, b.position, b.department, b.address, b.memo, b.usephoneacf, ";
            sql = sql  + "\n        b.usemobileacf, b.mailaddress, b.company, b.companynumber, b.fax, b.companyaddress, " ;
            sql = sql  + "\n        b.homepage, b.introduction, b.birthday, to_char(b.createdate,'yyyy-mm-dd') AS createdate, ";
            sql = sql  + "\n        to_char(b.editdate,'yyyy-mm-dd') AS editdate, b.keynumber, b.common, ";
            sql = sql  + "\n        b.shareddate, b.sharedgroupid, b.sharedownerid, b.sharedaddrid, ";
            sql = sql  + "\n        (SELECT d.name ";
            sql = sql  + "\n           FROM table_addrbookgroup d ";
            sql = sql  + "\n          WHERE d.ownerid = b.sharedownerid ";
            sql = sql  + "\n            AND d.groupid = b.sharedgroupid) AS sharedgroupname, ";
            sql = sql  + "\n        (SELECT c.name ";
            sql = sql  + "\n           FROM table_subscriber c ";
            sql = sql  + "\n          WHERE c.phonenum = b.ownerid) AS ownername ";
            sql = sql  + "\n   FROM table_addrbookgroup a, table_addrbook b " ;
            sql = sql  + "\n  WHERE a.ownerid = b.ownerid " ;
            sql = sql  + "\n    AND a.groupid = b.groupid " ;
            sql = sql  + "\n    AND a.common = 1 " ;
            sql = sql  + "\n    AND a.ownerid = '" + userID + "' ";
            sql = sql  + "\n  ORDER BY b.groupid ASC, b.addrid ASC ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	addrBookDTO = new AddrBookDTO();
            	addrBookDTO.setGroupName(Str.CheckNullString(rs.getString("groupname"))); //그룹명
            	addrBookDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
            	addrBookDTO.setGroupID(rs.getInt("groupid"));
            	addrBookDTO.setAddrID(rs.getInt("addrid"));
            	addrBookDTO.setIdType(rs.getInt("idtype"));
            	addrBookDTO.setName(Str.CheckNullString(rs.getString("name")));
            	addrBookDTO.setIdx(rs.getInt("idx"));
            	addrBookDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
            	addrBookDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
            	addrBookDTO.setPosition(Str.CheckNullString(rs.getString("position")));
            	addrBookDTO.setDepartment(Str.CheckNullString(rs.getString("department")));
            	addrBookDTO.setAddress(Str.CheckNullString(rs.getString("address")));
            	addrBookDTO.setMemo(Str.CheckNullString(rs.getString("memo")));
            	addrBookDTO.setUseMobileACF(rs.getInt("usephoneacf"));
            	addrBookDTO.setUsePhoneACF(rs.getInt("usemobileacf"));
            	addrBookDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
            	addrBookDTO.setCompany(Str.CheckNullString(rs.getString("company")));
            	addrBookDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
            	addrBookDTO.setFax(Str.CheckNullString(rs.getString("fax")));
            	addrBookDTO.setCompanyAddress(Str.CheckNullString(rs.getString("companyaddress")));
            	addrBookDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
            	addrBookDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
            	addrBookDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
            	addrBookDTO.setCreateDate(Str.CheckNullString(rs.getString("createdate")));
            	addrBookDTO.setEditDate(Str.CheckNullString(rs.getString("editdate")));
            	addrBookDTO.setKeyNumber(Str.CheckNullString(rs.getString("keynumber")));            	
            	addrBookDTO.setCommon(rs.getInt("common")); // 공유폴더유무
            	addrBookDTO.setSharedDate(Str.CheckNullString(rs.getString("shareddate")));
            	addrBookDTO.setSharedGroupID(rs.getInt("sharedgroupid"));
            	addrBookDTO.setSharedGroupName(Str.CheckNullString(rs.getString("sharedgroupname")));
            	addrBookDTO.setSharedOwnerID(Str.CheckNullString(rs.getString("sharedownerid")));
            	addrBookDTO.setSharedAddrID(rs.getInt("sharedaddrid"));
            	addrBookDTO.setOwnerName(Str.CheckNullString(rs.getString("ownername")));            	

                list.add(addrBookDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }
    
/*
 * 공유전화번호부 정보 보기
 */ 
    public List commonAddressList(DataStatement stmt, String common) {
    	AddrBookDTO 	addrBookDTO;
        ResultSet 	rs = null ;

        List<AddrBookDTO> list = new ArrayList<AddrBookDTO>();
        
        try {
            String sql = "\n SELECT a.name AS groupname, ";
            sql = sql + "\n b.ownerid, b.groupid, b.addrid, b.idtype, b.name, b.idx, b.phonenum," ;
            sql = sql + "\n b.mobile, b.position, b.department, b.address, b.memo, b.usephoneacf,";
            sql = sql + "\n b.usemobileacf, b.mailaddress, b.company, b.companynumber, b.fax, b.companyaddress," ;
            sql = sql + "\n b.homepage, b.introduction, b.birthday, b.createdate, b.editdate, b.keynumber, b.common, ";
            sql = sql + "\n b.shareddate, b.sharedgroupid, b.sharedownerid, b.sharedaddrid, ";
            sql = sql + "\n (SELECT c.name FROM table_subscriber c WHERE c.phonenum = b.ownerid) AS ownername ";
            sql = sql + "\n FROM table_addrbookgroup a, table_addrbook b " ;
            sql = sql + "\n WHERE a.ownerid = b.ownerid " ;
            sql = sql + "\n AND a.groupid = b.groupid " ;
            sql = sql + "\n AND a.common = " + common;
            sql = sql + "\n ORDER BY b.groupid ASC, b.addrid ASC ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	addrBookDTO = new AddrBookDTO();
            	addrBookDTO.setGroupName(Str.CheckNullString(rs.getString("groupname"))); //그룹명
            	addrBookDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
            	addrBookDTO.setGroupID(rs.getInt("groupid"));
            	addrBookDTO.setAddrID(rs.getInt("addrid"));
            	addrBookDTO.setIdType(rs.getInt("idtype"));
            	addrBookDTO.setName(Str.CheckNullString(rs.getString("name")));
            	addrBookDTO.setIdx(rs.getInt("idx"));
            	addrBookDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
            	addrBookDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
            	addrBookDTO.setPosition(Str.CheckNullString(rs.getString("position")));
            	addrBookDTO.setDepartment(Str.CheckNullString(rs.getString("department")));
            	addrBookDTO.setAddress(Str.CheckNullString(rs.getString("address")));
            	addrBookDTO.setMemo(Str.CheckNullString(rs.getString("memo")));
            	addrBookDTO.setUseMobileACF(rs.getInt("usephoneacf"));
            	addrBookDTO.setUsePhoneACF(rs.getInt("usemobileacf"));
            	addrBookDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
            	addrBookDTO.setCompany(Str.CheckNullString(rs.getString("company")));
            	addrBookDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
            	addrBookDTO.setFax(Str.CheckNullString(rs.getString("fax")));
            	addrBookDTO.setCompanyAddress(Str.CheckNullString(rs.getString("companyaddress")));
            	addrBookDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
            	addrBookDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
            	addrBookDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
            	addrBookDTO.setCreateDate(Str.CheckNullString(rs.getString("createdate")));
            	addrBookDTO.setEditDate(Str.CheckNullString(rs.getString("editdate")));
            	addrBookDTO.setKeyNumber(Str.CheckNullString(rs.getString("keynumber")));            	
            	addrBookDTO.setCommon(rs.getInt("common")); // 공유폴더유무
            	addrBookDTO.setSharedDate(Str.CheckNullString(rs.getString("shareddate")));
            	addrBookDTO.setSharedGroupID(rs.getInt("sharedgroupid"));
            	addrBookDTO.setSharedOwnerID(Str.CheckNullString(rs.getString("sharedownerid")));
            	addrBookDTO.setSharedAddrID(rs.getInt("sharedaddrid"));
            	addrBookDTO.setOwnerName(Str.CheckNullString(rs.getString("ownername")));            	

                list.add(addrBookDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }
    
/*
 * 개인정보 프로필  보기
 */     
    public List userInfoList(DataStatement stmt, String userID) {
    	SubscriberInfoDTO 	subscriberDTO;
        ResultSet 	rs = null ;

        List<SubscriberInfoDTO> list = new ArrayList<SubscriberInfoDTO>();
        
        try {
        	String strIdDomain = WebUtil.CheckNullString(getIdDomain()).trim();
        	
            String sql = "\n SELECT id, loginlevel, pwd, phonenum, name, position, department, mobile, ";
            sql = sql  + "\n        homenumber, extension, mailaddress, homepage, address, introduction, fax, birthday," ;
            sql = sql  + "\n        (select deptname from table_dept where deptid = department) as deptname ";
            sql = sql  + "\n   FROM table_subscriber " ;
            sql = sql  + "\n  WHERE id = '" + userID + "@" + strIdDomain + ":5060' ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
                subscriberDTO = new SubscriberInfoDTO();
                subscriberDTO.setSubsID(Str.CheckNullString(rs.getString("id")));
                subscriberDTO.setLoginLevel(rs.getInt("loginlevel"));
                subscriberDTO.setSusbsPwd(Str.CheckNullString(rs.getString("pwd")));
                subscriberDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
                subscriberDTO.setName(Str.CheckNullString(rs.getString("name")));
                subscriberDTO.setPosition(Str.CheckNullString(rs.getString("position")));
                subscriberDTO.setDepartment(rs.getInt("department"));
                subscriberDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
                subscriberDTO.setHomeNumber(Str.CheckNullString(rs.getString("homenumber")));
                subscriberDTO.setExtension(Str.CheckNullString(rs.getString("extension")));
                subscriberDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
                subscriberDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
                subscriberDTO.setAddress(Str.CheckNullString(rs.getString("address")));
                subscriberDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
                subscriberDTO.setFax(Str.CheckNullString(rs.getString("fax")));
                subscriberDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
                subscriberDTO.setDeptName(Str.CheckNullString(rs.getString("deptname")));

                list.add(subscriberDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }

/*
 * 개인전화 번호부 그룹정보 보기
 */    
    public List userAddrGroupList(DataStatement stmt, String userID) {
    	AddrBookGroupDTO 	addrGroupDTO;
        ResultSet 	rs = null ;

        List<AddrBookGroupDTO> list = new ArrayList<AddrBookGroupDTO>();
        
        try {
            String sql = "\n SELECT a.ownerid, a.groupid, a.name, a.idx, a.idtype, a.memo, a.common, ";
            sql = sql +  "\n (select name from table_subscriber where phonenum=a.ownerid) AS ownername " ;
            sql = sql +  "\n   FROM table_addrbookgroup a" ;
            sql = sql +  "\n  WHERE a.ownerid = '" + userID + "' ";
            sql = sql +  "\n    AND a.common  = 1 ";
            sql = sql +  "\n  ORDER BY groupid ASC ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	addrGroupDTO = new AddrBookGroupDTO();
            	addrGroupDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
            	addrGroupDTO.setGroupID(rs.getInt("groupid"));
            	addrGroupDTO.setName(Str.CheckNullString(rs.getString("name")));
            	addrGroupDTO.setIdx(rs.getInt("idx"));
            	addrGroupDTO.setIdType(rs.getInt("idtype"));
            	addrGroupDTO.setMemo(Str.CheckNullString(rs.getString("memo")));
            	addrGroupDTO.setCommon(rs.getInt("common"));
            	addrGroupDTO.setOwnerName(Str.CheckNullString(rs.getString("ownername")));
                list.add(addrGroupDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }

/*
 * 개인전화 번호부 그룹 이동
 */    
    public String updateAddrMove(DataStatement stmt, String userID, String strFrom, String AddrId, String strTo) {
        int    nResult   = 0;
        int    existCnt  = 0;
    	int    max       = 0 ;
    	String strQuery  = "";
    	String resultStr = "";
    	String userName  = "";
    	String keyNumber = "";
        ResultSet     rs = null;
    	        
        try {
        	// 변경전 해당데이타가 존재하는지 체크    	
        	strQuery  = "\n SELECT name, keynumber ";
        	strQuery += "\n   FROM table_AddrBook ";
        	strQuery += "\n  WHERE ownerid = '" + userID + "'";
        	strQuery += "\n    AND groupid = " + strFrom;
        	strQuery += "\n    AND addrid  = " + AddrId;
        	
            if (stmt != null) {
                rs = stmt.executeQuery(strQuery);
                if (rs.next()){
                	userName = Str.CheckNullString(rs.getString("name"));
                	keyNumber = Str.CheckNullString(rs.getString("keynumber"));
                	
                	// 선택 그룹이  존재하는지 체크    	
                	strQuery  = "\n SELECT count(*) ";
                	strQuery += "\n   FROM table_AddrBookgroup ";
                	strQuery += "\n  WHERE ownerid = '" + userID + "'";
                	strQuery += "\n    AND groupid = " + strTo;
                	                	
                	if (stmt != null) {
                        rs = stmt.executeQuery(strQuery);
                        if (rs.next()) existCnt = rs.getInt(1); 
                        rs.close();
                    } else {           
                        System.out.println("데이터베이스에 연결할 수 없습니다.");    
                    }
                	
                	if(existCnt == 0){
                    	resultStr = "ERR400";
                    }else if(existCnt > 0){
                    	// 같은이름의 같은 대표번호가 존재하는지  체크    	
                    	strQuery  = "\n SELECT count(*) ";
                    	strQuery += "\n   FROM table_AddrBook ";
                    	strQuery += "\n  WHERE ownerid   = '" + userID    + "'";
                    	strQuery += "\n    AND name      = '" + userName  + "'";
                    	strQuery += "\n    AND keynumber = '" + keyNumber + "'";
                    	strQuery += "\n    And (ownerid != '" + userID    + "'";
                    	strQuery += "\n     Or  groupid !=  " + strFrom;
                    	strQuery += "\n     Or  addrid  !=  " + AddrId    + ")";
                    	
                    	existCnt = 0;
                    	
                    	if (stmt != null) {
                            rs = stmt.executeQuery(strQuery);
                            if (rs.next()) existCnt = rs.getInt(1); 
                            rs.close();
                        } else {           
                            System.out.println("데이터베이스에 연결할 수 없습니다.");    
                        }
                    	
                    	if(existCnt == 0){
	                    	// 새로 생성할 전화번호부 addrid   
	                    	max = getMaxID(stmt, userID, strTo);
	                    	
	                    	max = max + 1;
	                    	
	                    	// 개인전화번호 그룹변경                 	
	                        String sql = "\n UPDATE table_AddrBook " ;                        
	                        sql = sql + "\n     Set groupid = " + strTo;
	                        sql = sql + "\n        ,addrid  = " + max;
	                        sql = sql + "\n        ,idx     = " + max;
	                        sql = sql + "\n   WHERE ownerid = '" + userID + "'";
	                    	sql = sql + "\n     AND groupid = " + strFrom;
	                    	sql = sql + "\n     AND addrid  = " + AddrId;
	
	                        if (stmt != null) {
	                            nResult = stmt.executeUpdate(sql);
	                            if (nResult >= 1)
	                            	//resultStr = "MSG100";
	                            	resultStr = "MSG100"+"|"+max;
	                            else
	                                System.out.println("수정  실패");
	                        } else {
	                            System.out.println("데이터베이스에 연결할 수 없습니다.");
	                        }	
                    	}else{
                    		resultStr = "ERR900";
                    	}
                    }
                	
                }else{
                	resultStr = "ERR300";
                }
            } else {           
                System.out.println("데이터베이스에 연결할 수 없습니다.");    
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return resultStr;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        
        return resultStr;
    	    	
    }
    
/*
 * 선택한 공유전화번호부를 선택한 개인그룹에 복사
 */
    public String insertAddrCopy(DataStatement stmt, String userID, String strFrom, String strTo, String strAddr) {
        int    nResult   = 0;
    	int    max       = 0 ;
    	int    existCnt  = 0;
    	String resultStr = "";
    	String strQuery  = "";
    	String sql       = "";
        ResultSet     rs = null;
        ResultSet    rs2 = null;
    	        
        try {            
            sql  = "\n SELECT ownerid, groupid, addrid, idtype, name, idx, phonenum, ";
            sql += "\n        mobile, position, department, address, memo, usephoneacf,";
            sql += "\n        usemobileacf, mailaddress, company, companynumber, fax, companyaddress," ;
            sql += "\n        homepage, introduction, birthday, createdate, editdate, keynumber, common ";
            sql += "\n   FROM table_addrbook " ;
            sql += "\n  WHERE groupid = " + strFrom;
            sql += "\n    AND addrid  = " + strAddr;
            sql += "\n    AND common  = 2";

            rs = stmt.executeQuery(sql) ;
            
            if(rs.next()){
            	// 선택 그룹이  존재하는지 체크    	
            	strQuery  = "\n SELECT count(*) ";
            	strQuery += "\n   FROM table_AddrBookgroup ";
            	strQuery += "\n  WHERE ownerid = '" + userID + "'";
            	strQuery += "\n    AND groupid = " + strTo;
            	                	
            	if (stmt != null) {
            		rs2 = stmt.executeQuery(strQuery);
                    if (rs2.next()) existCnt = rs2.getInt(1); 
                    rs2.close();
                } else {           
                    System.out.println("데이터베이스에 연결할 수 없습니다.");    
                }
            	
            	if(existCnt == 0){
                	resultStr = "ERR400";
                }else if(existCnt > 0){
//                	System.out.println("111111111111111111111111");                	
                	// 같은이름의 같은 대표번호가 존재하는지  체크    	
                	strQuery  = "\n SELECT count(*) ";
                	strQuery += "\n   FROM table_AddrBook ";
                	strQuery += "\n  WHERE ownerid   = '" + userID                                         + "'";
                	strQuery += "\n    AND name      = '" + Str.CheckNullString(rs.getString("name"))      + "'";
                	strQuery += "\n    AND keynumber = '" + Str.CheckNullString(rs.getString("keynumber")) + "'";
                	strQuery += "\n    AND common    = 1";
                	
                	existCnt = 0;
                	
                	if (stmt != null) {
                		rs2 = stmt.executeQuery(strQuery);
                        if (rs2.next()) existCnt = rs2.getInt(1); 
                        rs2.close();
                    } else {           
                        System.out.println("데이터베이스에 연결할 수 없습니다.");    
                    }
//                	System.out.println("22222222222222222222");                	
                	
                	if(existCnt == 0){
//                		System.out.println("333333333333333333333");                	
                		// 새로 생성할 전화번호부 addrid
                    	max = getMaxID(stmt, userID, strTo);
//                    	System.out.println("4444444444444444444444444");                	
                    	
                    	// 개인전화번호 추가
                        sql  = "INSERT INTO table_AddrBook (ownerid, groupid,AddrID,IdType,name,idx,PhoneNum,Mobile";
                    	sql += " ,Position,Department,Address,Memo,UsePhoneACF,UseMobileACF,mailaddress,company";
                    	sql += " ,companynumber,fax,companyaddress,homepage,introduction,birthday,keynumber,common,Createdate ) ";
                    	sql += " values ( " ;
                    	sql += "'" + userID                                              + "', " ;
                    	sql += " " + strTo                                               + " , " ;            
                    	sql += " " + (max + 1)                                           + " , " ; 
                    	sql += " " + rs.getInt("idtype")                                 + " , " ; 
                    	sql += "'" + Str.CheckNullString(rs.getString("name"))           + "', " ;
                    	sql += " " + (max + 1)                                           + " , " ; 
                    	sql += "'" + Str.CheckNullString(rs.getString("phonenum"))       + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("mobile"))         + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("position"))       + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("department"))     + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("address"))        + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("memo"))           + "', " ;
                    	sql += " " + rs.getInt("usephoneacf")                            + " , " ;
                    	sql += " " + rs.getInt("usemobileacf")                           + " , " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("mailaddress"))    + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("company"))        + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("companynumber"))  + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("fax"))            + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("companyaddress")) + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("homepage"))       + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("introduction"))   + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("birthday"))       + "', " ;
                    	sql += "'" + Str.CheckNullString(rs.getString("keynumber"))      + "', " ;
                    	sql += " 1, " ;
                    	sql += " Now()) ";
//                        System.out.println("insert--->"+sql);
                        
                        nResult = stmt.executeUpdate(sql);
        	            if (nResult >= 1){
        	            	//resultStr = "MSG100";
        	            	max = max + 1;
        	            	resultStr = "MSG100"+"|"+max;
        	            }else{
        	                System.out.println("입력 실패");
        	            }
                	}else{
                		resultStr = "ERR900";
                	}
                }
            }else{
            	resultStr = "ERR300";
            }
                
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return resultStr;
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (rs2 != null)
                    rs2.close();
            } catch (Exception e) {}
        }
        
        return resultStr;
    	    	
    }

/*
 * 공유전화번호부를 새로운 개인그룹에 복사
 */
    public String insertAddrGroupMove(DataStatement stmt, String userID, String groupID, String groupName) {
        int    nResult    = 0;
    	int    groupMax   = 0 ;
    	int    addrMax    = 0 ;
    	int    nResultCnt = 0;
    	int    cnt        = 0;
    	String resultStr  = "";
    	String strQuery   = "";
    	String sql        = "";
        ResultSet      rs = null;
        ResultSet     rs2 = null;
        
        try {
        	// 같은이름의 그룹이 존재하는지  체크    	
        	strQuery  = "\n SELECT groupid ";
        	strQuery += "\n   FROM table_AddrBookGroup ";
        	strQuery += "\n  WHERE ownerid = '" + userID    + "'";
        	strQuery += "\n    AND name    = '" + groupName + "'";
        	strQuery += "\n    AND common  = 1";
        	
            if (stmt != null) {
                rs = stmt.executeQuery(strQuery);
                if (rs.next()){
                	resultStr = "ERR910";
                }else{
                	// 새로 생성할 개인그룹  groupid        	
                	groupMax = getMaxID(stmt, userID);

                	stmt.stxTransaction();
                	// 개인그룹 추가         	
                	if (stmt != null) {
                        sql  = "INSERT INTO table_AddrBookGroup (ownerid, groupid, name, idx,idtype, memo, common) ";
                        sql += " values ( " ;
                        sql += "'" + userID         + "', " ;
                        sql += " " + (groupMax + 1) + " , " ;            
                        sql += "'" + groupName      + "', " ;
                        sql += " " + (groupMax + 1) + " , " ;
                        sql += " " + (groupMax + 1) + " , " ;
                        sql += "'" + groupName      + "', " ;
                        sql += "1";
                        sql += ")";
                        
                        nResult = stmt.executeUpdate(sql);
                        
                        if (nResult >= 1)
                            System.out.println("입력 성공");
                        else
                            System.out.println("입력 실패");
                    } else{
                        System.out.println("데이터베이스에 연결할 수 없습니다.");
                    }
                	
                	// 공유전화번호부 조회
                    
                    sql  = "\n SELECT ownerid, groupid, addrid, idtype, name, idx, phonenum, ";
                    sql += "\n        mobile, position, department, address, memo, usephoneacf,";
                    sql += "\n        usemobileacf, mailaddress, company, companynumber, fax, companyaddress," ;
                    sql += "\n        homepage, introduction, birthday, createdate, editdate, keynumber, common ";
                    sql += "\n   FROM table_addrbook " ;
                    sql += "\n  WHERE common  = 2 ";
                    sql += "\n    AND groupid = " + groupID;
                    sql += "\n  ORDER BY ownerid ASC, groupid ASC, addrid ASC ";

                    rs = stmt.executeQuery(sql) ;

                    while ( rs.next())  {
                    	cnt++;
                    	
                    	sql  = "\n SELECT addrid ";
                        sql += "\n   FROM table_addrbook " ;
                        sql += "\n  WHERE common    = 1 ";
                        sql += "\n    AND ownerid   = '" + userID                                         + "'";
                        sql += "\n    AND name      = '" + Str.CheckNullString(rs.getString("name"))      + "'";
                        sql += "\n    AND keynumber = '" + Str.CheckNullString(rs.getString("keynumber")) + "'";

                        rs2 = stmt.executeQuery(sql) ;
                        
                        if(rs2.next()){
                        	resultStr  = "ERR900";
                        	nResultCnt = 0;
                        	stmt.endTransaction(false);
                        	break;
                        }else{
                        	// 개인전화번호 추가 
                            sql  = "INSERT INTO table_AddrBook (ownerid, groupid,AddrID,IdType,name,idx,PhoneNum,Mobile";
                        	sql += " ,Position,Department,Address,Memo,UsePhoneACF,UseMobileACF,mailaddress,company";
                        	sql += " ,companynumber,fax,companyaddress,homepage,introduction,birthday,keynumber,common,Createdate ) ";
                        	sql += " values ( " ;
                        	sql += "'" + userID                                              + "', " ;
                        	sql += " " + (groupMax + 1)                                      + " , " ;            
                        	sql += " " + (addrMax + 1)                                       + " , " ; 
                        	sql += " " + rs.getInt("idtype")                                 + " , " ; 
                        	sql += "'" + Str.CheckNullString(rs.getString("name"))           + "', " ;
                        	sql += " " + (addrMax + 1)                                       + " , " ; 
                        	sql += "'" + Str.CheckNullString(rs.getString("phonenum"))       + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("mobile"))         + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("position"))       + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("department"))     + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("address"))        + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("memo"))           + "', " ;
                        	sql += " " + rs.getInt("usephoneacf")                            + " , " ;
                        	sql += " " + rs.getInt("usemobileacf")                           + " , " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("mailaddress"))    + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("company"))        + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("companynumber"))  + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("fax"))            + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("companyaddress")) + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("homepage"))       + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("introduction"))   + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("birthday"))       + "', " ;
                        	sql += "'" + Str.CheckNullString(rs.getString("keynumber"))      + "', " ;
                        	sql += "1 , " ;
                        	sql += " Now()) ";
                            System.out.println("insert--->"+sql);
                            
            	            nResult = stmt.executeUpdate(sql);
            	            if (nResult >= 1)
            	                System.out.println("입력 성공");
            	            else
            	                System.out.println("입력 실패");
            	
            	            addrMax = addrMax + 1;
            	            nResultCnt = nResultCnt + nResult;
                        }
                    }	
        	            
                    if(cnt == 0){
                    	resultStr  = "ERR300";
                    }else{
                        if(nResultCnt > 0){
                        	resultStr  = "MSG100";
                        }
                    }
        	        stmt.endTransaction(true);                	
                }
            }
                
        } catch (Exception e) {
            System.out.println("aaaaaaaaaa"+e.getMessage());
            return resultStr;
        } finally {
            try {
                if (rs != null)
                    rs.close();
                if (rs2 != null)
                    rs2.close();
            } catch (Exception e) {}
        }
        
        return resultStr;
    	    	
    }
    
/*
 * 직급정보(리스트) 보기
 */    
    public List positionList(DataStatement stmt) {
    	PositionDTO 	positionDTO;
        ResultSet 	rs = null ;

        List<PositionDTO> list = new ArrayList<PositionDTO>();
        
        try {
            String sql = "\n SELECT positionid, positionname, ranking ";
            sql = sql +  "\n   FROM table_position " ;
            sql = sql +  "\n ORDER BY ranking ASC ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	positionDTO = new PositionDTO();
            	positionDTO.setPositionID(rs.getInt("positionid"));
            	positionDTO.setPositionName(Str.CheckNullString(rs.getString("positionname")));
            	positionDTO.setRanking(rs.getInt("ranking"));
                list.add(positionDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }    
    
/*
 * 조직도 정보 보기
 */ 
    public List deptInfoList(DataStatement stmt) {
    	DeptDTO 	deptDTO;
        ResultSet 	rs = null ;

        List<DeptDTO> list = new ArrayList<DeptDTO>();
        
        try {
            String sql = "\n SELECT a.deptid, a.deptname, a.orgchartid, a.parentid, a.description, ";
            sql = sql +  "\n        a.type, a.usepickup, a.keynumber, a.officebox, a.operation, " ;
            sql = sql +  "\n        a.sortnumber1, a.sortnumber2, b.id, b.name, b.position, ";
            sql = sql +  "\n        b.phonenum, b.mobile, b.extension, b.mailaddress, b.companynumber, " ;
            sql = sql +  "\n        b.homenumber, b.fax, b.birthday, b.homepage, b.introduction, ";
            sql = sql +  "\n        (SELECT c.deptname ";
            sql = sql +  "\n           FROM table_dept c ";
            sql = sql +  "\n          WHERE c.deptid = a.parentid)AS parentname ";
            sql = sql +  "\n   FROM table_dept a " ;
            sql = sql +  "\n   LEFT OUTER JOIN table_subscriber b " ;
            sql = sql +  "\n                ON (a.deptid = b.department) " ;
            sql = sql +  "\n  WHERE a.deptid != a.parentid " ;
            sql = sql +  "\n  ORDER BY a.sortnumber1 ASC, a.sortnumber2 ASC, a.deptid ";
            //sql = sql +  "\n  ORDER BY a.sortnumber1 ASC, a.sortnumber2 ASC ";
            
            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	deptDTO = new DeptDTO();
            	
            	deptDTO.setDeptID(rs.getInt("deptid"));								//부서코드
            	deptDTO.setDeptName(Str.CheckNullString(rs.getString("deptname"))); //부서명
            	deptDTO.setOrgchartID(rs.getInt("orgchartid"));
            	deptDTO.setParentID(rs.getInt("parentid"));
            	deptDTO.setDescription(Str.CheckNullString(rs.getString("description")));
            	deptDTO.setType(rs.getInt("type"));
            	deptDTO.setUsePickup(rs.getInt("usepickup"));
            	deptDTO.setKeyNumber(Str.CheckNullString(rs.getString("keynumber")));            	
            	deptDTO.setOfficeBox(Str.CheckNullString(rs.getString("officebox")));            	
            	deptDTO.setOperation(rs.getInt("operation"));
            	deptDTO.setSortNumber1(rs.getInt("sortnumber1"));
            	deptDTO.setSortNumber2(rs.getInt("sortnumber2"));
            	deptDTO.setID(Str.CheckNullString(rs.getString("id")));            	
            	deptDTO.setName(Str.CheckNullString(rs.getString("name")));            	
            	deptDTO.setPosition(Str.CheckNullString(rs.getString("position")));
            	deptDTO.setPhoneNum(Str.CheckNullString(rs.getString("phonenum")));
            	deptDTO.setMobile(Str.CheckNullString(rs.getString("mobile")));
            	deptDTO.setExtension(Str.CheckNullString(rs.getString("extension")));
            	deptDTO.setMailAddress(Str.CheckNullString(rs.getString("mailaddress")));
            	deptDTO.setCompanyNumber(Str.CheckNullString(rs.getString("companynumber")));
            	deptDTO.setHomeNumber(Str.CheckNullString(rs.getString("homenumber")));
            	deptDTO.setFax(Str.CheckNullString(rs.getString("fax")));
            	deptDTO.setBirthday(Str.CheckNullString(rs.getString("birthday")));
            	deptDTO.setHomePage(Str.CheckNullString(rs.getString("homepage")));
            	deptDTO.setIntroduction(Str.CheckNullString(rs.getString("introduction")));
            	deptDTO.setParentName(Str.CheckNullString(rs.getString("parentname")));
            	
                list.add(deptDTO) ;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }

    /*
     * 공유전화 번호부 그룹정보 보기
     */    
        public List commonGroupList(DataStatement stmt) {
        	AddrBookGroupDTO 	addrGroupDTO;
            ResultSet 	rs = null ;

            List<AddrBookGroupDTO> list = new ArrayList<AddrBookGroupDTO>();
            
            try {
                String sql = "\n SELECT a.ownerid, a.groupid, a.name, a.idx, a.idtype, a.memo, a.common, ";
                sql = sql +  "\n (select name from table_subscriber where phonenum=a.ownerid) AS ownername " ;
                sql = sql +  "\n   FROM table_addrbookgroup a" ;
                sql = sql +  "\n  WHERE a.common  = 2 ";
                sql = sql +  "\n  ORDER BY groupid ASC ";

                rs = stmt.executeQuery(sql) ;

                while ( rs.next() )  {
                	addrGroupDTO = new AddrBookGroupDTO();
                	addrGroupDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
                	addrGroupDTO.setGroupID(rs.getInt("groupid"));
                	addrGroupDTO.setName(Str.CheckNullString(rs.getString("name")));
                	addrGroupDTO.setIdx(rs.getInt("idx"));
                	addrGroupDTO.setIdType(rs.getInt("idtype"));
                	addrGroupDTO.setMemo(Str.CheckNullString(rs.getString("memo")));
                	addrGroupDTO.setCommon(rs.getInt("common"));
                	addrGroupDTO.setOwnerName(Str.CheckNullString(rs.getString("ownername")));
                    list.add(addrGroupDTO) ;
                }
            } catch(Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (rs != null) rs.close();
                } catch(Exception e) {}
            }

            return list;
        }

    
/*
 * 그룹테이블 max groupid 가져오기
 */    
    public int getMaxID(DataStatement stmt, String OwnerID ) {
		int max = 0 ;
		String sql = "SELECT coalesce(max(GroupID),0) " ;
		sql = sql + " FROM table_AddrBookGroup ";
		sql = sql + " WHERE OwnerID = '" + OwnerID + "'"  ;
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
    
/*
 * 전화번호부테이블 max addrId 가져오기
 */     
	public int getMaxID(DataStatement stmt, String OwnerID, String GroupId ) {
		int max = 0 ;
		String selectQuery = "SELECT coalesce(max(AddrID),0) " ;
        selectQuery    += " FROM table_AddrBook ";
        selectQuery += "WHERE OwnerID= '"   +   OwnerID  +   "' and GroupId ="    +    GroupId;
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
	
	/*
	 * 로그인 ID 도메인 가져오기
	 */ 
	public String getIdDomain(){
		String strId = "";
	    DataStatement statement=null;
	    ResultSet rs = null;
	    String sql = "";
	    try {        	  
	    	statement = ConnectionManager.allocStatement("SSW");
	        sql   = " select domainid from table_domain ";
	        rs = statement.executeQuery(sql);
	        if (rs.next()) {
	        	strId = rs.getString(1);
	        }
	
	    } catch (Exception e) {
	    	  
	    	ServerLogin.getServerLogin().login();
	    	  
	    } finally {
	    	try{
	    		if (rs != null) rs.close();
				if (statement != null) ConnectionManager.freeStatement(statement);
			}catch(Exception ee){}
	    }
	  
	    return strId;
	}	
	
	/*
	 * 착신전환 설정 / 해제
	 */    
	    public int forwardUpdate(DataStatement stmt, String e164, String useType, String forwardE164, String forwardType) {
	        int 		nResult 			= 0;
	        int 		existCnt 			= 0;
	    	int 		max 				= 0 ;
            String 		temp_AnswerService 	= "";
            String 		answerService 		= "";	    	
	    	String 		strQuery 			= "";
	    	String		sql					= "";
	        ResultSet 	rs 					= null;
	        
	        // E164 테이블에서 AnswerService 값 조회    	
	    	strQuery  = "\n SELECT answerservice FROM table_E164 ";
	    	strQuery += "\n  WHERE e164 = '" + e164 + "'";
	    	        
	        try {
	            if (stmt != null) {
	                rs = stmt.executeQuery(strQuery);
	                if (rs.next()) temp_AnswerService = rs.getString(1); 
	                rs.close();
	            } else {           
	                System.out.println("데이터베이스에 연결할 수 없습니다.");
	            }

	            if(useType.equals("0")){
	            	// 착신전환 해제
	            	answerService = temp_AnswerService.substring(0, 3) + "0" + temp_AnswerService.substring(4, 64);
	            }else if(useType.equals("1")){
	            	if(forwardType.equals("1")){
	            		// 지정번호로 착신전환 설정
	            		answerService = temp_AnswerService.substring(0, 3) + "1" + temp_AnswerService.substring(4, 64);
	            	}else if(forwardType.equals("3")){
	            		// 음성사서함으로 착신전환 설정
	            		answerService = temp_AnswerService.substring(0, 3) + "3" + temp_AnswerService.substring(4, 64);
	            	}
	            }
	            
	            // 착신전환 변경                 	
	            if(forwardType.equals("1")){
	            	// 지정번호로 착신전환 설정
	            	sql  = "\n Update table_E164 set answerservice = '" + answerService + "', directforwardnumber = '" + forwardE164 + "' ";
	            	sql	+= "\n  WHERE e164 = '" + e164 + "'";
	            }else{
	            	// 음성사서함으로 착신전환 설정
	            	sql  = "\n Update table_E164 set answerservice = '" + answerService + "', directforwardnumber = null ";
	            	sql	+= "\n  WHERE e164 = '" + e164 + "'";
	            }

                if (stmt != null) {
                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1)
                        System.out.println("수정  성공");
                    else
                        System.out.println("수정  실패");
                } else {
                    System.out.println("데이터베이스에 연결할 수 없습니다.");
                }	            

	        } catch (Exception e) {
	            System.out.println(e.getMessage());
	            return nResult;
	        } finally {
	            try {
	                if (rs != null)
	                    rs.close();
	            } catch (Exception e) {}
	        }
	        
	        return nResult;
	    	    	
	    }
	    
/*
 * 개인그룹명 중복체크
 */    
    public String existUserGroup(DataStatement stmt, String ownerid, String groupid, String groupname, String gubun) {
        ResultSet 	  rs = null ;
        String sql       = "";
        String returnStr = "";
        int    cnt       = 0;

        try {
            sql  = "\n Select count(*) ";
            sql	+= "\n   From table_addrbookgroup ";
            sql	+= "\n  Where common    = 1 ";
            sql	+= "\n    And ownerid   = '" + ownerid   + "' ";
            sql	+= "\n    And name      = '" + groupname + "' ";
            if("2".equals(gubun)){
                sql	+="\n    And (ownerid != '" + ownerid   + "' ";
                sql	+="\n     Or  groupid !=  " + groupid   + ")";
            }

            rs = stmt.executeQuery(sql) ;

            if ( rs.next() )  {
            	cnt = rs.getInt(1); 
            	
            	if(cnt == 0){
            		returnStr = "MSG100";
            	}else if(cnt > 0){
            		returnStr = "ERR910";
            	}
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }	
    
/*
 * 개인그룹내 인원체크
 */    
    public int groupAddrCnt(DataStatement stmt, String ownerid, String groupid) {
        ResultSet 	  rs = null ;
        String sql       = "";
        int    cnt       = 0;

        try {
            sql  = "\n Select count(*) ";
            sql	+= "\n   From table_addrbook ";
            sql	+= "\n  Where common    = 1 ";
            sql	+= "\n    And ownerid   = '" + ownerid + "' ";
            sql	+= "\n    And groupid   = "  + groupid;

            rs = stmt.executeQuery(sql) ;

            if ( rs.next() )  {
            	cnt = rs.getInt(1); 
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return cnt;
    }	    

/*
 * 개인전화번호부  중복체크(추가시)
 */    
    public String existUserAddr(DataStatement stmt, String ownerid, String keynumber, String username, String common) {
        ResultSet 	  rs = null ;
        String sql       = "";
        String returnStr = "";
        int    cnt       = 0;

        try {
        	// 동일한 대표번호가 다른이름으로 등록되어 있는지 체크
			sql	 ="\n Select count(*) ";
			sql	+="\n   From table_addrbook ";
            sql	+="\n  Where common    = '1' ";
			sql	+="\n    And ownerid   = '" + ownerid   + "' ";
			sql	+="\n    And keynumber = '" + keynumber + "' ";
            sql	+="\n    And name      = '" + username  + "' ";

            rs = stmt.executeQuery(sql) ;

            if ( rs.next() )  {
            	cnt = rs.getInt(1); 
            	
            	if(cnt == 0){
            		returnStr = "MSG100";
            	}else if(cnt > 0){
            		returnStr = "ERR900";
            	}
            }
            
            if (cnt == 0){
            	if("2".equals(common)){
            		// 동일한 대표번호가 다른이름으로 공유되어 있는지 체크
                    sql	 ="\n Select count(*) ";
                    sql	+="\n   From table_addrbook ";
                    sql	+="\n  Where common    = '2' ";
                    sql	+="\n    And keynumber = '" + keynumber + "' ";
                    sql +="\n    And name      = '" + username  + "' ";

                    rs = stmt.executeQuery(sql);
                    
                    if ( rs.next() )  {
                    	cnt = rs.getInt(1); 
                    	
                    	if(cnt == 0){
                    		returnStr = "MSG100";
                    	}else if(cnt > 0){
                    		returnStr = "ERR940";
                    	}
                    }
            	}
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }	
 
/*
 * 개인전화번호부  추가
 */    
    public String insertUserAddr(DataStatement stmt, AddrBookDTO dto, String publicChk) {
        ResultSet 	      rs = null ;
        String sql           = "";
        String returnStr     = "";
        String publicOwnerId = "";

        try {    
        	// 트랜잭션 시작
			stmt.stxTransaction();
			
			AddrBookDAO dao = new AddrBookDAO();
			if("2".equals(publicChk) && dto.getCommon() == 1){
				sql  = "\n SELECT ownerid";
                sql += "\n   FROM table_addrbookgroup" ;
                sql += "\n  WHERE common  = 2 ";
                sql += "\n    AND groupid = " + dto.getSharedGroupID();

                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	publicOwnerId = Str.CheckNullString(rs.getString("ownerid"));
                }
                if(!"".equals(publicOwnerId)){
					dto.setSharedOwnerID(publicOwnerId);
					int publicResult = dao.insert2(stmt,dto);
					if(publicResult>0){
						//returnStr = "MSG100";
						returnStr = Integer.toString(publicResult);
					}
                }
			}else{
				sql  = "\n SELECT ownerid";
                sql += "\n   FROM table_addrbookgroup" ;
                sql += "\n  WHERE common  = 1 ";
                sql += "\n    AND ownerid = '" + dto.getOwnerID() + "'";
                sql += "\n    AND groupid = "  + dto.getGroupID();

                rs = stmt.executeQuery(sql) ;

                if ( rs.next() )  {
                	int updateResult = dao.insert(stmt,dto);
    				if(updateResult>0){
    					//returnStr = "MSG100";
    					returnStr = Integer.toString(updateResult);
    				}
                }else{
					returnStr = "ERR100";
                }
				
			}	 
			
			if (stmt != null)
				stmt.endTransaction(true);
        	
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }
    
/*
 * 개인전화번호부  중복체크(수정시)
 */    
    public String existUserAddr2(DataStatement stmt, String ownerid, String groupid, String addrid, String keynumber, String username, String common, String ex_ownerid, int ex_groupid, int ex_addrid, String existChk) {
        ResultSet 	  rs = null ;
        String sql       = "";
        String returnStr = "";
        int    cnt       = 0;

        try {
        	// 동일한 대표번호가 다른이름으로 등록되어 있는지 체크
            sql	 ="\n Select count(*) ";
			sql	+="\n   From table_addrbook ";
            sql	+="\n  Where common    = '1' ";
			sql	+="\n    And (ownerid != '" + ownerid   + "' ";
			sql	+="\n     Or  groupid !=  " + groupid;
			sql	+="\n     Or  addrid  !=  " + addrid    + ")";
			sql	+="\n    And ownerid   = '" + ownerid   + "' ";
			sql	+="\n    And keynumber = '" + keynumber + "' ";
            sql	+="\n    And name      = '" + username  + "' ";
            
            rs = stmt.executeQuery(sql) ;

            if ( rs.next() )  {
            	cnt = rs.getInt(1); 
            	
            	if(cnt == 0){
            		returnStr = "MSG100";
            	}else if(cnt > 0){
            		returnStr = "ERR900";
            	}
            }
            
            if (cnt == 0){
            	if("2".equals(common)){
            		// 동일한 대표번호가 다른이름으로 공유되어 있는지 체크
                    sql	 ="\n Select count(*) ";
                    sql	+="\n   From table_addrbook ";
                    sql	+="\n  Where common    = '2' ";
                    sql	+="\n    And keynumber = '" + keynumber + "' ";
                    sql +="\n    And name      = '" + username  + "' ";
                    if("Y".equals(existChk)){
                        sql	+="\n    And (ownerid  != '" + ex_ownerid  + "' ";
                        sql	+="\n     Or  groupid  !=  " + ex_groupid;
                        sql	+="\n     Or  addrid   !=  " + ex_addrid   + ")";
                    }
                    
                    rs = stmt.executeQuery(sql);
                    
                    if ( rs.next() )  {
                    	cnt = rs.getInt(1); 
                    	
                    	if(cnt == 0){
                    		returnStr = "MSG100";
                    	}else if(cnt > 0){
                    		returnStr = "ERR940";
                    	}
                    }
            	}
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }	
    
/*
 * 개인전화번호부  수정
 */    
    public String updateUserAddr(DataStatement stmt, AddrBookDTO dto, String publicChk, String exOwnerid, int exGroupid, int exAddrid, String existChk, String newgroupid) {
        ResultSet 	      rs = null ;
        String sql           = "";
        String returnStr     = "";
        String publicOwnerId = "";
		String ownerID       = dto.getOwnerID();
		int    groupID       = dto.getGroupID();
		int    addrID        = dto.getAddrID();

        try {   
        	// 트랜잭션 시작
			stmt.stxTransaction();
			
			AddrBookDAO dao = new AddrBookDAO();
			// 일반일 경우(1:일반, 2:공유)
			if(dto.getCommon() == 1){
				// 공유 여부(1:미공유, 2:공유)
				if("2".equals(publicChk)){
					sql  = "\n SELECT ownerid";
	                sql += "\n   FROM table_addrbookgroup" ;
	                sql += "\n  WHERE common  = 2 ";
	                sql += "\n    AND groupid = " + dto.getSharedGroupID();

	                rs = stmt.executeQuery(sql) ;

	                if ( rs.next() )  {
	                	publicOwnerId = Str.CheckNullString(rs.getString("ownerid"));
	                }

	                int publicUpdateResult = 0;
					
	                if(!"".equals(publicOwnerId)){
		                //기존공유 존재여부(존재시 'Y')
						if("Y".equals(existChk)){
							dto.setOwnerID(exOwnerid);
							dto.setGroupID(exGroupid);
							dto.setAddrID(exAddrid);
							dto.setCommon(2);
							dto.setGroup(publicOwnerId+"|"+dto.getSharedGroupID());
	
							publicUpdateResult = dao.update4(stmt,dto);
							
							String[] returnGroup = StringUtil.getParser(dto.getGroup(), "|");
							
							dto.setSharedOwnerID(returnGroup[0]);
							dto.setSharedGroupID(Integer.parseInt(returnGroup[1]));
							dto.setSharedAddrID(publicUpdateResult);
						}else{
							dto.setOwnerID(publicOwnerId);
							dto.setGroupID(dto.getSharedGroupID());
							dto.setCommon(2);
							
							publicUpdateResult = dao.insert3(stmt,dto);
							
							dto.setSharedOwnerID(publicOwnerId);
//							dto.setSharedGroupID(dto.getSharedGroupID());
							dto.setSharedAddrID(publicUpdateResult);
						}
						dto.setOwnerID(ownerID);
						dto.setGroupID(groupID);
						dto.setAddrID(addrID);
						dto.setGroup(ownerID+"|"+newgroupid);
						dto.setCommon(1);
												
						//메인 업데이트
						//int updateResult = dao.update3(stmt,dto);
						int updateResult = dao.update3_1(stmt,dto);
						if(updateResult >= 0){
							//returnStr = "MSG100";
							returnStr = Integer.toString(updateResult);
						}
					}
				}else if("1".equals(publicChk)){
					//기존공유 존재여부(존재시 'Y')
					if("Y".equals(existChk)){
						int publicDeleteResult = dao.delete(stmt, exOwnerid, exGroupid, exAddrid);
						publicDeleteResult = dao.update2(stmt,dto);
					}
					dto.setGroup(ownerID+"|"+newgroupid);
					//메인 업데이트
					//int updateResult = dao.update(stmt,dto);
					int updateResult = dao.update_1(stmt,dto);
					if(updateResult >= 0){
						//returnStr = "MSG100";
						returnStr = Integer.toString(updateResult);
					}
				}else{
					//메인 업데이트
//					int updateResult = dao.update(stmt,dto);
					returnStr = "ERR100";
				}
			}else{
				//메인 업데이트
//				int updateResult = dao.update(stmt,dto);	// 개인전화번호만 등록(xml)
				returnStr = "ERR100";
			}
			
			if (stmt != null){
				//if("MSG100".equals(returnStr)){
				if(!"ERR100".equals(returnStr)&&!"ERR300".equals(returnStr)&&!"ERR400".equals(returnStr)&&!"ERR900".equals(returnStr)&&!"ERR910".equals(returnStr)&&!"ERR920".equals(returnStr)&&!"ERR930".equals(returnStr)&&!"ERR940".equals(returnStr)){
					stmt.endTransaction(true);
				}else{
					stmt.endTransaction(false);
				}
			}
        	
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }

/*
 * 개인전화번호부  추가
 */    
    public String deleteUserAddr(DataStatement stmt, AddrBookDTO dto) {
        ResultSet 	      rs = null ;
        String sql           = "";
        String returnStr     = "";

        try {    
        	// 트랜잭션 시작
			stmt.stxTransaction();
			
			AddrBookDAO dao = new AddrBookDAO();
			
			sql  = "\n SELECT sharedgroupid, sharedownerid, sharedaddrid " ;
			sql += "\n   FROM table_AddrBook ";
			sql += "\n  WHERE OwnerID = '"   +   dto.getOwnerID()  +   "'";
			sql += "\n    AND GroupId = "    +   dto.getGroupID();
			sql += "\n    AND AddrId  = "    +   dto.getAddrID();
			
			String sharedownerid = "";
	        int    sharedgroupid = 0;
	        int    sharedaddrid  = 0;
	        
            rs = stmt.executeQuery(sql);
            if (rs.next()){
            	sharedgroupid = rs.getInt("sharedgroupid"); 
            	sharedownerid = Str.CheckNullString(rs.getString("sharedownerid"));
            	sharedaddrid  = rs.getInt("sharedaddrid"); 
            }
            if (rs != null)
                rs.close();
			
            //공유 삭제
			int publicResult = dao.publicDelete(stmt, "2", sharedownerid, sharedgroupid, sharedaddrid);
	        
			//메인 삭제
			int updateResult = dao.delete(stmt, dto.getOwnerID(), dto.getGroupID(), dto.getAddrID());
	        if(updateResult>0){
	        	returnStr = "MSG100";
	        }
			
			if (stmt != null)
				stmt.endTransaction(true);
        	
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return returnStr;
    }

/*
 * 부재중 쪽지 리스트 조회
 */    
    public List paperList(DataStatement stmt, String userID) {
    	NoteDTO 	noteDTO;
        ResultSet 	rs = null ;

        List<NoteDTO> list = new ArrayList<NoteDTO>();
        
        try {
            String sql = "\n SELECT a.notesequence, a.ownerid, a.memo, to_char(a.senddate, 'yyyymmddHHMM') AS senddate, a.senderid, a.readchk,";
            sql = sql +  "\n (select name from table_subscriber where phonenum=a.senderid) AS ownername " ;
            sql = sql +  "\n   FROM table_note a" ;
            sql = sql +  "\n  WHERE a.ownerid = '" + userID + "' ";
            sql = sql +  "\n    AND a.readchk = 0 ";
            sql = sql +  "\n  ORDER BY a.senderid ASC, a.notesequence ASC ";

            rs = stmt.executeQuery(sql) ;

            while ( rs.next() )  {
            	noteDTO = new NoteDTO();
            	noteDTO.setNoteSequence(rs.getInt("notesequence"));
            	noteDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
            	noteDTO.setMemo(Str.CheckNullString(rs.getString("memo")));
            	noteDTO.setSendDate(Str.CheckNullString(rs.getString("senddate")));
            	noteDTO.setSenderID(Str.CheckNullString(rs.getString("senderid")));
            	noteDTO.setReadChk(rs.getInt("readchk"));
            	noteDTO.setOwnerName(Str.CheckNullString(rs.getString("ownername")));
                list.add(noteDTO) ;
            }
            
            int nResult    = 0;
            sql = "Update table_note set readchk = 1 ";
            sql = sql +  "\n  WHERE ownerid = '" + userID + "' AND readchk = 0 ";
            
            nResult = stmt.executeUpdate(sql);
            
            if (nResult >= 1){
            	System.out.println("입력 성공");
            } else {
                System.out.println("입력 실패");
            }
            
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch(Exception e) {}
        }

        return list;
    }    
    
	    /*
	     * 부재중 쪽지 저장
	     */
        public String insertPaperAdd(DataStatement stmt, String ownerid, String memo, String senderid) {
            int    nResult    = 0;
        	String resultStr  = "";
        	String sql        = "";
            ResultSet      rs = null;
            ResultSet     rs2 = null;
            
            try {
                if (stmt != null) {
                	stmt.stxTransaction();

                	// 부재중 쪽지 추가         	
                	if (stmt != null) {
                        sql  = "INSERT INTO table_note (ownerid, memo, senddate, senderid, readchk) ";
                        sql += " values ( " ;
                        sql += "'" + ownerid + "', " ;
                        sql += "'" + memo + "', " ;            
                        sql += "now() , " ;
                        sql += "'" + senderid + "', " ;
                        sql += "0";
                        sql += ")";
                        
                        nResult = stmt.executeUpdate(sql);
                        
                        if (nResult >= 1){
                        	resultStr  = "MSG100";
                        	System.out.println("입력 성공");
                        } else {
                        	resultStr  = "ERR100";
                            System.out.println("입력 실패");
                        }
                    } else {
                    	resultStr  = "ERR500";
                        System.out.println("데이터베이스에 연결할 수 없습니다.");
                    }
                	
        	        stmt.endTransaction(true);                	
                }
                    
            } catch (Exception e) {
                System.out.println(e.getMessage());
                return resultStr;
            } finally {
                try {
                    if (rs != null)
                        rs.close();
                    if (rs2 != null)
                        rs2.close();
                } catch (Exception e) {}
            }
            
            return resultStr;        	    	
        }
	    
	    /*
	     * 개인정보 프로필 수정
	     */
        public String updateUserInfo(DataStatement stmt, String ownerid, String mobile, String homenumber, String fax, String birthday, String mailaddress) {
            int    nResult    = 0;
        	String resultStr  = "";
        	String sql        = "";
            ResultSet      rs = null;
            ResultSet     rs2 = null;
            
            try {
                if (stmt != null) {
                	stmt.stxTransaction();
                	
                	String strIdDomain = WebUtil.CheckNullString(getIdDomain()).trim();
                	
                	// 개인정보 프로필 수정         	
                	if (stmt != null) {
                        sql  = " Update table_subscriber Set ";
                        sql = sql  + "\n  mobile 		= '" + mobile + "' " ;
                        sql = sql  + "\n ,homenumber 	= '" + homenumber + "' " ;
                        sql = sql  + "\n ,fax 			= '" + fax + "' " ;            
                        sql = sql  + "\n ,birthday 		= '" + birthday + "' " ;
                        sql = sql  + "\n ,mailaddress 	= '" + mailaddress + "' " ;
                        sql = sql  + "\n  WHERE id = '" + ownerid + "@" + strIdDomain + ":5060' ";
                        
                        nResult = stmt.executeUpdate(sql);
                        
                        if (nResult >= 1){
                        	resultStr  = "MSG100";
                        	System.out.println("수정 성공");
                        } else {
                        	resultStr  = "ERR100";
                            System.out.println("수정 실패");
                        }
                    } else {
                    	resultStr  = "ERR500";
                        System.out.println("데이터베이스에 연결할 수 없습니다.");
                    }
                	
        	        stmt.endTransaction(true);                	
                }
                    
            } catch (Exception e) {
                System.out.println(e.getMessage());
                return resultStr;
            } finally {
                try {
                    if (rs != null)
                        rs.close();
                    if (rs2 != null)
                        rs2.close();
                } catch (Exception e) {}
            }
            
            return resultStr;        	    	
        }

        /*
         * 소프트폰 사용자 ID, 비밀번호 체크
         */    
            public String sofrPhoneCheck(DataStatement stmt, String ownerid, String pwd) {
                ResultSet 	  rs = null ;
                String sql       = "";
                String returnStr = "";
                int    cnt       = 0;

                try {
                    sql  = "\n Select count(*) ";
                    sql	+= "\n   From table_subscriber ";
                    sql	+= "\n  Where id    = '" + ownerid   + "' ";
                    sql	+= "\n    And pwd   = '" + pwd   + "' ";

                    rs = stmt.executeQuery(sql) ;

                    if ( rs.next() )  {
                    	cnt = rs.getInt(1); 
                    	
                    	if(cnt == 0){
                    		returnStr = "ERR200";
                    	}else if(cnt > 0){
                    		returnStr = "MSG100";
                    	}
                    }
                } catch(Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (rs != null) rs.close();
                    } catch(Exception e) {}
                }

                return returnStr;
            }	
        
}