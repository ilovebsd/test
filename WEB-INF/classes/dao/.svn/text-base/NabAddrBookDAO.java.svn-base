package dao;

import java.sql.ResultSet;
import java.util.List;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;

import dto.AddrBookDTO;
import acromate.common.util.StringUtil;

public class NabAddrBookDAO {

    public NabAddrBookDAO() {}

    /*
     * addrID max값 가져오기
     */
	public int getMaxID(DataStatement stmt, String OwnerID, int GroupId ) {
		int max = 0 ;
		String selectQuery = "\n SELECT coalesce(max(AddrID),0) " ;
        selectQuery       += "\n   FROM table_AddrBook ";
        selectQuery       += "\n  WHERE OwnerID= '"   +   OwnerID  +   "'";
        selectQuery       += "\n    AND GroupId ="    +   GroupId;
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }

	/*
	 * 그룹 아이디 조회
	 */
	public int getGroupID(DataStatement stmt, String OwnerID, String gName) {
		int max = 0 ;
		String selectQuery = "\n SELECT groupid " ;
        selectQuery       += "\n   FROM table_addrbookgroup ";
        selectQuery       += "\n  WHERE OwnerID= '"   +   OwnerID  +   "'";
        selectQuery       += "\n    AND name = '"    +   gName + "' ";
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }

    /*
     * 그룹ID 저장후 ID max값 가져오기
     */
	public int maxGroupID(DataStatement stmt, String OwnerID, String gName) {
		int max 		= 0 ;
		int returnValue = 0 ;
		int nResult 	= 0;
		
		String selectQuery = "\n SELECT coalesce(max(groupid),0) " ;
        selectQuery       += "\n   FROM table_addrbookgroup ";
        selectQuery       += "\n  WHERE OwnerID= '"   +   OwnerID  +   "'";
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
                
                String sql = "INSERT INTO table_AddrBookGroup (ownerid, groupid, name, idx, idtype, memo, common) ";
            	sql = sql + " values ( " ;
            	sql = sql + "'" + OwnerID + "', " ;
            	sql = sql + " " + (max + 1) + " , " ;            
            	sql = sql + "'" + gName + "', " ;
            	sql = sql + " " + (max + 1) + " , " ;
            	sql = sql + " " + (max + 1) + " , " ;
            	sql = sql + "'" + gName + "', 1)" ;
            	nResult = stmt.executeUpdate(sql);
            	
            	returnValue = max + 1;
            	
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnValue;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return returnValue;
    }

	/*
	 * 그룹 아이디 조회
	 */
	public int getAddrCount(DataStatement stmt, String OwnerID, int groupid, String name) {
		int count = 0 ;
		String selectQuery = "\n SELECT count(*) " ;
        selectQuery       += "\n   FROM table_addrbook ";
        selectQuery       += "\n  WHERE OwnerID = '"  +   OwnerID  + "'";
        selectQuery       += "\n    AND groupid = "   +   groupid  + " ";
        selectQuery       += "\n    AND name    = '"  +   name    + "' ";
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return count;
    }

	/*
	 * 전화번호부 추가
	 */
    public int insert(DataStatement stmt, AddrBookDTO addrBook) {

        ResultSet rs = null;
        int nResult = 0;
        int max = getMaxID(stmt, addrBook.getOwnerID(), addrBook.getGroupID());
       
        try {            
            if (stmt != null) {
                String sql = "INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name, idx, PhoneNum, Mobile, Position";
                	sql = sql + " ,Address, Memo, mailaddress, companynumber, Companyaddress, Homepage, keynumber, common, Createdate) ";
                	sql = sql + " values ( " ;
                	sql = sql + "'" + addrBook.getOwnerID() + "', " ;
                	sql = sql + " " + addrBook.getGroupID() + " , " ;            
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + " 1 , " ; 
                	sql = sql + "'" + addrBook.getName() + "', " ;
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + "'" + addrBook.getPhoneNum() + "', " ;
                	sql = sql + "'" + addrBook.getMobile() + "', " ;
                	sql = sql + "'" + addrBook.getPosition() + "', " ;
                	sql = sql + "'" + addrBook.getAddress() + "', " ;
                	sql = sql + "'" + addrBook.getMemo() + "', " ;
                	sql = sql + "'" + addrBook.getMailAddress() + "', " ;
                	sql = sql + "'" + addrBook.getCompanyNumber() + "', " ;
                	sql = sql + "'" + addrBook.getCompanyAddress() + "', " ;
                	sql = sql + "'" + addrBook.getHomePage() + "', " ;
                	sql = sql + "'" + addrBook.getKeyNumber() + "', " ;
                	sql = sql + " " + addrBook.getCommon() + ", Now()) " ; 
                    System.out.println("insert--->"+sql); 
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("입력 성공");
                	nResult = max + 1;
                }else{
                    System.out.println("입력 실패");
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    public int update(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        String 	keynumber = "";
        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set PhoneNum       = '" + addrBook.getPhoneNum()      + "' " ;
                sql = sql +  "\n       ,Mobile         = '" + addrBook.getMobile ()       + "' " ;
                sql = sql +  "\n       ,Position       = '" + addrBook.getPosition()      + "' " ;
                sql = sql +  "\n       ,Address        = '" + addrBook.getAddress()       + "' " ;
                sql = sql +  "\n       ,Memo           = '" + addrBook.getMemo()          + "' " ;
                sql = sql +  "\n       ,mailaddress    = '" + addrBook.getMailAddress()   + "' " ;
                sql = sql +  "\n       ,companynumber  = '" + addrBook.getCompanyNumber() + "' " ;
                sql = sql +  "\n       ,Companyaddress = '" + addrBook.getCompanyAddress()+ "' " ;
                sql = sql +  "\n       ,Homepage       = '" + addrBook.getHomePage()      + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
				if(!"".equals(addrBook.getMobile())){
					keynumber	= addrBook.getMobile();				// 핸드폰이 대표번호인 경우
				}else if(!"".equals(addrBook.getCompanyNumber())){
					keynumber	= addrBook.getCompanyNumber();		// 회사전화가 대표번호인 경우
				}else if(!"".equals(addrBook.getPhoneNum())){
					keynumber	= addrBook.getPhoneNum();			// 집전화가 대표번호인 경우
				}
                sql = sql +  "\n       ,keynumber     = '" + keynumber    + "' " ;
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND name          = '"  + addrBook.getName() + "' ";
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
}
