package dao;

import java.sql.ResultSet;
import java.util.List;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;

import dto.AddrBookDTO;
import acromate.common.util.StringUtil;

public class AddrBookDAO {

    public AddrBookDAO() {}

    /*
     * addrID max값 가져오기
     */
	public int getMaxID(DataStatement stmt, String OwnerID, int GroupId ) {
		int max = 0 ;
		String selectQuery = "\n SELECT coalesce(max(AddrID),0) " ;
        selectQuery       += "\n   FROM table_AddrBook ";
        selectQuery       += "\n  WHERE OwnerID= '"   +   OwnerID  +   "'";
        selectQuery       += "\n    AND GroupId ="    +   GroupId;
        
        ResultSet rs = null;
        System.out.println("getMaxID--->"+selectQuery);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(selectQuery);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
    
	/*
	 * 전화번호부 추가
	 */
    public int insert(DataStatement stmt, AddrBookDTO addrBook) {

        ResultSet rs = null;
        int nResult = 0;
        int max = getMaxID(stmt, addrBook.getOwnerID(), addrBook.getGroupID());
       
        try {            
            if (stmt != null) {
                String sql = "INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name, idx, PhoneNum, Mobile, Position";
                	sql = sql + " ,Department, Memo, company, companynumber, fax, mailaddress, keynumber, birthday, introduction, common, shareddate, Createdate ) ";
                	sql = sql + " values ( " ;
                	sql = sql + "'" + addrBook.getOwnerID() + "', " ;
                	sql = sql + " " + addrBook.getGroupID() + " , " ;            
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + " 1 , " ; 
                	sql = sql + "'" + addrBook.getName() + "', " ;
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + "'" + addrBook.getPhoneNum() + "', " ;
                	sql = sql + "'" + addrBook.getMobile() + "', " ;
                	sql = sql + "'" + addrBook.getPosition() + "', " ;
                	sql = sql + "'" + addrBook.getDepartment() + "', " ;
                	sql = sql + "'" + addrBook.getMemo() + "', " ;
                	sql = sql + "'" + addrBook.getCompany() + "', " ;
                	sql = sql + "'" + addrBook.getCompanyNumber() + "', " ;
                	sql = sql + "'" + addrBook.getFax() + "', " ;
                	sql = sql + "'" + addrBook.getMailAddress() + "', " ;
                	sql = sql + "'" + addrBook.getKeyNumber() + "', " ;
                	sql = sql + "'" + addrBook.getBirthday() + "', " ;
                	sql = sql + "'" + addrBook.getIntroduction() + "', " ;
                	sql = sql + " " + addrBook.getCommon() + " , " ; 
                	if(addrBook.getCommon() == 2){
                		sql +=  " Now(), ";
                	}else{
                		sql +=  " null, ";
                	}
                	sql = sql + " Now()) ";
                    System.out.println("insert--->"+sql); 
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("입력 성공");
                	nResult = max + 1;
                }else{
                    System.out.println("입력 실패");
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    /*
	 * 전화번호부 추가(addrid return)
	 */
    public int insert3(DataStatement stmt, AddrBookDTO addrBook) {

        ResultSet rs = null;
        int nResult = 0;
        int addrId  = 0;
        int max = getMaxID(stmt, addrBook.getOwnerID(), addrBook.getGroupID());
       
        try {            
            if (stmt != null) {
                String sql = "INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name, idx, PhoneNum, Mobile, Position";
                	sql = sql + " ,Department, Memo, company, companynumber, fax, mailaddress, keynumber, birthday, introduction, common, shareddate, Createdate ) ";
                	sql = sql + " values ( " ;
                	sql = sql + "'" + addrBook.getOwnerID() + "', " ;
                	sql = sql + " " + addrBook.getGroupID() + " , " ;            
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + " 1 , " ; 
                	sql = sql + "'" + addrBook.getName() + "', " ;
                	sql = sql + " " + (max + 1) + " , " ; 
                	sql = sql + "'" + addrBook.getPhoneNum() + "', " ;
                	sql = sql + "'" + addrBook.getMobile() + "', " ;
                	sql = sql + "'" + addrBook.getPosition() + "', " ;
                	sql = sql + "'" + addrBook.getDepartment() + "', " ;
                	sql = sql + "'" + addrBook.getMemo() + "', " ;
                	sql = sql + "'" + addrBook.getCompany() + "', " ;
                	sql = sql + "'" + addrBook.getCompanyNumber() + "', " ;
                	sql = sql + "'" + addrBook.getFax() + "', " ;
                	sql = sql + "'" + addrBook.getMailAddress() + "', " ;
                	sql = sql + "'" + addrBook.getKeyNumber() + "', " ;
                	sql = sql + "'" + addrBook.getBirthday() + "', " ;
                	sql = sql + "'" + addrBook.getIntroduction() + "', " ;
                	sql = sql + " " + addrBook.getCommon() + " , " ; 
                	if(addrBook.getCommon() == 2){
                		sql +=  " Now(), ";
                	}else{
                		sql +=  " null, ";
                	}
                	sql = sql + " Now()) ";
                    System.out.println("insert--->"+sql); 
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("입력 성공");
                    addrId = (max + 1);
                }else{
                    System.out.println("입력 실패");
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return addrId ;
    }
    
    /*
     * 개인전화번호 등록시 공유전화번호에 추가
     */
    public int insert2(DataStatement stmt, AddrBookDTO addrBook) {

        ResultSet rs = null;
        int nResult = 0;
        String sql = "";
        int publicMax = getMaxID(stmt, addrBook.getSharedOwnerID(), addrBook.getSharedGroupID());
        int max = getMaxID(stmt, addrBook.getOwnerID(), addrBook.getGroupID());
       
        try {            
            if (stmt != null) {
            	// 공유전화번호부 추가
            	sql = "INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name, idx, PhoneNum, Mobile, Position";
            	sql = sql + " , Department, Memo, company, companynumber, fax, mailaddress, keynumber, birthday, introduction, common ";
            	sql = sql + " , Createdate, shareddate) ";
                sql = sql + " values ( " ;
                sql = sql + "'" + addrBook.getSharedOwnerID() + "', " ;
                sql = sql + " " + addrBook.getSharedGroupID() + " , " ;            
                sql = sql + " " + (publicMax + 1) + " , " ; 
                sql = sql + " 1 , " ; 
                sql = sql + "'" + addrBook.getName() + "', " ;
                sql = sql + " " + (publicMax + 1) + " , " ; 
                sql = sql + "'" + addrBook.getPhoneNum() + "', " ;
                sql = sql + "'" + addrBook.getMobile() + "', " ;
                sql = sql + "'" + addrBook.getPosition() + "', " ;
                sql = sql + "'" + addrBook.getDepartment() + "', " ;
                sql = sql + "'" + addrBook.getMemo() + "', " ;
                sql = sql + "'" + addrBook.getCompany() + "', " ;
                sql = sql + "'" + addrBook.getCompanyNumber() + "', " ;
                sql = sql + "'" + addrBook.getFax() + "', " ;
                sql = sql + "'" + addrBook.getMailAddress() + "', " ;
                sql = sql + "'" + addrBook.getKeyNumber() + "', " ;
                sql = sql + "'" + addrBook.getBirthday() + "', " ;
                sql = sql + "'" + addrBook.getIntroduction() + "', " ;
                sql = sql + " 2 , " ; 
                sql = sql + " Now(), ";
                sql = sql + " Now()) ";
                
                System.out.println("insert--->"+sql); 
                                        
                nResult = stmt.executeUpdate(sql);

            	
                sql = "INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name, idx, PhoneNum, Mobile, Position";
            	sql = sql + " , Department, Memo, company, companynumber, fax, mailaddress, keynumber, birthday, introduction, common ";
            	sql = sql + " , shareddate, sharedgroupid, sharedownerid, sharedaddrid, Createdate  ) ";
                sql = sql + " values ( " ;
                sql = sql + "'" + addrBook.getOwnerID() + "', " ;
                sql = sql + " " + addrBook.getGroupID() + " , " ;            
                sql = sql + " " + (max + 1) + " , " ; 
                sql = sql + " 1 , " ; 
                sql = sql + "'" + addrBook.getName() + "', " ;
                sql = sql + " " + (max + 1) + " , " ; 
                sql = sql + "'" + addrBook.getPhoneNum() + "', " ;
                sql = sql + "'" + addrBook.getMobile() + "', " ;
                sql = sql + "'" + addrBook.getPosition() + "', " ;
                sql = sql + "'" + addrBook.getDepartment() + "', " ;
                sql = sql + "'" + addrBook.getMemo() + "', " ;
                sql = sql + "'" + addrBook.getCompany() + "', " ;
                sql = sql + "'" + addrBook.getCompanyNumber() + "', " ;
                sql = sql + "'" + addrBook.getFax() + "', " ;
                sql = sql + "'" + addrBook.getMailAddress() + "', " ;
                sql = sql + "'" + addrBook.getKeyNumber() + "', " ;
                sql = sql + "'" + addrBook.getBirthday() + "', " ;
                sql = sql + "'" + addrBook.getIntroduction() + "', " ;
                sql = sql + " " + addrBook.getCommon() + " , " ; 
                sql = sql + " Now(), ";
                sql = sql + " " + addrBook.getSharedGroupID() + " , " ;            
                sql = sql + "'" + addrBook.getSharedOwnerID() + "', " ;
                sql = sql + " " + (publicMax + 1) + " , " ;            
                sql = sql + " Now()) ";
                
                System.out.println("insert--->"+sql); 
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("입력 성공");
                	nResult = max + 1;
                }else{
                    System.out.println("입력 실패");
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }

    
    public int delete(DataStatement stmt, String OwnerID, int GroupID, int AddrID) {

    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String query = "\n Delete From table_AddrBook  ";
                  query +=     "\n  Where OwnerID = '" + OwnerID + "'";
                  query +=     "\n    AND GroupID = " + GroupID;
                  query +=     "\n    AND AddrID = " + AddrID  ;
                  nResult = stmt.executeUpdate(query);
                  System.out.println(query);
           } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }

    public int publicDelete(DataStatement stmt, String common, String ownerId, String keynumber) {

    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String query = "\n Delete From table_AddrBook  ";
                  query +=     "\n  Where common    = " + common;
                  query +=     "\n    AND ownerid = '" + ownerId + "' ";
                  query +=     "\n    AND keynumber = '" + keynumber + "' ";
                  nResult = stmt.executeUpdate(query);
                  System.out.println(query);
           } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    public int publicDelete(DataStatement stmt, String common, String ownerId, int groupId, int addrId) {

    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String query = "\n Delete From table_AddrBook  ";
                  query +=     "\n  Where common    = " + common;
                  query +=     "\n    AND ownerid = '" + ownerId + "' ";
                  query +=     "\n    AND groupId = "  + groupId;
                  query +=     "\n    AND addrId  = "  + addrId;
                  nResult = stmt.executeUpdate(query);
                  System.out.println(query);
           } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }

   
    public int update(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set company       = '" + addrBook.getCompany()      + "' " ;
                sql = sql +  "\n       ,Position      = '" + addrBook.getPosition()     + "' " ;
                sql = sql +  "\n       ,Department    = '" + addrBook.getDepartment()   + "' " ;
                sql = sql +  "\n       ,Mobile        = '" + addrBook.getMobile ()      + "' " ;
                sql = sql +  "\n       ,PhoneNum      = '" + addrBook.getPhoneNum()     + "' " ;
                sql = sql +  "\n       ,companynumber = '" + addrBook.getCompanyNumber()+ "' " ;
                sql = sql +  "\n       ,fax           = '" + addrBook.getFax()          + "' " ;
                sql = sql +  "\n       ,mailaddress   = '" + addrBook.getMailAddress()  + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
                sql = sql +  "\n       ,Memo          = '" + addrBook.getMemo()         + "' " ;
                sql = sql +  "\n       ,name          = '" + addrBook.getName()         + "' " ;
                sql = sql +  "\n       ,keynumber     = '" + addrBook.getKeyNumber()    + "' " ;
                sql = sql +  "\n       ,birthday      = '" + addrBook.getBirthday()     + "' " ;
                sql = sql +  "\n       ,introduction  = '" + addrBook.getIntroduction() + "' " ;

                if(group[0].equals(addrBook.getOwnerID()) && group[1].equals(""+addrBook.getGroupID())){
                }else{
                	int max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
                	sql = sql +  "\n       ,OwnerID       = '" + group[0]               + "' " ;
                	sql = sql +  "\n       ,GroupID       = "  + group[1];
                	sql = sql +  "\n       ,AddrID        = "  + (max + 1);
                	sql = sql +  "\n       ,idx           = "  + (max + 1);
                }
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    /*
     * 전화번호부 수정(개인등록시 공유정보 null)
     */
    public int update2(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set shareddate    = null " ;
                sql = sql +  "\n       ,sharedgroupid = null " ;
                sql = sql +  "\n       ,sharedownerid = null " ;
                sql = sql +  "\n       ,sharedaddrid  = null " ;
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID() + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    /*
     * 전화번호부 수정(개인등록시 공유정보 update)
     */
    public int update3(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set company       = '" + addrBook.getCompany()      + "' " ;
                sql = sql +  "\n       ,Position      = '" + addrBook.getPosition()     + "' " ;
                sql = sql +  "\n       ,Department    = '" + addrBook.getDepartment()   + "' " ;
                sql = sql +  "\n       ,Mobile        = '" + addrBook.getMobile ()      + "' " ;
                sql = sql +  "\n       ,PhoneNum      = '" + addrBook.getPhoneNum()     + "' " ;
                sql = sql +  "\n       ,companynumber = '" + addrBook.getCompanyNumber()+ "' " ;
                sql = sql +  "\n       ,fax           = '" + addrBook.getFax()          + "' " ;
                sql = sql +  "\n       ,mailaddress   = '" + addrBook.getMailAddress()  + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
                sql = sql +  "\n       ,Memo          = '" + addrBook.getMemo()         + "' " ;
                sql = sql +  "\n       ,name          = '" + addrBook.getName()         + "' " ;
                sql = sql +  "\n       ,keynumber     = '" + addrBook.getKeyNumber()    + "' " ;
                sql = sql +  "\n       ,birthday      = '" + addrBook.getBirthday()     + "' " ;
                sql = sql +  "\n       ,introduction  = '" + addrBook.getIntroduction() + "' " ;
                sql = sql +  "\n       ,shareddate    = Now() " ;
            	sql = sql +  "\n       ,sharedownerid = '" + addrBook.getSharedOwnerID()+ "' " ;
            	sql = sql +  "\n       ,sharedgroupid = "  + addrBook.getSharedGroupID();
            	sql = sql +  "\n       ,sharedaddrid  = "  + addrBook.getSharedAddrID();

                if(group[0].equals(addrBook.getOwnerID()) && group[1].equals(""+addrBook.getGroupID())){
                }else{
                	int max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
                	sql = sql +  "\n       ,OwnerID       = '" + group[0]               + "' " ;
                	sql = sql +  "\n       ,GroupID       = "  + group[1];
                	sql = sql +  "\n       ,AddrID        = "  + (max + 1);
                	sql = sql +  "\n       ,idx           = "  + (max + 1);
                }
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
    /*
     *  전화번호부 수정(addrid return)
     */
    public int update4(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        int addrID  = 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set company       = '" + addrBook.getCompany()      + "' " ;
                sql = sql +  "\n       ,Position      = '" + addrBook.getPosition()     + "' " ;
                sql = sql +  "\n       ,Department    = '" + addrBook.getDepartment()   + "' " ;
                sql = sql +  "\n       ,Mobile        = '" + addrBook.getMobile ()      + "' " ;
                sql = sql +  "\n       ,PhoneNum      = '" + addrBook.getPhoneNum()     + "' " ;
                sql = sql +  "\n       ,companynumber = '" + addrBook.getCompanyNumber()+ "' " ;
                sql = sql +  "\n       ,fax           = '" + addrBook.getFax()          + "' " ;
                sql = sql +  "\n       ,mailaddress   = '" + addrBook.getMailAddress()  + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
                sql = sql +  "\n       ,Memo          = '" + addrBook.getMemo()         + "' " ;
                sql = sql +  "\n       ,name          = '" + addrBook.getName()         + "' " ;
                sql = sql +  "\n       ,keynumber     = '" + addrBook.getKeyNumber()    + "' " ;
                sql = sql +  "\n       ,birthday      = '" + addrBook.getBirthday()     + "' " ;
                sql = sql +  "\n       ,introduction  = '" + addrBook.getIntroduction() + "' " ;

                if(group[0].equals(addrBook.getOwnerID()) && group[1].equals(""+addrBook.getGroupID())){
                	addrID = addrBook.getAddrID();
                }else{
                	int max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
                	sql = sql +  "\n       ,OwnerID       = '" + group[0]               + "' " ;
                	sql = sql +  "\n       ,GroupID       = "  + group[1];
                	sql = sql +  "\n       ,AddrID        = "  + (max + 1);
                	sql = sql +  "\n       ,idx           = "  + (max + 1);
                	addrID = (max + 1);
                }
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정  성공");
                else
                    System.out.println("수정  실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return addrID ;
    }



    
    /*
	 * 공유전화번호를 개인전화번호로 복사
	 */
	public String getAddrCopy(DataStatement stmt, String groupStr, String copyStr) {
		String resultStr = "";
		String sql       = "";
		int    nResult   = 0;
		
    	ResultSet rs = null;
        
        try {            
        	copyStr  = new String(Str.CheckNullString(copyStr).getBytes("8859_1"), "euc-kr");	// 작성자ID
        	groupStr = new String(Str.CheckNullString(groupStr).getBytes("8859_1"), "euc-kr");	// 작성자ID

        	String[] addr = StringUtil.getParser(copyStr, "");
    		String[] group = StringUtil.getParser(groupStr, "|");

    		if (stmt != null) {
				if(addr != null && group.length == 2){
					// 트랜잭션 시작
					stmt.stxTransaction();
					
					for(int i=0; i < addr.length; i++){
						String[] dataStr = StringUtil.getParser(addr[i], "|");
						if(dataStr != null){
							sql  = "\n SELECT ownerid ";
							sql += "\n   FROM table_addrbook ";
							sql += "\n  WHERE common    = 1 ";
							sql += "\n    AND ownerid   = '" + group[0]   + "'";
							sql += "\n    AND keynumber = '" + dataStr[3] + "'";
							sql += "\n    AND name      = '" + dataStr[4] + "'";
							
			                rs = stmt.executeQuery(sql);
			                if (rs.next()) {
			                	if (stmt != null)
									stmt.endTransaction(false);
			                	
			                	resultStr = "1|"+dataStr[4];
			                	break;
			                }

			                int max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
			                
			                sql  = "\n INSERT INTO table_AddrBook (ownerid, groupid, AddrID, IdType, name,";
			                sql += "\n                             idx, PhoneNum, Mobile, Position, Department,";
		                	sql += "\n                             Memo, company, companynumber, fax, mailaddress,";
		                	sql += "\n                             keynumber, birthday, introduction, common, Createdate ) ";
		                	sql += "\n SELECT '" + group[0] + "', " + group[1] + ", " + (max + 1) + ", 1, name, ";
		                	sql += "\n        " + (max + 1) + ", PhoneNum, Mobile, Position, Department," ; 
		                	sql += "\n        Memo, company, companynumber, fax, mailaddress,";
		                	sql += "\n        keynumber, birthday, introduction, 1, Now()";
							sql += "\n   FROM table_AddrBook";
							sql += "\n  WHERE ownerid = '" + dataStr[0] + "'";
							sql += "\n    AND groupid = "  + dataStr[1];
							sql += "\n    AND addrid  = "  + dataStr[2];
							System.out.println("sql==="+sql);

			                nResult = stmt.executeUpdate(sql);
			                if (nResult >= 1)
			                    System.out.println("입력 성공");
			                else
			                    System.out.println("입력 실패");
						}
					}
					if("".equals(resultStr)){
						resultStr = "0|";
					}
					if (stmt != null)
						stmt.endTransaction(true);
				}                                        
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
        	try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
		
		return resultStr;
	}
	
    /*
	 * 우선 수신 설정 추가(update)
	 */
	public int getFirstCalleeUpdate(DataStatement stmt, String insertStr) {
		int    nResult   = 0;
		String sql       = "";
		        
        try {            
        	String[] addrbook = StringUtil.getParser(insertStr, "");

    		if (stmt != null) {
				if(addrbook != null){
					// 트랜잭션 시작
					stmt.stxTransaction();
					
					for(int i=0; i < addrbook.length; i++){
						nResult = 0;
						String[] dataStr = StringUtil.getParser(addrbook[i], "|");
						if(dataStr != null){
							if(dataStr.length == 4){
								if("1".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usecompanynumberacf = 1 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];

					                nResult = stmt.executeUpdate(sql);
								}else if("2".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usephoneacf = 1 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];
					                
					                nResult = stmt.executeUpdate(sql);
								}else if("3".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usemobileacf = 1 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];
					                
					                nResult = stmt.executeUpdate(sql);
								}
							}
						}
					}

					if (stmt != null)
						stmt.endTransaction(true);
				}                                        
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
    		return nResult;
        }
	}
    
    /*
	 * 우선 수신 설정 삭제(update)
	 */
	public int getFirstCalleeDelete(DataStatement stmt, String deleteStr) {
		int    nResult   = 0;
		String sql       = "";
		        
        try {            
        	String[] addrbook = StringUtil.getParser(deleteStr, "");

    		if (stmt != null) {
				if(addrbook != null){
					// 트랜잭션 시작
					stmt.stxTransaction();
					
					for(int i=0; i < addrbook.length; i++){
						nResult = 0;
						String[] dataStr = StringUtil.getParser(addrbook[i], "|");
						if(dataStr != null){
							if(dataStr.length == 4){
								if("1".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usecompanynumberacf = 0 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];

					                nResult = stmt.executeUpdate(sql);
								}else if("2".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usephoneacf = 0 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];
					                
					                nResult = stmt.executeUpdate(sql);
								}else if("3".equals(dataStr[3])){
					                sql  = "\n UPDATE table_AddrBook ";
					                sql += "\n    SET usemobileacf = 0 ";
					                sql += "\n  WHERE OwnerID = '" + dataStr[0] + "'";
					                sql += "\n    AND GroupID = "  + dataStr[1];
					                sql += "\n    AND AddrID  = "  + dataStr[2];
					                
					                nResult = stmt.executeUpdate(sql);
								}
							}
						}
					}

					if (stmt != null)
						stmt.endTransaction(true);
				}                                        
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
    		return nResult;
        }
	}
	
    /*
	 * 전화번호부 그룹이동
	 */
	public String getAddrMove(DataStatement stmt, String groupStr, String moveStr) {
		String resultStr = "";
		String sql       = "";
		int    nResult   = 0;
		
    	ResultSet rs = null;
        try {            
        	moveStr  = new String(Str.CheckNullString(moveStr).getBytes("8859_1"), "euc-kr");	// 전화번호부
        	groupStr = new String(Str.CheckNullString(groupStr).getBytes("8859_1"), "euc-kr");	// 그룹

        	String[] addr = StringUtil.getParser(moveStr, "");
    		String[] group = StringUtil.getParser(groupStr, "|");

    		if (stmt != null) {
				if(addr != null && group.length == 2){
					// 트랜잭션 시작
					stmt.stxTransaction();
					
					for(int i=0; i < addr.length; i++){
						String[] dataStr = StringUtil.getParser(addr[i], "|");
						if(dataStr != null){
							// 동일한 대표번호의 이름이 공유그룹에 등록되어 있는지 체크
				            sql	 ="\n Select ownerid ";
							sql	+="\n   From table_addrbook ";
				            sql	+="\n  Where common    = '2' ";
							sql	+="\n    And (ownerid != '" + dataStr[0]   + "' ";
							sql	+="\n     Or  groupid !=  " + dataStr[1];
							sql	+="\n     Or  addrid  !=  " + dataStr[2]    + ")";
							sql	+="\n    And keynumber = '" + dataStr[3] + "' ";
				            sql	+="\n    And name      = '" + dataStr[4]  + "' ";

			                rs = stmt.executeQuery(sql);
			                if (rs.next()) {
			                	if (stmt != null)
									stmt.endTransaction(false);
			                	
			                	resultStr = "1|"+dataStr[4];
			                	break;
			                }
			                
			                if(dataStr[0].equals(group[0]) && dataStr[1].equals(group[1])){
			                	resultStr = "0|";
			                }else{
			                	int max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
			                	
			                	sql  = "\n UPDATE table_AddrBook";
				                sql += "\n    SET ownerid = '" + group[0] + "'";
			                	sql += "\n       ,groupid = "  + group[1];
			                	sql += "\n       ,addrid  = "  + (max + 1);
								sql += "\n  WHERE ownerid = '" + dataStr[0] + "'";
								sql += "\n    AND groupid = "  + dataStr[1];
								sql += "\n    AND addrid  = "  + dataStr[2];
								System.out.println("sql==="+sql);

				                nResult = stmt.executeUpdate(sql);
				                if (nResult >= 1)
				                	resultStr = "0|";
				                else
				                    System.out.println("입력 실패");
			                }
						}
					}

					if (stmt != null)
						stmt.endTransaction(true);
				}                                        
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
        	try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
		
		return resultStr;
	}

    /*
     * 전화번호부 수정(소프트폰 에서 XML연동해서  개인등록시 공유정보 update)
     */
    public int update3_1(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        int max 	= 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        try {            
            if (stmt != null) {            	
            	String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set company       = '" + addrBook.getCompany()      + "' " ;
                sql = sql +  "\n       ,Position      = '" + addrBook.getPosition()     + "' " ;
                sql = sql +  "\n       ,Department    = '" + addrBook.getDepartment()   + "' " ;
                sql = sql +  "\n       ,Mobile        = '" + addrBook.getMobile ()      + "' " ;
                sql = sql +  "\n       ,PhoneNum      = '" + addrBook.getPhoneNum()     + "' " ;
                sql = sql +  "\n       ,companynumber = '" + addrBook.getCompanyNumber()+ "' " ;
                sql = sql +  "\n       ,fax           = '" + addrBook.getFax()          + "' " ;
                sql = sql +  "\n       ,mailaddress   = '" + addrBook.getMailAddress()  + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
                sql = sql +  "\n       ,Memo          = '" + addrBook.getMemo()         + "' " ;
                sql = sql +  "\n       ,name          = '" + addrBook.getName()         + "' " ;
                sql = sql +  "\n       ,keynumber     = '" + addrBook.getKeyNumber()    + "' " ;
                sql = sql +  "\n       ,birthday      = '" + addrBook.getBirthday()     + "' " ;
                sql = sql +  "\n       ,introduction  = '" + addrBook.getIntroduction() + "' " ;
                sql = sql +  "\n       ,shareddate    = Now() " ;
            	sql = sql +  "\n       ,sharedownerid = '" + addrBook.getSharedOwnerID()+ "' " ;
            	sql = sql +  "\n       ,sharedgroupid = "  + addrBook.getSharedGroupID();
            	sql = sql +  "\n       ,sharedaddrid  = "  + addrBook.getSharedAddrID();

                if(group[0].equals(addrBook.getOwnerID()) && group[1].equals(""+addrBook.getGroupID())){
                }else{
                	max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
                	sql = sql +  "\n       ,OwnerID       = '" + group[0]               + "' " ;
                	sql = sql +  "\n       ,GroupID       = "  + group[1];
                	sql = sql +  "\n       ,AddrID        = "  + (max + 1);
                	sql = sql +  "\n       ,idx           = "  + (max + 1);
                }
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("수정  성공");
                	nResult = max+1;
                }else{
                    System.out.println("수정  실패");
                    nResult = -1;
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }

    /*
     * 전화번호부 수정(소프트폰 에서 XML연동해서  개인등록시 update)
     */    
    public int update_1(DataStatement stmt, AddrBookDTO addrBook) {

    	ResultSet rs = null;
        int nResult = 0;
        int max 	= 0;
        String[] group = StringUtil.getParser(addrBook.getGroup(), "|");
        try {            
            if (stmt != null) {
                String sql = "\n UPDATE table_AddrBook " ;
                sql = sql +  "\n    Set company       = '" + addrBook.getCompany()      + "' " ;
                sql = sql +  "\n       ,Position      = '" + addrBook.getPosition()     + "' " ;
                sql = sql +  "\n       ,Department    = '" + addrBook.getDepartment()   + "' " ;
                sql = sql +  "\n       ,Mobile        = '" + addrBook.getMobile ()      + "' " ;
                sql = sql +  "\n       ,PhoneNum      = '" + addrBook.getPhoneNum()     + "' " ;
                sql = sql +  "\n       ,companynumber = '" + addrBook.getCompanyNumber()+ "' " ;
                sql = sql +  "\n       ,fax           = '" + addrBook.getFax()          + "' " ;
                sql = sql +  "\n       ,mailaddress   = '" + addrBook.getMailAddress()  + "' " ;
                sql = sql +  "\n       ,editdate      = Now() " ;
                sql = sql +  "\n       ,Memo          = '" + addrBook.getMemo()         + "' " ;
                sql = sql +  "\n       ,name          = '" + addrBook.getName()         + "' " ;
                sql = sql +  "\n       ,keynumber     = '" + addrBook.getKeyNumber()    + "' " ;
                sql = sql +  "\n       ,birthday      = '" + addrBook.getBirthday()     + "' " ;
                sql = sql +  "\n       ,introduction  = '" + addrBook.getIntroduction() + "' " ;

                if(group[0].equals(addrBook.getOwnerID()) && group[1].equals(""+addrBook.getGroupID())){
                }else{
                	max = getMaxID(stmt, group[0], Integer.parseInt(group[1]));
                	sql = sql +  "\n       ,OwnerID       = '" + group[0]               + "' " ;
                	sql = sql +  "\n       ,GroupID       = "  + group[1];
                	sql = sql +  "\n       ,AddrID        = "  + (max + 1);
                	sql = sql +  "\n       ,idx           = "  + (max + 1);
                }
                sql = sql +  "\n  Where OwnerID       = '" + addrBook.getOwnerID()      + "' ";
                sql = sql +  "\n    AND GroupID       = "  + addrBook.getGroupID();
                sql = sql +  "\n    AND AddrID        = "  + addrBook.getAddrID() ;
                
                System.out.println("-----000>"+sql);                                                                                         
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1){
                    System.out.println("수정  성공");
                    nResult = max+1;
                }else{
                    System.out.println("수정  실패");
                    nResult = -1;
                }
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return nResult ;
    }
    
}
