package dao.ipcs;

import acromate.*;

import java.sql.ResultSet;
import java.util.Vector;
import java.util.List;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.security.login.LoginBean;
import acromate.ConnectionManager;
import dto.ipcs.IpcsIvrDTO;
import dto.system.PrefixTableDTO;
import business.ipcs.IpcsIvrList;
	
public class IpcsIvrDAO {

    public IpcsIvrDAO() {}
    
    public boolean ipcsIvrInsert(IpcsIvrDTO ipcsDTO) {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	int 	count 				= 0;
	    	String 	numberType			= ipcsDTO.getNumberType().trim();		// NumberType(1:직통번호, 2:단축번호)
	    	// SIPEndPoint 테이블
	    	String 	domainId			= ipcsDTO.getDomainId().trim();			// 도메인 
	    	String 	zoneCode			= ipcsDTO.getZoneCode().trim();			// Nat Zone Code
	    	int 	endPointClass		= ipcsDTO.getEndPointClass();			// 
	    	int 	dynamicFlag			= ipcsDTO.getDynamicFlag();				// 
	    	int 	multiEndpoint		= ipcsDTO.getMultiEndpoint();			// 해당 EndpointID 를 여러 단말이 사용 가능여부
	    	int 	dtmfType			= ipcsDTO.getDtmfType();				// SIP 단말의 DTMF 처리방식
	    	int 	options				= ipcsDTO.getOptions();					// 
	    	// E164 테이블
	    	String 	e164				= ipcsDTO.getE164().trim();				// E164
	    	String 	areaCode			= ipcsDTO.getAreaCode().trim();			// 지역번호
	    	int 	isGroup				= ipcsDTO.getIsGroup();					// 가입자 구분(개인/회사)
	    	String 	groupId				= ipcsDTO.getGroupId().trim();			// 소속그룹
//	    	String	subId				= ipcsDTO.getSubId().trim();			// 하위그룹(Pick Up그룹)
	    	String	subId				= "";									// 하위그룹(Pick Up그룹)
	    	String 	extensionNum		= ipcsDTO.getExtensionNum().trim();		// 내선번호
	    	String 	callerService		= ipcsDTO.getCallerService().trim();	// 부가서비스 Caller 서비스
	    	String 	answerService		= ipcsDTO.getAnswerService().trim();	// 부가서비스 Caller 서비스
	    	String 	commonService		= ipcsDTO.getCommonService().trim();	// 부가서비스 Caller 서비스
	    	int 	chargeType			= ipcsDTO.getChargeType();				// 과금타입
	    	int 	endpointRelationType= ipcsDTO.getEndpointRelationType();	// 단말정보 등록여부
	    	int 	startFlag			= ipcsDTO.getStartFlag();				// 개통여부
	    	// E164Route 테이블
	    	String 	routingNumber		= ipcsDTO.getRoutingNumber().trim();	// Route 할때 비교되는 번호
	    	String 	endpointID			= ipcsDTO.getEndpointID().trim();		// 연결된 단말기 ID
	    	int 	protocol			= ipcsDTO.getProtocol();				// 프로토콜 타입
	    	int 	routingNumberType	= ipcsDTO.getRoutingNumberType();		// Route 유형
	    	int 	priority			= ipcsDTO.getPriority();
	    	String 	e164Route2			= ipcsDTO.getE164Route2().trim();		// Route 할때 비교되는 번호
	    	// NASA_TRUNK_SET 테이블
	    	int		systemIdx			= ipcsDTO.getSystemIdx();
	    	String	serverIp			= "203.242.63.84";
	    	String	sswServerIp			= "203.242.63.84";
	    	String	ivrTel				= ipcsDTO.getIvrTel();
	    	String	authId				= ipcsDTO.getAuthId();
	    	String	sswReg				= ipcsDTO.getSswReg();
	    	String	sswDomainName		= ipcsDTO.getSswDomainName();
	    	int		sswLocalPort		= ipcsDTO.getSswLocalPort();
	    	int		sswRemotePort		= ipcsDTO.getSswRemotePort();
	    	String	sswProtocol			= ipcsDTO.getSswProtocol();
	    	String	sswProtocolType		= ipcsDTO.getSswProtocolType();
	    	int		sswExpires			= ipcsDTO.getSswExpires();
	    	String	scCompany			= ipcsDTO.getScCompany();
	    	String	useYN				= ipcsDTO.getUseYN();
	    	String	trunkType			= ipcsDTO.getTrunkType();

	    	
	    	String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	
	    	//LoginBean 	lbean 			= new LoginBean();
	    	//String		serverIp 		= lbean.getActive_host();
	    	//String		sswServerIp 	= lbean.getActive_host();
	    	//System.out.println("VMS 관련 EMS 서버 IP : "+lbean.toString());
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();	    	
	    	
	    	
	    	int maxID = getMaxID(statement);
	    	System.out.println("음성안내번호 Max 값 : "+maxID);
	    	
	    	//endpointID 	= endpointID + maxID + "@" + domainId + ":5060";
	    	endpointID 	= endpointID + "@" + domainId + ":5060";			// 임시 테스트용으로 E164 으로 처리함 (090212)
	    	authId		= endpointID;
	    	
	    	/***** table_SIPENDPOINT 에 단말 ID 저장 ********/
	    	sql = "INSERT INTO table_SIPENDPOINT(EndpointID, EndpointClass, DomainID, DynamicFlag, ZoneCode, MultiEndpoint, DtmfType, Options) VALUES( ";
	    	sql +=	"'" + endpointID +"',"+ "33" +", '" + domainId + "',0, '" + zoneCode + "',  " + multiEndpoint + "," + dtmfType + ", " + options + ")";
	        int nResult = 0;
	        System.out.println("0:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[단말ID 오류] '","[Phone ID Error] '") +endpointID+ l.x("' 단말 ID 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }
	    
	        /***** TABLE_E164 에 저장 ********/
	        if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
		        sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " answerService, callerService, commonService, SubID) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            + extensionNum + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"')";
	        }else{
	        	// 단축번호인 경우 내선번호에 E164를 입력함.
	        	sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " answerService, callerService, commonService, SubID) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            + e164 + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"')";	        	
	        }
			System.out.println(sql);
			nResult = statement.executeUpdate(sql);
			if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
			
            /***** table_E164Route 에서 해당 전화번호가 다른 단말에 등록된 전화번호인지 확인 ********/
	        sql = "SELECT COUNT(*) FROM table_E164Route WHERE E164 = '"+ e164 +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()) count = rs.getInt(1);
            System.out.println("table_E164Route 검색번호 : "+e164);
            System.out.println("table_E164Route 검색결과 : "+count);
            rs.close();
	        
            System.out.println("NumberType(1:직통번호, 2:단축번호) : "+numberType);
            if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
	
	            /***** 지역번호없는E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164Route2 + "','" + e164  + "', 2,'" + endpointID + "',2, 1) ";
	            System.out.println("2:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
            
                /***** 그룹번호포함 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + "99" + extensionNum + "','" + e164  + "', 2,'" + endpointID + "',5, 1) ";
                System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}	            
            }else{
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
            	
                /***** 그룹번호포함 단축 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + "99" + e164 + "','" + e164  + "', 2,'" + endpointID + "',5, 1) ";
                System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}            	
            }
	                    
            /***** 인증테이블 등록********/
            sql = "SELECT COUNT(*) FROM table_Auth WHERE  Protocol = 2 AND EndpointID = '" + endpointID +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}

            sql   = "INSERT INTO table_Auth(E164, protocol , EndpointID, Authmode, username, IPPort) ";
            sql += " VALUES ('0',2,'" + endpointID  + "', '0', '" + e164  + "', '0')";            
            System.out.println("5:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 단말 인증정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
            /***** NASA_TRUNK_SET 테이블 등록********/
            sql   = "Insert into NASA_TRUNK_SET(";	
            sql += "	system_idx,";
            sql += "	server_ip,"; 			// 서버아이피
            sql += "	ssw_server_ip,"; 		// 교환기 아이피
            sql += "	ivr_tel,"; 				// 실 전화번호(예:070-7700-1000)
            sql += "	auth_id,"; 				// 인증할때 아이디
            sql += "	ssw_reg,"; 				// 교환기 등록 여부(Y:등록, N:등록안함)
            sql += "	ssw_domain_name,"; 		// 교환기 도메인
            sql += "	ssw_local_port,"; 		// MS 시그날 포트
            sql += "	ssw_remote_port,"; 		// 교환기 시그날 포트
            sql += "	ssw_protocol,"; 		// H323, SIP, MGCP, MEGACO
            sql += "	ssw_protocol_type,"; 	// T:TCP, U:UDP, S:SCTP
            sql += "	ssw_expires,"; 			// 등록 유지 시간
            sql += "	sc_company,"; 			// 음성안내 그룹명
            sql += "	use_yn,"; 				// 사용 유무(Y:사용함, N:사용안함)
            sql += "	trunk_type) ";  		// 대표번호 형식(N:일반대표번호, P:Call Park)
            sql += "Values(";
            sql += "	" + systemIdx + ", ";
            sql += "	'" + serverIp + "', ";
            sql += "	'" + sswServerIp + "', ";
            sql += "	'" + ivrTel + "', ";
            sql += "	'" + authId + "', ";
            sql += "	'" + sswReg + "', ";
            sql += "	'" + sswDomainName + "', ";
            sql += "	" + sswLocalPort + ", ";
            sql += "	" + sswRemotePort + ", ";
            sql += "	'" + sswProtocol + "', ";
            sql += "	'" + sswProtocolType + "', ";
            sql += "	" + sswExpires + ", ";
            sql += "	'" + scCompany + "', ";
            sql += "	'" + useYN + "', ";
            sql += "	'" + trunkType + "')";
	        System.out.println("6:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +ivrTel+ l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }

            /***** nasa_systemupdate 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("7:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	        
            System.out.println("결과값1 :"+returnVal);
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        System.out.println("결과값2 :"+returnVal);
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
            System.out.println("결과값3 :"+returnVal);
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
	public int getMaxID(DataStatement stmt) {
		int max = 0 ;
		String sql = "SELECT coalesce(max(tr_idx)+1,0) FROM NASA_TRUNK_SET" ;
        ResultSet rs = null;
        System.out.println("getMaxID--->"+sql);
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
    
    public boolean ipcsIvrEdit(String hiEi64, String hiScCompany){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
//    		System.out.println("############ 수정 : 1111111");
    		int 		nResult 	= 0;
    		String 		sql 		= "";
	    	String 		e164		= hiEi64;			// 음성안내 번호	    	
	    	String 		scCompany	= hiScCompany;		// 음성안내 그룹명
//	    	System.out.println("############ 수정 : 222222");
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
//	    	System.out.println("############ 수정 : 55555555");
            
            /***** 음성안내 번호 NASA_TRUNK_SET 수정 ********/
            sql = "Update NASA_TRUNK_SET Set sc_company = '" + scCompany + "' ";
            sql = sql + " WHERE ivr_tel = '"+e164+"'" ;            
            System.out.println("음성안내 번호 NASA_TRUNK_SET 수정 SQL : "+sql);
            statement.executeUpdate(sql);            	
            
            /***** nasa_vms_user 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
            /***** table_prefixtable 수정 추가(09.05.14)********/
            sql = "Update table_prefixtable Set description = '" + scCompany + "' ";
            sql = sql + " WHERE startprefix = '"+e164+"'" ;            
            System.out.println("음성안내 번호 table_prefixtable 수정 SQL : "+sql);
            statement.executeUpdate(sql);            
            /**************************************************/
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean ipcsIvrDelete(String hiEi64, String hiAuthId) {
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	
	    	String 		e164		= hiEi64;		// E164
	    	String 		endpointID	= hiAuthId;		// 연결된 단말기 ID
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	System.out.println("받은 endpointID :"+endpointID);
	    	System.out.println("받은 e164 :"+e164);
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	/***** NASA_TRUNK_SET 삭제 ********/
	    	sql = "DELETE FROM NASA_TRUNK_SET WHERE ivr_tel = '"+e164+"'";
            System.out.println("1:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** table_prefixtable 수정 추가(09.05.14)********/
	    	
            sql = "DELETE FROM table_prefixtable WHERE startprefix = '"+e164+"'";
            System.out.println("2:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_Sipendpoint 삭제 ********/
//            sql = "DELETE FROM table_sipendpoint WHERE endpointid = '" + hiAuthId + "'";
//            System.out.println("2:"+sql);
//            statement.executeUpdate(sql);
            
            /***** Table_E164 삭제 ********/
//            sql = "DELETE FROM table_e164 WHERE e164 = '"+e164+"'";
//            System.out.println("3:"+sql);
//            statement.executeUpdate(sql);
                        
            /***** Table_E164route 삭제 ********/
//            sql = "DELETE FROM table_e164route WHERE e164 = '"+e164+"'";
//            System.out.println("4:"+sql);
//            statement.executeUpdate(sql);

            /***** Table_Auth 삭제 ********/
//            sql = "DELETE FROM table_auth WHERE endpointid = '" + hiAuthId + "'";
//            System.out.println("5:"+sql);
//            statement.executeUpdate(sql);
            /**************************************************/
            
            
            /***** nasa_vms_user 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("6:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean ipcsNormalIvrDelete(String hiEi64, String hiAuthId) {
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	
	    	String 		e164		= hiEi64;		// E164
	    	String 		endpointID	= hiAuthId;		// 연결된 단말기 ID
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	System.out.println("받은 endpointID :"+endpointID);
	    	System.out.println("받은 e164 :"+e164);
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	/***** NASA_TRUNK_SET 삭제 ********/
	    	sql = "Update NASA_TRUNK_SET Set ivr_tel = '', auth_id = '' WHERE ivr_tel = '"+e164+"'";
            System.out.println("1:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** table_prefixtable 수정 추가(09.05.14)********/
	    	
            sql = "DELETE FROM table_prefixtable WHERE startprefix = '"+e164+"'";
            System.out.println("2:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** nasa_vms_user 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("6:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean ipcsIvrInsertPrefix(IpcsIvrDTO ipcsDTO, PrefixTableDTO dto) {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	// NASA_TRUNK_SET 테이블
	    	int		systemIdx			= ipcsDTO.getSystemIdx();
	    	//String	serverIp			= "203.242.63.85";
	    	//String	sswServerIp			= "203.242.63.85";
	    	String	serverIp			= ipcsDTO.getServerIp();
	    	String	sswServerIp			= ipcsDTO.getSswServerIp();	    	
	    	String	ivrTel				= ipcsDTO.getIvrTel();
	    	String	authId				= ipcsDTO.getAuthId();
	    	String	sswReg				= ipcsDTO.getSswReg();
	    	String	sswDomainName		= ipcsDTO.getSswDomainName();
	    	int		sswLocalPort		= ipcsDTO.getSswLocalPort();
	    	int		sswRemotePort		= ipcsDTO.getSswRemotePort();
	    	String	sswProtocol			= ipcsDTO.getSswProtocol();
	    	String	sswProtocolType		= ipcsDTO.getSswProtocolType();
	    	int		sswExpires			= ipcsDTO.getSswExpires();
	    	String	scCompany			= ipcsDTO.getScCompany();
	    	String	useYN				= ipcsDTO.getUseYN();
	    	String	trunkType			= ipcsDTO.getTrunkType();
	    	String	infoDtmf			= ipcsDTO.getInfoDtmf();
	    	
	    	String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();	    	
	    	
	    	int nResult = 0;
	    	
            /***** NASA_TRUNK_SET 테이블 등록********/
            sql   = "Insert into NASA_TRUNK_SET(";	
            sql += "	system_idx,";
            sql += "	server_ip,"; 			// 서버아이피
            sql += "	ssw_server_ip,"; 		// 교환기 아이피
            sql += "	ivr_tel,"; 				// 실 전화번호(예:070-7700-1000)
            sql += "	auth_id,"; 				// 인증할때 아이디
            sql += "	ssw_reg,"; 				// 교환기 등록 여부(Y:등록, N:등록안함)
            sql += "	ssw_domain_name,"; 		// 교환기 도메인
            sql += "	ssw_local_port,"; 		// MS 시그날 포트
            sql += "	ssw_remote_port,"; 		// 교환기 시그날 포트
            sql += "	ssw_protocol,"; 		// H323, SIP, MGCP, MEGACO
            sql += "	ssw_protocol_type,"; 	// T:TCP, U:UDP, S:SCTP
            sql += "	ssw_expires,"; 			// 등록 유지 시간
            sql += "	sc_company,"; 			// 음성안내 그룹명
            sql += "	use_yn,"; 				// 사용 유무(Y:사용함, N:사용안함)
            sql += "	trunk_type, ";  		// 대표번호 형식(N:일반대표번호, P:Call Park)
            sql += "	info_dtmf) ";  			// 
            sql += "Values(";
            sql += "	" + systemIdx + ", ";
            sql += "	'" + serverIp + "', ";
            sql += "	'" + sswServerIp + "', ";
            sql += "	'" + ivrTel + "', ";
            sql += "	'" + authId + "', ";
            sql += "	'" + sswReg + "', ";
            sql += "	'" + sswDomainName + "', ";
            sql += "	" + sswLocalPort + ", ";
            sql += "	" + sswRemotePort + ", ";
            sql += "	'" + sswProtocol + "', ";
            sql += "	'" + sswProtocolType + "', ";
            sql += "	" + sswExpires + ", ";
            sql += "	'" + scCompany + "', ";
            sql += "	'" + useYN + "', ";
            sql += "	'" + trunkType + "', ";
            sql += "	'" + infoDtmf + "')";
	        System.out.println("1:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +ivrTel+ l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }

		        
            /***** nasa_systemupdate 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+ivrTel+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	        
            System.out.println("결과값1 :"+returnVal);
            
            
            /***** table_PrefixTable 테이블 등록********/
            String	prefixId	= getPrefixTableID(statement);
            dto.setPrefixTableId(prefixId);
            
            sql = "\n INSERT INTO table_PrefixTable(PREFIXTABLEID, STARTPREFIX, ENDPREFIX, "; 
        	sql = sql +  "\n 			CALLTYPE, ROUTESELECTRULE, PROTOCOL, ROUTEID, CHARGETYPE, ";
        	sql = sql +  "\n 			DESCRIPTION, MINDIGITCOUNT, MAXDIGITCOUNT, ROUTINGENDPOINTTYPE) ";
        	sql = sql +  "\n                 	values (" ;
        	sql = sql + "'" + dto.getPrefixTableId()     	+ "' , " ;
        	sql = sql + "'" + dto.getStartPrefix()     		+ "' , " ;
        	sql = sql + "'" + dto.getEndPrefix()     		+ "' , " ;            	
        	sql = sql + " " + dto.getCallType()  			+ "  , " ;            	
        	sql = sql + " " + dto.getRouteSelectRule()  		+ "  , " ;
        	if(dto.getRouteSelectRule()==1){
        		sql = sql + " " + dto.getProtocol() 			+ "  , " ;
        	}else{
        		sql = sql + " null , " ;
        	}
        	sql = sql + "'" + dto.getRouteId()     			+ "' , " ;
        	sql = sql + " " + dto.getChargeType()  			+ "  , " ;
        	sql = sql + "'" + dto.getDescription()     		+ "' , " ;
        	sql = sql + " " + dto.getMinDigitCount()  		+ "  , " ;
        	sql = sql + " " + dto.getMaxDigitCount()  		+ "  , " ;
        	sql = sql + " " + dto.getRoutingEndpointType()	+ " " ;
        	sql = sql + ") ";
            System.out.println("insert--->"+sql);
                                    
            nResult = statement.executeUpdate(sql);
            if (nResult >= 1)
                System.out.println("입력 성공");
            else
                System.out.println("입력 실패");            
            
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        System.out.println("결과값2 :"+returnVal);
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
            System.out.println("결과값3 :"+returnVal);
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean ipcsIvrInsertNormalPrefix(IpcsIvrDTO ipcsDTO, PrefixTableDTO dto) {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	// NASA_TRUNK_SET 테이블
	    	int		systemIdx			= ipcsDTO.getSystemIdx();
	    	//String	serverIp			= "203.242.63.85";
	    	//String	sswServerIp			= "203.242.63.85";
	    	String	serverIp			= ipcsDTO.getServerIp();
	    	String	sswServerIp			= ipcsDTO.getSswServerIp();	    	
	    	String	ivrTel				= ipcsDTO.getIvrTel();
	    	String	authId				= ipcsDTO.getAuthId();
	    	String	sswReg				= ipcsDTO.getSswReg();
	    	String	sswDomainName		= ipcsDTO.getSswDomainName();
	    	int		sswLocalPort		= ipcsDTO.getSswLocalPort();
	    	int		sswRemotePort		= ipcsDTO.getSswRemotePort();
	    	String	sswProtocol			= ipcsDTO.getSswProtocol();
	    	String	sswProtocolType		= ipcsDTO.getSswProtocolType();
	    	int		sswExpires			= ipcsDTO.getSswExpires();
	    	String	scCompany			= ipcsDTO.getScCompany();
	    	String	useYN				= ipcsDTO.getUseYN();
	    	String	trunkType			= ipcsDTO.getTrunkType();
	    	String	infoDtmf			= ipcsDTO.getInfoDtmf();
	    	
	    	String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();	    	
	    	
	    	IpcsIvrList 	ipcsIvrList = new IpcsIvrList();
	    	
	    	int nResult = 0;
	    	int trIdx 	= ipcsIvrList.getTr_Idx(statement);
	    	
	    	if(trIdx==0){
	            /***** NASA_TRUNK_SET 테이블 등록********/
	            sql   = "Insert into NASA_TRUNK_SET(";	
	            sql += "	system_idx,";
	            sql += "	server_ip,"; 			// 서버아이피
	            sql += "	ssw_server_ip,"; 		// 교환기 아이피
	            sql += "	ivr_tel,"; 				// 실 전화번호(예:070-7700-1000)
	            sql += "	auth_id,"; 				// 인증할때 아이디
	            sql += "	ssw_reg,"; 				// 교환기 등록 여부(Y:등록, N:등록안함)
	            sql += "	ssw_domain_name,"; 		// 교환기 도메인
	            sql += "	ssw_local_port,"; 		// MS 시그날 포트
	            sql += "	ssw_remote_port,"; 		// 교환기 시그날 포트
	            sql += "	ssw_protocol,"; 		// H323, SIP, MGCP, MEGACO
	            sql += "	ssw_protocol_type,"; 	// T:TCP, U:UDP, S:SCTP
	            sql += "	ssw_expires,"; 			// 등록 유지 시간
	            sql += "	sc_company,"; 			// 음성안내 그룹명
	            sql += "	use_yn,"; 				// 사용 유무(Y:사용함, N:사용안함)
	            sql += "	trunk_type, ";  		// 대표번호 형식(N:일반대표번호, P:Call Park)
	            sql += "	info_dtmf) ";  			// 
	            sql += "Values(";
	            sql += "	" + systemIdx + ", ";
	            sql += "	'" + serverIp + "', ";
	            sql += "	'" + sswServerIp + "', ";
	            sql += "	'" + ivrTel + "', ";
	            sql += "	'" + authId + "', ";
	            sql += "	'" + sswReg + "', ";
	            sql += "	'" + sswDomainName + "', ";
	            sql += "	" + sswLocalPort + ", ";
	            sql += "	" + sswRemotePort + ", ";
	            sql += "	'" + sswProtocol + "', ";
	            sql += "	'" + sswProtocolType + "', ";
	            sql += "	" + sswExpires + ", ";
	            sql += "	'" + scCompany + "', ";
	            sql += "	'" + useYN + "', ";
	            sql += "	'" + trunkType + "', ";
	            sql += "	'" + infoDtmf + "')";
		        System.out.println("1:"+sql);
		        nResult = statement.executeUpdate(sql);
		        if (nResult < 1){
		        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +ivrTel+ l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
		        }
	    	}else{
	            /***** NASA_TRUNK_SET 테이블 수정********/
	            sql   = "Update NASA_TRUNK_SET Set ";	
	            sql += "	  ivr_tel 	 = '" + ivrTel + "' ";
	            sql += "	, auth_id 	 = '" + authId + "' ";
	            sql += "	, sc_company = '" + scCompany + "' ";
	            sql += " Where trunk_type = 'N' ";
		        System.out.println("1:"+sql);
		        nResult = statement.executeUpdate(sql);
		        if (nResult < 1){
		        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +ivrTel+ l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
		        }
		        
	            /***** nasa_answer_dateday 테이블 수정********/
	            sql   = "Update nasa_answer_dateday Set tr_idx = " + trIdx + " ";	
		        System.out.println("2:"+sql);
		        nResult = statement.executeUpdate(sql);
		        if (nResult < 1){
		        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +ivrTel+ l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
		        }		        		        
	    	}
	    	
            /***** nasa_systemupdate 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+ivrTel+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	        
            System.out.println("결과값1 :"+returnVal);
            
            
            /***** table_PrefixTable 테이블 등록********/
            String	prefixId	= getPrefixTableID(statement);
            dto.setPrefixTableId(prefixId);
            
            sql = "\n INSERT INTO table_PrefixTable(PREFIXTABLEID, STARTPREFIX, ENDPREFIX, "; 
        	sql = sql +  "\n 			CALLTYPE, ROUTESELECTRULE, PROTOCOL, ROUTEID, CHARGETYPE, ";
        	sql = sql +  "\n 			DESCRIPTION, MINDIGITCOUNT, MAXDIGITCOUNT, ROUTINGENDPOINTTYPE) ";
        	sql = sql +  "\n                 	values (" ;
        	sql = sql + "'" + dto.getPrefixTableId()     	+ "' , " ;
        	sql = sql + "'" + dto.getStartPrefix()     		+ "' , " ;
        	sql = sql + "'" + dto.getEndPrefix()     		+ "' , " ;            	
        	sql = sql + " " + dto.getCallType()  			+ "  , " ;            	
        	sql = sql + " " + dto.getRouteSelectRule()  		+ "  , " ;
        	if(dto.getRouteSelectRule()==1){
        		sql = sql + " " + dto.getProtocol() 			+ "  , " ;
        	}else{
        		sql = sql + " null , " ;
        	}
        	sql = sql + "'" + dto.getRouteId()     			+ "' , " ;
        	sql = sql + " " + dto.getChargeType()  			+ "  , " ;
        	sql = sql + "'" + dto.getDescription()     		+ "' , " ;
        	sql = sql + " " + dto.getMinDigitCount()  		+ "  , " ;
        	sql = sql + " " + dto.getMaxDigitCount()  		+ "  , " ;
        	sql = sql + " " + dto.getRoutingEndpointType()	+ " " ;
        	sql = sql + ") ";
            System.out.println("insert--->"+sql);
                                    
            nResult = statement.executeUpdate(sql);
            if (nResult >= 1)
                System.out.println("입력 성공");
            else
                System.out.println("입력 실패");            
            
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        System.out.println("결과값2 :"+returnVal);
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
            System.out.println("결과값3 :"+returnVal);
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean updateTrIdx() {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	String		sql 			= "";
	    	ResultSet 	rs 				= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();	    	
	    	
	    	IpcsIvrList 	ipcsIvrList = new IpcsIvrList();	    	
	    	int nResult = 0;
	    	int trIdx 	= ipcsIvrList.getTr_Idx(statement);
	    			        
            /***** nasa_answer_dateday 테이블 수정********/
            sql   = "Update nasa_answer_dateday Set tr_idx = " + trIdx + " ";	
	        System.out.println("1:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[음성안내번호 오류] '","[Phone ID Error] '") +l.x("' 음성안내번호 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }		        		        
	    	
            /***** nasa_systemupdate 테이블 Update********/
            sql   = "update nasa_systemupdate set su_check = 'Y'";
            System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[IVR System 정보 오류] '","[Auth Properties Error] '")+l.x("'는 IVR System 수정이 실패하였습니다. IVR System 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	        
                                   
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
	public String getPrefixTableID(DataStatement stmt) {
		String prefisID = "";
		String sql = "SELECT prefixTableID FROM table_prefixtableid Where prefixtableid = 'Dial Plan' " ;
        ResultSet rs = null;

        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) prefisID = rs.getString(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return prefisID;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return prefisID;
    }
    
}
