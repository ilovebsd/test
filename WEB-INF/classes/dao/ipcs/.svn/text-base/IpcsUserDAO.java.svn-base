package dao.ipcs;

import acromate.*;

import java.sql.ResultSet;
import java.util.Vector;
import java.util.List;

import system.SystemConfigFileMake;
import system.SystemConfigSet;

import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
import dto.ipcs.IpcsUserDTO;
import framework.Shell.LinuxShell;

import business.ipcs.IpcsList;

public class IpcsUserDAO {

    public IpcsUserDAO() {}
    
    public boolean ipcsUserInsert(IpcsUserDTO ipcsDTO, String goodsName_Type, String beforeAuthPass) {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	int 	count 				= 0;
	    	String 	numberType			= ipcsDTO.getNumberType().trim();		// NumberType(1:직통번호, 2:단축번호)
	    	// SIPEndPoint 테이블
	    	String 	domainId			= ipcsDTO.getDomainId().trim();			// 도메인 
	    	String 	zoneCode			= ipcsDTO.getZoneCode().trim();			// Nat Zone Code
	    	int 	endPointClass		= ipcsDTO.getEndPointClass();			// 
	    	int 	dynamicFlag			= ipcsDTO.getDynamicFlag();				// 
	    	int 	multiEndpoint		= ipcsDTO.getMultiEndpoint();			// 해당 EndpointID 를 여러 단말이 사용 가능여부
	    	int 	dtmfType			= ipcsDTO.getDtmfType();				// SIP 단말의 DTMF 처리방식
	    	int 	options				= ipcsDTO.getOptions();					// 
	    	// E164 테이블
	    	String 	e164				= ipcsDTO.getE164().trim();				// E164
	    	String 	areaCode			= ipcsDTO.getAreaCode().trim();			// 지역번호
	    	int 	isGroup				= ipcsDTO.getIsGroup();					// 가입자 구분(개인/회사)
	    	String 	groupId				= ipcsDTO.getGroupId().trim();			// 소속그룹
//	    	String	subId				= ipcsDTO.getSubId().trim();			// 하위그룹(Pick Up그룹)
	    	String	subId				= "Pick-Up";							// 하위그룹(Pick Up그룹)
	    	String 	extensionNum		= ipcsDTO.getExtensionNum().trim();		// 내선번호
	    	String 	callerService		= ipcsDTO.getCallerService().trim();	// 부가서비스 Caller 서비스
	    	String 	answerService		= ipcsDTO.getAnswerService().trim();	// 부가서비스 Caller 서비스
	    	String 	commonService		= ipcsDTO.getCommonService().trim();	// 부가서비스 Caller 서비스
	    	int 	chargeType			= ipcsDTO.getChargeType();				// 과금타입
	    	int 	endpointRelationType= ipcsDTO.getEndpointRelationType();	// 단말정보 등록여부
	    	int 	startFlag			= ipcsDTO.getStartFlag();				// 개통여부
	    	String 	mailBox				= ipcsDTO.getMailBox().trim();			// 메일박스ID
	    	// E164Route 테이블
	    	String 	routingNumber		= ipcsDTO.getRoutingNumber().trim();	// Route 할때 비교되는 번호
	    	String 	endpointID			= ipcsDTO.getEndpointID().trim();		// 연결된 단말기 ID
	    	int 	protocol			= ipcsDTO.getProtocol();				// 프로토콜 타입
	    	int 	routingNumberType	= ipcsDTO.getRoutingNumberType();		// Route 유형
	    	int 	priority			= ipcsDTO.getPriority();
	    	String 	e164Route2			= ipcsDTO.getE164Route2().trim();		// Route 할때 비교되는 번호
	    	// Subscriber 테이블
	    	String 	pwd					= ipcsDTO.getPwd();						// 비밀번호
	    	String 	name				= ipcsDTO.getName();					// 이름
	    	String 	position			= ipcsDTO.getPosition();				// 직급
	    	int 	department			= ipcsDTO.getDepartment();				// 부서
	    	String 	mobile				= ipcsDTO.getMobile();					// 핸드폰
	    	String 	homenumber			= ipcsDTO.getHomeNumber();				// 집전화
	    	String 	mailaddress			= ipcsDTO.getMailaddress();				// 메일주소
	    	// Auth 테이블
	    	int 	authMode			= ipcsDTO.getAuthMode();				// 인증 Mode
	    	String 	authIP				= ipcsDTO.getIpAddress();				// 인증 IP
	    	int 	authPort			= ipcsDTO.getIpPort();					// 인증 Port
	    	String 	authID				= ipcsDTO.getUserName();				// 인증 ID
	    	String 	authPass			= ipcsDTO.getPassWord();				// 인증 비밀번호	    	
	    	// table_provision 테이블
	    	String 	mac					= ipcsDTO.getMac();						// Mac
	    	String	macType				= "";
	    	if(!"".equals(mac)){
		    	String	strMac				= mac.substring(0,8);		    	
		    	if("00:11:a9".equals(strMac)){
		    		macType	= "MOIMSTONE";
		    	}else if("00:1a:0b".equals(strMac)){
		    		macType	= "JUNGWOO";
		   		}else if("00:1c:e0".equals(strMac)){
		   			macType	= "DASAN";
		    	}
	    	}
	    	
	    	//System.out.println("비밀번호 로그 $$$$$$$$$$$$$$$ : "+pwd);
	    	//System.out.println("사용자 이름 $$$$$$$$$$$$$$$ : "+name);
	    	//System.out.println("사용자 직위 $$$$$$$$$$$$$$$ : "+position);
	    	
	    	endpointID = endpointID + "@" + domainId + ":5060";
	    	
	    	String			sql 		= "";
	    	ResultSet 		rs 			= null;
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	/***** table_SIPENDPOINT 에 단말 ID 저장 ********/
	    	sql = "INSERT INTO table_SIPENDPOINT(EndpointID, EndpointClass, DomainID, DynamicFlag, ZoneCode, MultiEndpoint, DtmfType, Options) VALUES( ";
	    	sql +=	"'" + endpointID +"',"+ "33" +", '" + domainId + "',0, '" + zoneCode + "',  " + multiEndpoint + "," + dtmfType + ", " + options + ")";
	        int nResult = 0;
	        System.out.println("0:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[단말ID 오류] '","[Phone ID Error] '") +endpointID+ l.x("' 단말 ID 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }
	    
	        /***** TABLE_E164 에 저장 ********/
	        if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
		        sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " callerService, answerService, commonService, SubID,MailBox) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            + extensionNum + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"','"
	            + mailBox +"')";
	        }else{
	        	// 단축번호인 경우 내선번호에 E164를 입력함.
	        	sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " callerService, answerService, commonService, SubID,MailBox) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            //+ e164 + "','"
	            + extensionNum + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"','"
	            + mailBox +"')";	        	
	        }
			System.out.println(sql);
			nResult = statement.executeUpdate(sql);
			if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
			
            /***** table_E164Route 에서 해당 전화번호가 다른 단말에 등록된 전화번호인지 확인 ********/
	        sql = "SELECT COUNT(*) FROM table_E164Route WHERE E164 = '"+ e164 +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()) count = rs.getInt(1);
            System.out.println("table_E164Route 검색번호 : "+e164);
            System.out.println("table_E164Route 검색결과 : "+count);
            rs.close();
	        
            System.out.println("NumberType(1:직통번호, 2:단축번호) : "+numberType);
            if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
	
	            /***** 지역번호없는E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164Route2 + "','" + e164  + "', 2,'" + endpointID + "',2, 1) ";
	            System.out.println("2:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
            
                /***** 그룹번호포함 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + "99" + extensionNum + "','" + e164  + "', 2,'" + endpointID + "',5, 1) ";
                System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}	            
            }else{
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}

            	/***** 그룹번호포함 단축 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            //sql +=	"  VALUES ('" + "99" + e164 + "','" + e164 + "', 2,'" + endpointID + "',5, 1) ";
	            sql +=	"  VALUES ('" + "99" + extensionNum + "','" + e164 + "', 2,'" + endpointID + "',5, 1) ";
	            System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}            	
            }
	        
            
            /***** 프레즌스(Presence) 테이블 업데이트 *******/
            //updatePresence(statement, e164, endpointID);            
            sql = "SELECT COUNT(*) FROM table_Presence WHERE Usere164 = '" + e164 +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
            
            //등록시각을 불러온다
            int registerTime = 0;
            sql = "SELECT registeredTime FROM table_sipcontact WHERE endpointid='" + endpointID + "'";
            rs = statement.executeQuery(sql);
            if (rs.next()) registerTime = rs.getInt(1);
            rs.close();
            
            sql   = "INSERT INTO table_presence(UserE164, EndpointID, Protocol, UserType, Options, RegisterTime, PresenceStatus) ";            
            sql += " VALUES ('" + e164  + "', '" + endpointID  + "', 2, 101, 0, " + registerTime + ",0)";
            System.out.println("5:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            sql = "SELECT COUNT(*) FROM table_PresenceReport WHERE Usere164 = '" + e164 +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[PresenceReport정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 PresenceReport 정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
            
            sql   = "INSERT INTO table_PresenceReport(UserE164, OfferID, Protocol, OfferType, ReportType) ";
            sql += " VALUES ('" + e164  + "', '', 0, 0, 101)";
            System.out.println("6:"+sql);
            nResult = statement.executeUpdate(sql);
            System.out.println("6-1:"+nResult);
            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
            
            sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' ";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){            
	            sql   = "Insert into table_presenceReport(usere164, offerid, reporttype, offertype, protocol) ";
	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 From table_presenceReport ";
	            sql += " Where usere164 <> '" + e164 +"' ";
	            System.out.println("7:"+sql);
	            nResult = statement.executeUpdate(sql);
	            System.out.println("7-1:"+nResult);
	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
            }
            
            sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' and offerid <> '' ";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){                        
	            sql   = "Insert into table_presenceReport(offerid, usere164, reporttype, offertype, protocol) ";
	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 from table_presenceReport ";
	            sql += " Where usere164 <> '" + e164 +"' and offerid <> '' ";           
	            System.out.println("8:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	            
            }
            
            sql   = "INSERT INTO table_featureservice(E164, ServiceNo, Priority) VALUES('" + e164  + "', '6045', 1)";            
            System.out.println("9:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            // Auto CallBack Service 추가 2009.08.22
            sql   = "INSERT INTO table_featureservice(E164, ServiceNo, Priority) VALUES('" + e164  + "', '5282', 2)";            
            System.out.println("9-1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
            // Default 통화 대기음 추가 2011.04.18
			int maxId2 	= getMaxID(statement, e164);
        	sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
			sql = sql + "  values('" + e164 + "', '5031', "+ (maxId2 + 1) +", 'default_moh.wav', 2, 1, 0, 2)";
			System.out.println("9-2:"+sql);
			nResult = statement.executeUpdate(sql);
			if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

			/***** IMS 관련 추가 20121101 ********/
			if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
				sql = " insert into table_featureservice(e164, serviceno, priority, userparam, endpointid, inoutflag, servicetype, errorcontrol, protocol) "; 
				sql = sql + "  values('" + e164 + "', '2903', "+ (maxId2 + 2) +", '+82', NULL, 2, 1, 0, 2)";
				System.out.println("9-3:"+sql);
				nResult = statement.executeUpdate(sql);
				if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
				
				sql = " insert into table_featureservice(e164, serviceno, priority, userparam, endpointid, inoutflag, servicetype, errorcontrol, protocol) "; 
				sql = sql + "  values('" + e164 + "', '5422', "+ (maxId2 + 3) +", '', NULL, 2, 1, 0, 2)";
				System.out.println("9-4:"+sql);
				nResult = statement.executeUpdate(sql);
				if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
			}
			
			/** 가상발신번호 부가서비스(5431) **/ //hc-add : 20180417 : req.chun : 단축번호로 등록일 경우
			if("2".equals(numberType) && ipcsDTO.getUserNumber()!=null&& ipcsDTO.getUserNumber().length()>0){
				sql = " insert into table_featureservice(e164, serviceno, priority, userparam, inoutflag, servicetype, errorcontrol, protocol) "; 
				sql = sql + "  values('" + e164 + "', 5431, 5431, '3,"+ ipcsDTO.getUserNumber() +", ', 2, 1, 0, 2)";
				System.out.println("9-5:"+sql);
				nResult = statement.executeUpdate(sql);
				if (nResult < 1){	throw new Exception(l.x("[FeatureService정보 오류] '","[FeatureService Properties Error] '")+e164+l.x("'는 FeatureService 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
			}
			
            /***** 인증테이블 등록********/
            sql = "SELECT COUNT(*) FROM table_Auth WHERE  Protocol = 2 AND EndpointID = '" + endpointID +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}

            
            /***** IMS 관련 추가(IMS 장비이면 username 값이 authID + @ + 도메인, Descriptor 항목 추가) 20121101 ********/
			String authUserName = "";
            if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
            	authUserName = authID + "@" + domainId;
			}else{
				authUserName = authID;
			}
            //sql   = "INSERT INTO table_Auth(E164, protocol , EndpointID, password, Authmode, username, IPAddress, IPPort) ";
            //sql += " VALUES ('0',2,'" + endpointID  + "', '" + authPass + "', " + authMode + ", '" + authUserName  + "', '" + authIP  + "', " + authPort + ")";
            sql   = "INSERT INTO table_Auth(E164, protocol , EndpointID, password, Authmode, username, IPAddress, IPPort, Descriptor) ";
            sql += " VALUES ('0',2,'" + endpointID  + "', '" + authPass + "', " + authMode + ", '" + authUserName  + "', '" + authIP  + "', " + authPort + ", '"+beforeAuthPass+"')";
            System.out.println("10:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 단말 인증정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
            /***** 사용자테이블(table_subscriber) 등록********/
            sql = "SELECT COUNT(*) FROM table_subscriber WHERE id = '" + endpointID +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[사용자 등록 오류] '","[Auth Properties Error] '")+endpointID+l.x("'는 사용자 정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}

            sql = "INSERT INTO table_subscriber(id, loginlevel , pwd, phonenum, name, position, department, mobile, homenumber, extension, mailaddress) ";
            sql = sql + " VALUES ('" + endpointID  + "', 1, '" + pwd  + "', '" + e164  + "', '" + name  + "', '" + position  + "', " + department  + ", ";
            sql = sql + " '" + mobile  + "', '" + homenumber  + "', '" + extensionNum  + "', '" + mailaddress  + "')";
            System.out.println("11:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[사용자 등록 오류] '","[Auth Properties Error] '")+endpointID+l.x("'는 사용자 정보등록이 실패하였습니다. 사용자 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            

            
            /***** 부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록********/
            sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + ipcsDTO.getDepartment() + "";
            rs = statement.executeQuery(sql);
            String tempKeynumber = "";
            if(rs.next()==true){
            	tempKeynumber = rs.getString("keynumber");
            }
            rs.close();
            if (!"".equals(tempKeynumber) && tempKeynumber != null){	
                int nextIndex = 0;
                sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                rs = statement.executeQuery(sql);
                if (rs.next()) nextIndex = 1 + rs.getInt(1);
                rs.close();
            	
                sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
                sql += " VALUES ('"+tempKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
                System.out.println("12:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
            
                int maxHuntIndex = 0;
                sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                rs = statement.executeQuery(sql);
                if (rs.next()) maxHuntIndex = rs.getInt(1);
                rs.close();
            
                sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + tempKeynumber + "'";
                System.out.println("13:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
            }

            /***** VMS테이블(nasa_vms_user) 등록********/
            // 20101208 VMS 등록 안하게 수정
//            sql = "Insert into nasa_vms_user(vms_id, vms_name, vms_pswd, vms_ext, vms_lang, vms_msave ";
//            sql = sql + " , vms_rectime, vms_silence_time, vms_msgretention, vms_userauth) values( ";
//            sql = sql + " '" + e164  + "', '" + e164  + "', '0000', '" + e164  + "', 'kor', 'R', 300, 5, 10, 'P002') ";            		
//            System.out.println("14:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 1){	throw new Exception(l.x("[VMS 등록 오류] '","[Auth Properties Error] '")+e164+l.x("'는 VMS등록이 실패하였습니다. VMS등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            
            
            /***** table_provision 테이블(Ei64, Mac) 등록********/
            if(!"".equals(mac)){
	            sql = "Update table_provision set e164 = '" + e164  + "', use = 1 Where physical_address = '" + mac + "' ";
	            System.out.println("15:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[Provision 등록 오류] '","[Provision Properties Error] '")+e164+l.x("'는 MAC등록이 실패하였습니다. MAC등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));}            

				SystemConfigFileMake makeFile = new SystemConfigFileMake();
				
				if("MOIMSTONE".equals(macType)){
					if ("ACRO-CBS-IMS".equals(goodsName_Type) || "ACRO-HCBS-IMS".equals(goodsName_Type)){
						int insertResult = makeFile.macMakeImsFile(ipcsDTO, 1);
					}else{
						int insertResult = makeFile.macMakeFile(ipcsDTO, 1);
					}
				}else if("JUNGWOO".equals(macType)){
					int insertResult = makeFile.macJungWooFile(ipcsDTO, 1);
				}else if("DASAN".equals(macType)){
					int insertResult = makeFile.macDasanFile(ipcsDTO, 1);					
				}
            }
            
            /***** 단축번호 타입 일때, 부가서비스 허용 ********/
            if( "2".equals(numberType) ){//hc-add : req.chun
            	// 내선코드 허용
            	sql = "Insert into table_e164Block (e164, inoutflag, startprefix, endprefix, blockid, prefixtype, blockidtype, description ) ";
            	sql += "values ('" + e164  + "',0,'99','99~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','',1,2,'내선코드') ";
	            System.out.println("16-1:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[내선코드 허용  오류] '","[Extention Properties Error] '")+e164+l.x("'는 내선코드 등록이 실패하였습니다. 내선코드 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));}            
	            
            	// #, * 허용
	            sql = "Insert into table_e164Block (e164, inoutflag, startprefix, endprefix, blockid, prefixtype, blockidtype, description ) ";
//	            sql += "values ('" + e164  + "',0,'#','*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','',1,8,'특수코드') ";
	            sql += "values ('" + e164  + "',0,'#','*_______________________________','',1,8,'특수코드') ";
	            System.out.println("16-2:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[# 허용 오류] '","[# Properties Error] '")+e164+l.x("'는 특수코드 등록이 실패하였습니다. 특수코드 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));}            
            }
            System.out.println("결과값1 :"+returnVal);
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        System.out.println("결과값2 :"+returnVal);
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
            System.out.println("결과값3 :"+returnVal);
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
        
    }

    
    public boolean ipcsUserAfterInsert(IpcsUserDTO ipcsDTO) {
    	boolean 		returnVal = false;
    	DataStatement 	statement = null;
    	try {
	    	int 	count 				= 0;
	    	String 	numberType			= ipcsDTO.getNumberType().trim();		// NumberType(1:직통번호, 2:단축번호)
	    	// SIPEndPoint 테이블
	    	String 	domainId			= ipcsDTO.getDomainId().trim();			// 도메인 
//	    	String 	zoneCode			= ipcsDTO.getZoneCode().trim();			// Nat Zone Code
	    	int 	endPointClass		= ipcsDTO.getEndPointClass();			// 
	    	int 	dynamicFlag			= ipcsDTO.getDynamicFlag();				// 
	    	int 	multiEndpoint		= ipcsDTO.getMultiEndpoint();			// 해당 EndpointID 를 여러 단말이 사용 가능여부
	    	int 	dtmfType			= ipcsDTO.getDtmfType();				// SIP 단말의 DTMF 처리방식
	    	int 	options				= ipcsDTO.getOptions();					// 
	    	// E164 테이블
	    	String 	e164				= ipcsDTO.getE164().trim();				// E164
	    	String 	areaCode			= ipcsDTO.getAreaCode().trim();			// 지역번호
	    	int 	isGroup				= ipcsDTO.getIsGroup();					// 가입자 구분(개인/회사)
	    	String 	groupId				= ipcsDTO.getGroupId().trim();			// 소속그룹
	    	String	subId				= "Pick-Up";							// 하위그룹(Pick Up그룹)
	    	String 	extensionNum		= ipcsDTO.getExtensionNum().trim();		// 내선번호
	    	String 	callerService		= ipcsDTO.getCallerService().trim();	// 부가서비스 Caller 서비스
	    	String 	answerService		= ipcsDTO.getAnswerService().trim();	// 부가서비스 Caller 서비스
	    	String 	commonService		= ipcsDTO.getCommonService().trim();	// 부가서비스 Caller 서비스
	    	int 	chargeType			= ipcsDTO.getChargeType();				// 과금타입
	    	int 	endpointRelationType= ipcsDTO.getEndpointRelationType();	// 단말정보 등록여부
	    	int 	startFlag			= ipcsDTO.getStartFlag();				// 개통여부
	    	String 	mailBox				= ipcsDTO.getMailBox().trim();			// 메일박스ID
	    	// E164Route 테이블
	    	String 	routingNumber		= ipcsDTO.getRoutingNumber().trim();	// Route 할때 비교되는 번호
	    	String 	endpointID			= ipcsDTO.getEndpointID().trim();		// 연결된 단말기 ID
	    	int 	protocol			= ipcsDTO.getProtocol();				// 프로토콜 타입
	    	int 	routingNumberType	= ipcsDTO.getRoutingNumberType();		// Route 유형
	    	int 	priority			= ipcsDTO.getPriority();
	    	String 	e164Route2			= ipcsDTO.getE164Route2().trim();		// Route 할때 비교되는 번호
	    	
//	    	String 	pwd					= ipcsDTO.getPwd();						// 비밀번호
	    		    	
	    	endpointID = endpointID + "@" + domainId + ":5060";
	    	
	    	// table_provision 테이블
	    	String 	mac					= ipcsDTO.getMac();						// Mac
	    	String	macType				= "";
	    	if(!"".equals(mac)){
		    	String	strMac				= mac.substring(0,8);		    	
		    	if("00:11:a9".equals(strMac)){
		    		macType	= "MOIMSTONE";
		    	}else if("00:1a:0b".equals(strMac)){
		    		macType	= "JUNGWOO";
		   		}else if("00:1c:e0".equals(strMac)){
		   			macType	= "DASAN";
		    	}
	    	}
	    	
	    	String			sql 		= "";
	    	ResultSet 		rs 			= null;
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	/***** table_SIPENDPOINT 에 단말 ID 저장 ********/
//	    	sql = "INSERT INTO table_SIPENDPOINT(EndpointID, EndpointClass, DomainID, DynamicFlag, ZoneCode, MultiEndpoint, DtmfType, Options) VALUES( ";
//	    	sql +=	"'" + endpointID +"',"+ "33" +", '" + domainId + "',0, '" + zoneCode + "',  " + multiEndpoint + "," + dtmfType + ", " + options + ")";
	    	sql = "INSERT INTO table_SIPENDPOINT(EndpointID, EndpointClass, DomainID, DynamicFlag, MultiEndpoint, DtmfType, Options) VALUES( ";
	    	sql +=	"'" + endpointID +"',"+ "33" +", '" + domainId + "',0, " + multiEndpoint + "," + dtmfType + ", " + options + ")";
	    	int nResult = 0;
	        System.out.println("0:"+sql);
	        nResult = statement.executeUpdate(sql);
	        if (nResult < 1){
	        	throw new Exception(l.x("[단말ID 오류] '","[Phone ID Error] '") +endpointID+ l.x("' 단말 ID 등록이 실패하였습니다.","' Phone ID Insertion failed."));	
	        }
	    
	        /***** TABLE_E164 에 저장 ********/
	        if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
		        sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " callerService, answerService, commonService, SubID, MailBox) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            + extensionNum + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"','"
	            + mailBox +"')";
	        }else{
	        	// 단축번호인 경우 내선번호에 E164를 입력함.
		        sql = "INSERT INTO TABLE_E164 " +
	            "(E164, AREACODE, ISGROUP, GROUPID, EXTENSIONNUMBER, PREFIXTABLEID, STARTFLAG, CHARGETYPE, ENDPOINTRELATIONTYPE, " +
	            " callerService, answerService, commonService, SubID, MailBox) "
	            + "VALUES ('"
	            + e164 + "','"
	            + areaCode + "',"
	            + isGroup + ",'"
	            + groupId + "','"
	            + e164 + "','"
	            //+ e164Bean.getPrefixtableid() + "',"
	            + "',"
	            //+ e164Bean.getStartflag() + ","
	            + startFlag + ","
	            + chargeType + ","
	            + endpointRelationType + ",'"
	            + callerService + "','"
	            + answerService + "','"
	            + commonService + "','"
	            + subId +"','"
	            + mailBox +"')";	        	
	        }
			System.out.println(sql);
			nResult = statement.executeUpdate(sql);
			if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
			
            /***** table_E164Route 에서 해당 전화번호가 다른 단말에 등록된 전화번호인지 확인 ********/
	        sql = "SELECT COUNT(*) FROM table_E164Route WHERE E164 = '"+ e164 +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()) count = rs.getInt(1);
            System.out.println("table_E164Route 검색번호 : "+e164);
            System.out.println("table_E164Route 검색결과 : "+count);
            rs.close();
	        
            System.out.println("NumberType(1:직통번호, 2:단축번호) : "+numberType);
            if(numberType.equals("1")){			// NumberType(1:직통번호, 2:단축번호)
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
	
	            /***** 지역번호없는E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164Route2 + "','" + e164  + "', 2,'" + endpointID + "',2, 1) ";
	            System.out.println("2:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}
            
                /***** 그룹번호포함 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + "99" + extensionNum + "','" + e164  + "', 2,'" + endpointID + "',5, 1) ";
                System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}	            
            }else{
	            /***** 지역번호포함E164 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol , EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + e164  + "','" + e164  + "', 2,'" + endpointID + "',1, 1) ";
	            System.out.println("1:"+sql);
	            System.out.println(sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[전화번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}

            	/***** 그룹번호포함 단축 내선번호 등록********/
	            sql = "INSERT INTO table_E164Route ";
	            sql += "(RoutingNumber, E164, protocol, EndpointID, RoutingNumberType, Priority) ";
	            sql +=	"  VALUES ('" + "99" + e164 + "','" + e164  + "', 2,'" + endpointID + "',5, 1) ";
                System.out.println("4:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[내선 그룹번호 오류] 단말에 ","[Extension Group Number Error] In the Phone, the Number")+endpointID+ l.x(" 전화번호 할당이 실패하였습니다."," join failed."));	}            	
            }
	        
            
            /***** 인증테이블 등록********/
            sql = "SELECT COUNT(*) FROM table_Auth WHERE  Protocol = 2 AND EndpointID = '" + endpointID +"'";
            rs = statement.executeQuery(sql);
            if(rs.next()==true)	count = rs.getInt(1);
            rs.close();
            if (count > 0){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}

//            sql   = "INSERT INTO table_Auth(E164, protocol , EndpointID, password, Authmode, username, IPPort) ";
//            sql += " VALUES ('0',2,'" + endpointID  + "', '" + pwd + "', '0', '" + e164  + "', '0')";
            sql   = "INSERT INTO table_Auth(E164, protocol , EndpointID, Authmode, username, IPPort) ";
            sql += " VALUES ('0',2,'" + endpointID  + "', 0, ' ', 0)";            
            System.out.println("5:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 단말 인증정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            /***** VMS테이블(nasa_vms_user) 등록********/
            // 20101208 VMS 등록 안하게 수정
//            sql = "Insert into nasa_vms_user(vms_id, vms_name, vms_pswd, vms_ext, vms_lang, vms_msave ";
//            sql = sql + " , vms_rectime, vms_silence_time, vms_msgretention, vms_userauth) values( ";
//            sql = sql + " '" + e164  + "', '" + e164  + "', '0000', '" + e164  + "', 'kor', 'R', 300, 5, 10, 'P002') ";            		
//            System.out.println("6:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 1){	throw new Exception(l.x("[VMS 등록 오류] '","[Auth Properties Error] '")+e164+l.x("'는 VMS등록이 실패하였습니다. VMS등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            

            /***** table_provision 테이블(Ei64, Mac) 등록********/
            if(!"".equals(mac)){
	            sql = "Update table_provision set e164 = '" + e164  + "', use = 1 Where physical_address = '" + mac + "' ";
	            System.out.println("7:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[Provision 등록 오류] '","[Provision Properties Error] '")+e164+l.x("'는 MAC등록이 실패하였습니다. MAC등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));}            
            
				SystemConfigFileMake makeFile = new SystemConfigFileMake();
				int insertResult = makeFile.macMakeFile(ipcsDTO, 2);	                        
            }

            /***** table_provision 테이블(Ei64, Mac) 등록********/
            if(!"".equals(mac)){
	            sql = "Update table_provision set e164 = '" + e164  + "', use = 1 Where physical_address = '" + mac + "' ";
	            System.out.println("15:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[Provision 등록 오류] '","[Provision Properties Error] '")+e164+l.x("'는 MAC등록이 실패하였습니다. MAC등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));}            

				SystemConfigFileMake makeFile = new SystemConfigFileMake();
				
				if("MOIMSTONE".equals(macType)){
					int insertResult = makeFile.macMakeFile(ipcsDTO, 1);
				}else if("JUNGWOO".equals(macType)){
					int insertResult = makeFile.macJungWooFile(ipcsDTO, 1);
				}else if("DASAN".equals(macType)){
					int insertResult = makeFile.macDasanFile(ipcsDTO, 1);					
				}
            }

            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
        
    }
    
    private void updatePresence(DataStatement statement, String e164, String endpointID) {
        /***** Presence 테이블 업데이트 *******/
        ResultSet rs = null;
        String selectSql = "";
        String updateSql = "";
        int count = 0;
        try {
            selectSql += "SELECT count(*) FROM table_presence WHERE userE164='" + e164 + "'";
            rs = statement.executeQuery(selectSql);
            if (rs.next())
                count = rs.getInt(1);
            rs.close();
            // 단말에 등록하려는 e164가 table_presence에 존재하면 endpointID 업데이트.
            if (count > 0) {
                int registerTime = 0;
                selectSql =
                        "SELECT registeredTime FROM table_sipcontact WHERE endpointid='" + endpointID + "'";
                System.out.println(selectSql);
                rs = statement.executeQuery(selectSql);
                if (rs.next())
                    registerTime = rs.getInt(1);
                rs.close();
                updateSql += " UPDATE table_presence ";
                updateSql += " SET endpointID='" + endpointID + "', protocol=2, presenceStatus=0, registerTime=" + registerTime;
                updateSql += " WHERE userE164='" + e164 + "'";
                System.out.println(updateSql);
                int nResult = statement.executeUpdate(updateSql);
                if (nResult < 0)
                    throw new Exception(l.x("Presence테이블 업데이트가 실패하였습니다.", "Presence Table update failure"));
            }
        } catch (Exception e) {
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
    }
    
    public boolean ipcsDelete(String hiEndPointID, String hiEi64) {
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	Vector 			vecTmpKeyNum 	= new Vector();
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		endpointID	= hiEndPointID;		// E164
	    	String 		e164		= hiEi64;			// 연결된 단말기 ID	    	
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	System.out.println("받은 endpointID :"+endpointID);
	    	System.out.println("받은 e164 :"+e164);
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** TABLE_SIPEndPoint 삭제 ********/
	    	sql = "SELECT COUNT(*) FROM table_SIPEndPoint WHERE ENDPOINTID = '"+endpointID+"'";
	    	System.out.println("00:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count == 0){throw new Exception(l.x("[단말정보 오류] '","[Phone Properties Error] '") +endpointID + l.x("'는 존재하지 않는  단말 ID 입니다.","' does not exist."));	}

            sql = "Delete from table_SIPENDPOINT WHERE EndpointID = '"+endpointID+"'" ;            
            System.out.println("0:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_SipContact 삭제 ********/
            sql = "Delete FROM  Table_SipContact WHERE EndpointID = '" + endpointID +"'";
            System.out.println("1:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** TABLE_AUTH 삭제 ********/
            sql = "SELECT COUNT(*) FROM table_Auth WHERE  Protocol = 2 AND ENDPOINTID = '"+endpointID+"'";
            System.out.println("01:"+sql);
            rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if (count == 0){	throw new Exception(l.x("[인증정보 오류] '","[Auth Properties Error] '") +endpointID+ l.x("'는 인증정보가 없습니다. 삭제가 실패하였습니다."," doesn't have Authentication Properties. Deletion  failed."));	}

            sql = "Delete from table_Auth WHERE Protocol = 2 AND EndpointID = '" + endpointID +"'";
            System.out.println("2:"+sql);
            statement.executeUpdate(sql);
            
            /***** 단말에 등록된 전화번호도 함께 삭제하는 경우 ********/
            sql = "DELETE FROM Table_E164 WHERE e164='" + e164 + "'";
            System.out.println("3:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM TABLE_E164Route WHERE e164 = '" + e164 + "'";;
            System.out.println("4:"+sql);
            statement.executeUpdate(sql);
            
            sql = "DELETE FROM Table_e164alias WHERE E164='" + e164 + "'" ;
            System.out.println("5:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM Table_E164Changed  WHERE e164='" + e164 + "'";
            System.out.println("6:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM Table_E164Block WHERE E164='"+e164+"'" ;
            System.out.println("7:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM Table_HuntingGroup WHERE E164='" + e164 + "'";
            System.out.println("8:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM Table_Forward WHERE E164='" + e164 + "'";
            System.out.println("9:"+sql);
            statement.executeUpdate(sql);

            sql = "DELETE FROM TABLE_FEATURESERVICE WHERE E164='" + e164 + "'";
            System.out.println("10:"+sql);
            statement.executeUpdate(sql);
            

            /***** Table_Subscriber 삭제 ********/
            sql = "DELETE FROM Table_Subscriber WHERE id='"+endpointID+"'" ;
            System.out.println("11:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_Presence / Table_PresenceReport 삭제 ********/
            sql = "SELECT OfferID FROM Table_PresenceReport WHERE UserE164 = '"+e164+"'";
            rs = statement.executeQuery(sql);
            while(rs.next()){
                vecTmpUserE164.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
            }
            rs.close();
            
            sql = "DELETE FROM Table_Presence WHERE UserE164='" + e164 + "'";
            System.out.println("12:"+sql);
            statement.executeUpdate(sql);
            
            int 	nTmp 		= vecTmpUserE164.size();
            String	strOfferID 	= ""; 
            for(int i=0; i < nTmp; i++){
            	strOfferID = (String)vecTmpUserE164.get(i);
                sql = "DELETE FROM Table_PresenceReport WHERE UserE164='" + e164 + "' And OfferID='" + strOfferID + "' ";
                System.out.println("13-"+i+"번째:"+sql);
                statement.executeUpdate(sql);
                
                if(!strOfferID.equals("")){
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)0,strOfferID," ","");
	                int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,strOfferID," ",  "(SSW).active" );
	                System.out.println("result "+i+"번째 ==>:"+nPacketResult+"  str Sip endpoint ID test ==>:" + strOfferID );
                }
            }            
            sql = "DELETE FROM Table_PresenceReport WHERE OfferID='" + e164 + "' ";
            System.out.println("14:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_keynumber 삭제 ********/
	    	sql = "SELECT count(*) FROM table_keynumber WHERE e164 = '" + e164 + "' ";
	    	System.out.println("15:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count > 0){
	            sql = "SELECT keynumberid FROM table_keynumber WHERE e164 = '" + e164 + "' ";
		    	System.out.println("15:"+sql);
		    	rs = statement.executeQuery(sql);
	            rs.next();
	            String tempKeyNum = rs.getString(1);
	            rs.close();
	          
	            sql = "DELETE FROM table_keynumber WHERE e164 = '" + e164 + "' ";
	            System.out.println("16:"+sql);
	            statement.executeUpdate(sql);
	
	            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + tempKeyNum + "' Order by indexno";
	            rs = statement.executeQuery(sql);
	            while(rs.next()){
	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
	            }
	            rs.close();
	            
	            int 	nTmp2 		= vecTmpKeyNum.size();
	            int 	nTmp3 		= 0;
	            String	strE164 	= ""; 
	            for(int i=0; i < nTmp2; i++){
	            	strE164 = (String)vecTmpKeyNum.get(i);
	            	nTmp3 = nTmp3 + 1;
	            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' ";
	                System.out.println("17-"+i+"번째:"+sql);
	                statement.executeUpdate(sql);                
	            }
	            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + tempKeyNum + "' ";
	            System.out.println("18번째:"+sql);
	            statement.executeUpdate(sql);            
            }
            
            /***** nasa_vms_user 삭제 ********/
            sql = "DELETE FROM nasa_vms_user WHERE vms_id='" + e164 + "'";
            System.out.println("19:"+sql);
            statement.executeUpdate(sql);

            /***** table_addrbook 삭제 ********/
            sql = "DELETE FROM table_addrbook WHERE ownerid='" + e164 + "'";
            System.out.println("20:"+sql);
            statement.executeUpdate(sql);

            /***** table_addrbookgroup 삭제 ********/
            sql = "DELETE FROM table_addrbookgroup WHERE ownerid='" + e164 + "'";
            System.out.println("21:"+sql);
            statement.executeUpdate(sql);

            /***** table_provision 삭제 ********/
	    	sql = "SELECT count(*) FROM table_provision WHERE e164 = '" + e164 + "' ";
	    	System.out.println("15:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count > 0){
	            sql = "SELECT physical_address FROM table_provision WHERE e164 = '" + e164 + "' ";
		    	System.out.println("15:"+sql);
		    	rs = statement.executeQuery(sql);
	            rs.next();
	            String tmpMac = rs.getString(1);
	            rs.close();
	            
	            String	strMac = "";
	            strMac = tmpMac.substring(0,2)+tmpMac.substring(3,5)+tmpMac.substring(6,8)+tmpMac.substring(9,11)+tmpMac.substring(12,14)+tmpMac.substring(15,17);
	        	
	        	//private SystemConfigSet systemConfig 	= new SystemConfigSet();
	        	//private LinuxShell 		linuxShell 		= new LinuxShell();	            
	        	SystemConfigSet systemConfig 	= new SystemConfigSet();
	        	LinuxShell 		linuxShell 		= new LinuxShell();	            
	            String osType3 = systemConfig.osChk();
	        	if("uix".equals(osType3)){
	        		linuxShell.runShell("rm /tftpboot/"+strMac+".cfg");
	        		
	                sql = "DELETE FROM table_provision WHERE e164='" + e164 + "'";
	                System.out.println("22:"+sql);
	                statement.executeUpdate(sql);
	                
	        	}else{
	        		System.out.println("Mac 삭제 성공 ----");

	        		sql = "DELETE FROM table_provision WHERE e164='" + e164 + "'";
	                System.out.println("22:"+sql);
	                statement.executeUpdate(sql);	        		
	        	}
            }
            
            /***** table_alarmservice 삭제 ********/
            sql = "DELETE FROM table_alarmservice WHERE e164='" + e164 + "'";
            System.out.println("23:"+sql);
            statement.executeUpdate(sql);

            /***** table_addmrbt 삭제 ********/
            sql = "DELETE FROM table_addmrbt WHERE e164='" + e164 + "'" ;
            System.out.println("24:"+sql);
            statement.executeUpdate(sql);

            /***** table_callermrbt 삭제 ********/
            sql = "DELETE FROM table_callermrbt WHERE e164='" + e164 + "'" ;
            System.out.println("25:"+sql);
            statement.executeUpdate(sql);
        
            /***** table_smssend 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smssend WHERE sendnumber='" + e164 + "'";
            System.out.println("26:"+sql);
            statement.executeUpdate(sql);

            /***** table_smsvirtual 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smsvirtual WHERE e164='" + e164 + "'";
            System.out.println("27:"+sql);
            statement.executeUpdate(sql);

            /***** table_smsreceive 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smsreceive WHERE receivenumber='" + e164 + "'";
            System.out.println("28:"+sql);
            statement.executeUpdate(sql);
            
            
            // 신규 장비인지 체크 후 GateWay 관련 테이블 삭제 (2012.04.20) ++++++++++++++
/*
            String gwChk = getGatewayCheck();
            
            if(!gwChk.equals("")){
            	String tmpDeviceid 	= "";
            	String tmpChannelid = "";
            	
            	sql  = " Select deviceid, channelid From Table_ChannelNumber Where startprefix = '" + e164 + "' " ;    		
                rs = statement.executeQuery(sql);
                System.out.println("29:"+sql);
                
                if (rs.next()){
                	tmpDeviceid 	= Str.CheckNullString(rs.getString("deviceid")); 
                	tmpChannelid 	= Str.CheckNullString(rs.getString("channelid"));
                }
                rs.close();
                
                if(!tmpDeviceid.equals("") && !tmpChannelid.equals("")){
                    sql = "DELETE FROM Table_DeviceChannel Where deviceid = '" + tmpDeviceid + "' And channelid = "+ Integer.parseInt(tmpChannelid) +" " ;
                    System.out.println("30:"+sql);
                    statement.executeUpdate(sql);
                }
                if(!tmpDeviceid.equals("") && !tmpChannelid.equals("")){
                    sql = "DELETE FROM Table_ChannelNumber Where startprefix = '" + e164 + "' " ;
                    System.out.println("30:"+sql);
                    statement.executeUpdate(sql);
                }
            }
*/
            // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        

            /***** SSW 에 endpointID 값 전송 20100706 추가 ********/
            //int nPacketResult = ConnectionManager.unregisterEndpoint(endpointID,(short)2);
            int nPacketResult = ConnectionManager.unregisterEndpoint(endpointID,(short)2, (short)1, "" ,  "(SSW).active" ) ;

    	} catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
        
    }

    public boolean userDelete(String hiEndPointID, String hiEi64) {
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	Vector 			vecTmpKeyNum 	= new Vector();
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		endpointID	= hiEndPointID;		// E164
	    	String 		e164		= hiEi64;			// 연결된 단말기 ID	    	
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	System.out.println("받은 endpointID :"+endpointID);
	    	System.out.println("받은 e164 :"+e164);
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** Table_E164 에서 Subid(Pick Up 값 초기화 'Pick-Up') ********/
            sql = "Update Table_E164 Set Subid = 'Pick-Up' WHERE E164='" + e164 + "'";
            System.out.println("1:"+sql);
            statement.executeUpdate(sql);

            
            /***** Table_Subscriber 삭제 ********/
            sql = "DELETE FROM Table_Subscriber WHERE id='"+endpointID+"'" ;
            System.out.println("2:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_Presence / Table_PresenceReport 삭제 ********/
            sql = "SELECT OfferID FROM Table_PresenceReport WHERE UserE164 = '"+e164+"'";
            rs = statement.executeQuery(sql);
            while(rs.next()){
                vecTmpUserE164.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
            }
            rs.close();
            
            sql = "DELETE FROM Table_Presence WHERE UserE164='" + e164 + "'";
            System.out.println("3:"+sql);
            statement.executeUpdate(sql);
            
            int 	nTmp 		= vecTmpUserE164.size();
            String	strOfferID 	= ""; 
            for(int i=0; i < nTmp; i++){
            	strOfferID = (String)vecTmpUserE164.get(i);
                sql = "DELETE FROM Table_PresenceReport WHERE UserE164='" + e164 + "' And OfferID='" + strOfferID + "' ";
                System.out.println("4-"+i+"번째:"+sql);
                statement.executeUpdate(sql);
                
                if(!strOfferID.equals("")){
	                //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,strOfferID," ",  "(SSW).active" );
	                int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,strOfferID," ",  "(SSW).active" );
	                
	                System.out.println("result "+i+"번째 ==>:"+nPacketResult+"  str Sip endpoint ID test ==>:" + strOfferID );
                }
            }            
            sql = "DELETE FROM Table_PresenceReport WHERE OfferID='" + e164 + "' ";
            System.out.println("5:"+sql);
            statement.executeUpdate(sql);
            
            
            /***** Table_keynumber 삭제 ********/
	    	sql = "SELECT count(*) FROM table_keynumber WHERE e164 = '" + e164 + "' ";
	    	System.out.println("6:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count > 0){
	            sql = "SELECT keynumberid FROM table_keynumber WHERE e164 = '" + e164 + "' ";
		    	System.out.println("7:"+sql);
		    	rs = statement.executeQuery(sql);
	            rs.next();
	            String tempKeyNum = rs.getString(1);
	            rs.close();
	          
	            sql = "DELETE FROM table_keynumber WHERE e164 = '" + e164 + "' ";
	            System.out.println("8:"+sql);
	            statement.executeUpdate(sql);
	
	            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + tempKeyNum + "' Order by indexno";
	            rs = statement.executeQuery(sql);
	            while(rs.next()){
	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
	            }
	            rs.close();
	            
	            int 	nTmp2 		= vecTmpKeyNum.size();
	            int 	nTmp3 		= 0;
	            String	strE164 	= ""; 
	            for(int i=0; i < nTmp2; i++){
	            	strE164 = (String)vecTmpKeyNum.get(i);
	            	nTmp3 = nTmp3 + 1;
	            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' ";
	                System.out.println("9-"+i+"번째:"+sql);
	                statement.executeUpdate(sql);                
	            }
	            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + tempKeyNum + "' ";
	            System.out.println("10번째:"+sql);
	            statement.executeUpdate(sql);            
            }            
            
            /***** table_addrbook 삭제 ********/
            sql = "DELETE FROM table_addrbook WHERE ownerid='" + e164 + "'";
            System.out.println("11:"+sql);
            statement.executeUpdate(sql);

            /***** table_addrbookgroup 삭제 ********/
            sql = "DELETE FROM table_addrbookgroup WHERE ownerid='" + e164 + "'";
            System.out.println("12:"+sql);
            statement.executeUpdate(sql);

            /***** table_alarmservice 삭제 ********/
            sql = "DELETE FROM table_alarmservice WHERE e164='" + e164 + "'";
            System.out.println("13:"+sql);
            statement.executeUpdate(sql);
            
            /***** table_smssend 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smssend WHERE sendnumber='" + e164 + "'";
            System.out.println("14:"+sql);
            statement.executeUpdate(sql);

            /***** table_smsvirtual 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smsvirtual WHERE e164='" + e164 + "'";
            System.out.println("15:"+sql);
            statement.executeUpdate(sql);

            /***** table_smsreceive 삭제(SMS 관련) ********/
            sql = "DELETE FROM table_smsreceive WHERE receivenumber='" + e164 + "'";
            System.out.println("16:"+sql);
            statement.executeUpdate(sql);

            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public boolean ipcsEdit(String hiEndPointID, String hiEi64, String hiName, String hiPosition, String hiDept, String hiMobile, String hiHomeNumber, String hiMail, String hiPwd, String hiZoneCode, String hiAuthIP, String hiAuthPort, String hiAuthID, String hiAuthPass, int hiAuthMode, String hiExtension, String hiOldExtension, String goodsName_Type){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpKeyNum 	= new Vector();
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		endpointID	= hiEndPointID;		// E164
	    	String 		e164		= hiEi64;			// 연결된 단말기 ID	    	
	    	String 		name		= hiName;			// 사용자명
	    	String 		position	= hiPosition;		// 직위
	    	String 		dept		= hiDept;			// 부서/상위부서ID
	    	String 		mobile		= hiMobile;			// 핸드폰
	    	String 		homeNumber	= hiHomeNumber;		// 집전화
	    	String 		mail		= hiMail;			// 메일
			String[]	tempStr 	= dept.split("[|]");
			String 		deptId		= tempStr[0];		
			String		parentID	= tempStr[1];
			String		pickUpID	= "";
			String		extensionNum= hiExtension;
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	String		pwd			= hiPwd;
	    	String		zoneCode	= hiZoneCode;
	    	int			authMode	= hiAuthMode;
	    	String		authIP		= hiAuthIP;
	    	int			authPort	= Integer.parseInt(hiAuthPort);
	    	String		authID		= hiAuthID;
	    	String		authPass	= hiAuthPass;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** SIP테이블 (table_sipendpoint) ZoneCode 수정 ********/
	    	if(!"".equals(zoneCode)){
		    	sql   = "Update table_sipendpoint set zonecode = '" + zoneCode + "' Where endpointid = '" + endpointID + "' ";
	            System.out.println("0:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[SIP테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 SIP테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            
            }else{
		    	sql   = "Update table_sipendpoint set zonecode = '' Where endpointid = '" + endpointID + "' ";
	            System.out.println("0:"+sql);
	            nResult = statement.executeUpdate(sql);
	            if (nResult < 1){	throw new Exception(l.x("[SIP테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 SIP테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            	
            }
            
	    	/***** TABLE_SUBSCRIBER 추가/수정 ********/
	    	sql = "SELECT COUNT(*) FROM TABLE_SUBSCRIBER WHERE ID = '"+endpointID+"'";
	    	System.out.println("00:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count == 0){
            	// 추가 저장
                /***** 사용자테이블(table_subscriber) 등록********/
                sql = "INSERT INTO table_subscriber(id, loginlevel , pwd, phonenum, name, position, department, mobile, homenumber, extension, mailaddress) ";
                sql = sql + " VALUES ('" + endpointID  + "', 1, '" + pwd  + "', '" + e164  + "', '" + name  + "', '" + position  + "', " + deptId  + ", ";
                sql = sql + " '" + mobile  + "', '" + homeNumber  + "', '" + extensionNum  + "', '" + mail  + "')";
                System.out.println("1:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[사용자 등록 오류] '","[Auth Properties Error] '")+endpointID+l.x("'는 사용자 정보등록이 실패하였습니다. 사용자 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}            

            	/***** 프레즌스(Presence) 테이블 업데이트 *******/
                sql = "SELECT COUNT(*) FROM table_Presence WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                //등록시각을 불러온다
                int registerTime = 0;
                sql = "SELECT registeredTime FROM table_sipcontact WHERE endpointid='" + endpointID + "'";
                rs = statement.executeQuery(sql);
                if (rs.next()) registerTime = rs.getInt(1);
                rs.close();
                
                sql   = "INSERT INTO table_presence(UserE164, EndpointID, Protocol, UserType, Options, RegisterTime, PresenceStatus) ";            
                sql += " VALUES ('" + e164  + "', '" + endpointID  + "', 2, 101, 0, " + registerTime + ",0)";
                System.out.println("1-2:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[Presence정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 Presence 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
                sql = "SELECT COUNT(*) FROM table_PresenceReport WHERE Usere164 = '" + e164 +"'";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){	throw new Exception(l.x("[PresenceReport정보 오류] '","[Auth Properties Error] '")+e164+l.x("'는 PresenceReport 정보가 있습니다. 등록이 실패하였습니다.","' have Auth Properties. Insertion failed."));	}
                
                sql   = "INSERT INTO table_PresenceReport(UserE164, OfferID, Protocol, OfferType, ReportType) ";
                sql += " VALUES ('" + e164  + "', '', 0, 0, 101)";
                System.out.println("1-3:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){            
    	            sql   = "Insert into table_presenceReport(usere164, offerid, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 From table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' ";
    	            System.out.println("1-4:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            System.out.println("1-4-1:"+nResult);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                }
                
                sql = "SELECT COUNT(*) FROM table_presenceReport Where usere164 <> '" + e164 +"' and offerid <> '' ";
                rs = statement.executeQuery(sql);
                if(rs.next()==true)	count = rs.getInt(1);
                rs.close();
                if (count > 0){                        
    	            sql   = "Insert into table_presenceReport(offerid, usere164, reporttype, offertype, protocol) ";
    	            sql += " Select DISTINCT(usere164), '" + e164 +"', 101, 0, 0 from table_presenceReport ";
    	            sql += " Where usere164 <> '" + e164 +"' and offerid <> '' ";           
    	            System.out.println("1-5:"+sql);
    	            nResult = statement.executeUpdate(sql);
    	            if (nResult < 1){	throw new Exception(l.x("[PresenceReport정보 오류] '","[PresenceReport Error] '")+e164+l.x("'는 PresenceReport 정보등록이 실패하였습니다. 단말 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	            
                }
                
                /***** 부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록********/
                sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String tempKeynumber = "";
                if(rs.next()==true){
                	tempKeynumber = rs.getString("keynumber");
                }
                rs.close();
                if (!"".equals(tempKeynumber) && tempKeynumber != null){	
                    int nextIndex = 0;
                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
                    rs.close();
                	
                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
                    sql += " VALUES ('"+tempKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
                    System.out.println("1-6:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
                
                    int maxHuntIndex = 0;
                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + tempKeynumber + "'";
                    rs = statement.executeQuery(sql);
                    if (rs.next()) maxHuntIndex = rs.getInt(1);
                    rs.close();
                
                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + tempKeynumber + "'";
                    System.out.println("1-7:"+sql);
                    nResult = statement.executeUpdate(sql);
                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                }                                
            }else{
            	// 수정 (부서대표번호(table_dept) 등록여부 확인 후 table_keynumber 등록)

            	/***** 기존 부서대표번호 조회********/
            	sql = "SELECT keynumber, deptid FROM table_dept WHERE  deptid = (Select department From Table_Subscriber Where id = '" + endpointID + "')";
                rs = statement.executeQuery(sql);
                String 	oldKeynumber = "";
                int		oldID		= 0;
                if(rs.next()==true){
                	//oldKeynumber 	= rs.getString("keynumber");
                	oldKeynumber 	= Str.CheckNullString(rs.getString("keynumber"));
                	oldID			= rs.getInt("deptid");
                }
                rs.close();
                
            	/***** 새롭게 변경된 부서대표번호 조회********/
            	sql = "SELECT keynumber FROM table_dept WHERE  deptid = " + deptId + "";
                rs = statement.executeQuery(sql);
                String newKeynumber = "";
                if(rs.next()==true){
                	//newKeynumber = rs.getString("keynumber");
                	newKeynumber = Str.CheckNullString(rs.getString("keynumber"));
                }
                rs.close();
                
                // 기존의 부서 대표번호와 새로운 부서 대표번호가 같은지 비교
                if((oldKeynumber.equals(newKeynumber)) && (oldID == Integer.parseInt(deptId))){
	                // 부서 변경을 안한 경우
                	sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " , extension = '" + extensionNum + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }else{
                	// 부서가 변경된 경우
	                if (!"".equals(newKeynumber) && newKeynumber != null){	
	                    // 새로운 부서에 부서 대표번호가 있는 경우
	                    sql = "SELECT COUNT(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "' And e164 = '" + e164 + "' ";
	                    rs = statement.executeQuery(sql);
	                    if(rs.next()==true)	count = rs.getInt(1);
	                    rs.close();
	                    if (count == 0){
		                	int nextIndex = 0;
		                    sql = "SELECT coalesce(max(indexno),0) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
		                    rs = statement.executeQuery(sql);
		                    if (rs.next()) nextIndex = 1 + rs.getInt(1);
		                    rs.close();
		                	
		                    sql   = "INSERT INTO table_keynumber(keynumberid, e164, indexno, callrate, fromtime, totime) ";
		                    sql += " VALUES ('"+newKeynumber+"', '" + e164  + "', " + nextIndex  + ", 0, '0000', '2400')";            
		                    System.out.println("1-6:"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
		                
		                    int maxHuntIndex = 0;
		                    sql = "SELECT count(*) FROM table_keynumber WHERE keynumberid = '" + newKeynumber + "'";
		                    rs = statement.executeQuery(sql);
		                    if (rs.next()) maxHuntIndex = rs.getInt(1);
		                    rs.close();
		                
		                    sql   = "Update table_keynumberid set maxhuntindex = " + maxHuntIndex + " Where keynumberid = '" + newKeynumber + "'";
		                    System.out.println("1-7:"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 1){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	                    }
	                }

	                if (!"".equals(oldKeynumber) && oldKeynumber != null){	
	                    // 기존 부서에 부서 대표번호가 있는 경우
	                    sql = "SELECT COUNT(*) FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "' And e164 = '" + e164 + "' ";
	                    System.out.println("1-5:"+sql);
	                    rs = statement.executeQuery(sql);
	                    if(rs.next()==true)	count = rs.getInt(1);
	                    rs.close();
	                    if (count > 0){
		                	sql   = "DELETE FROM table_keynumber WHERE e164 = '" + e164  + "' And keynumberid = '" + oldKeynumber + "' ";            
		                    System.out.println("1-6:"+sql);
		                    nResult = statement.executeUpdate(sql);
		                    if (nResult < 0){	throw new Exception(l.x("[부서대표번호 오류] '","[Auth Properties Error] '")+e164+l.x("'는 부서대표번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	
		                    //////////////////////
		    	            sql = "SELECT e164 FROM table_keynumber WHERE keynumberid = '" + oldKeynumber + "' Order by indexno";
		    	            rs = statement.executeQuery(sql);
		    	            while(rs.next()){
		    	            	vecTmpKeyNum.add(WebUtil.CheckNullString(rs.getString(1))) ;            	
		    	            }
		    	            rs.close();
		    	            
		    	            int 	nTmp2 		= vecTmpKeyNum.size();
		    	            int 	nTmp3 		= 0;
		    	            String	strE164 	= ""; 
		    	            for(int i=0; i < nTmp2; i++){
		    	            	strE164 = (String)vecTmpKeyNum.get(i);
		    	            	nTmp3 = nTmp3 + 1;
		    	            	sql = "Update table_keynumber Set indexno = " + nTmp3 + " WHERE e164 = '" + strE164 + "' And keynumberid = '" + oldKeynumber + "' ";
		    	                System.out.println("9-"+i+"번째:"+sql);
		    	                statement.executeUpdate(sql);                
		    	            }
		    	            sql = "Update table_keynumberid Set maxhuntindex = " + nTmp2 + " WHERE keynumberid = '" + oldKeynumber + "' ";
		    	            System.out.println("10번째:"+sql);
		    	            statement.executeUpdate(sql);
	                    }
	                }
	                
	                sql = "Update TABLE_SUBSCRIBER Set ";
	                sql = sql + "  name = '" + name + "' ";
	                sql = sql + " , position = '" + position + "' ";
	                sql = sql + " , department = " + deptId + " ";
	                sql = sql + " , mobile = '" + mobile + "' ";
	                sql = sql + " , homenumber = '" + homeNumber + "' ";
	                sql = sql + " , mailaddress = '" + mail + "' ";
	                sql = sql + " , extension = '" + extensionNum + "' ";
	                sql = sql + " WHERE ID = '"+endpointID+"'" ;            
	                System.out.println("2-1:"+sql);
	                statement.executeUpdate(sql);	                
                }
            }

            
            // MD5 Hash (IMS용) 관련 추가 (2012.11.09) ==============
            IpcsList 	ipcsList 		= new IpcsList();
            String		beforeAuthPass	= "";
            // ==================================================
            
            /***** 인증테이블 (table_auth / Table_SipContact) 인증값 수정 ********/
            if("".equals(authPass)){
            	/***** IMS 관련 추가 20121101 ********/
            	if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
                	beforeAuthPass 	= authPass;
                	authPass 		= ipcsList.makeMD5(authPass);
                	// MD5 Hash 관련 수정 (2012.11.09)
            		sql   = "Update table_auth set authmode = " + authMode + ", password = '" + authPass + "', descriptor = '" + beforeAuthPass + "', ";
            	}else{
            		sql   = "Update table_auth set authmode = " + authMode + ", username = ' ', password = '" + authPass + "', descriptor = '', ";
            	}
            	
                sql += " ipaddress = '" + authIP + "', ipport = " + authPort + "  Where endpointid = '" + endpointID + "' ";
                System.out.println("3-1:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[인증테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}                
                
                sql   = "Update Table_SipContact set username = ' ' Where endpointid = '" + endpointID + "' ";
                System.out.println("3-2:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[인증테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }else{
            	/***** IMS 관련 추가 20121101 ********/
            	if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
            		beforeAuthPass 	= authPass;
                	authPass 		= ipcsList.makeMD5(authPass);
                	// MD5 Hash 관련 수정 (2012.11.09)
            		sql   = "Update table_auth set authmode = " + authMode + ", password = '" + authPass + "', descriptor = '" + beforeAuthPass + "', ";
            	}else{
            		sql   = "Update table_auth set authmode = " + authMode + ", username = '" + authID + "', password = '" + authPass + "', descriptor = '', ";
            	}
            	
                sql += " ipaddress = '" + authIP + "', ipport = " + authPort + "  Where endpointid = '" + endpointID + "' ";
                System.out.println("3-1:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[인증테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
                sql   = "Update Table_SipContact set username = '" + authID + "' Where endpointid = '" + endpointID + "' ";
                System.out.println("3-2:"+sql);
                nResult = statement.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[인증테이블 오류] '","[Auth Properties Error] '")+e164+l.x("'는 인증테이블 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            }
            
            
            /***** TABLE_E164 에서 extensionnumber수정 ********/
            sql = "Update TABLE_E164 Set extensionnumber = '" + extensionNum + "' ";
            sql = sql + " WHERE e164 = '"+e164+"'" ;            
            System.out.println("4:"+sql);
            statement.executeUpdate(sql);            	


            /***** table_e164route 에서 routingnumber 수정 ********/
            String strExtension = "99"+extensionNum;
            sql = "Update table_e164route Set routingnumber = '" + strExtension + "' ";
            sql = sql + " WHERE routingnumber = '99"+hiOldExtension+"'" ;            
            System.out.println("5:"+sql);
            statement.executeUpdate(sql);            	

            
            System.out.println("############ 수정 : 6666666");
            statement.endTransaction(true);			// commit 처리
            System.out.println("############ 수정 : 77777777");
	        returnVal = true;
	        System.out.println("############ 수정 : 88888888");
	        
            /***** SSW 처리(090615) ********/
            //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,endpointID, statement.getString());
            //int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)0,endpointID, "");
            int nPacketResult = ConnectionManager.updateEndpoint((short)33,(short)2,endpointID," ",  "(SSW).active" );
            
            //System.out.println("SSW 처리(090615)결과 : "+nPacketResult);
            
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
 
	public int getMaxID(DataStatement stmt, String e164) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(priority),0) " ;
		sql = sql +  "\n   FROM table_featureservice ";
		sql = sql +  "\n  WHERE e164      = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }

    public boolean macFileDelete() {
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** table_provision 삭제 ********/
	    	sql = "SELECT count(*) FROM table_provision WHERE e164 <> '' ";
	    	System.out.println("15:"+sql);
	    	rs = statement.executeQuery(sql);
            rs.next();
            count = rs.getInt(1);
            rs.close();
            if(count > 0){
	            sql = "SELECT physical_address FROM table_provision WHERE e164 <> '' ";
		    	System.out.println("15:"+sql);
		    	rs = statement.executeQuery(sql);
	            
        		String[]    strTmp  = null;
        		String 		loginID	= "";
                String 		tmpData	= "";
                while (rs.next()) {
                	tmpData = tmpData+rs.getString("physical_address")+"|";
                }
		    	rs.close();
		    	//System.out.println("tmpData :"+tmpData);
		    	
		    	strTmp		= tmpData.split("[|]");
		    	//System.out.println("strTmp.length :"+strTmp.length);
		    	
		    	for(int i=0;i<strTmp.length;i++){
		    		String 	tmpMac = "";
		            String	strMac = "";
		            tmpMac = strTmp[i];
		            
		            //System.out.println("tmpData ["+i+"]:"+strTmp[i]);
		            
		            strMac = tmpMac.substring(0,2)+tmpMac.substring(3,5)+tmpMac.substring(6,8)+tmpMac.substring(9,11)+tmpMac.substring(12,14)+tmpMac.substring(15,17);
		        	
		        	SystemConfigSet systemConfig 	= new SystemConfigSet();
		        	LinuxShell 		linuxShell 		= new LinuxShell();	            
		            String osType3 = systemConfig.osChk();
		        	if("uix".equals(osType3)){
		        		linuxShell.runShell("rm /tftpboot/"+strMac+".cfg");
		        	}else{
		        		System.out.println("Mac 삭제 성공 : "+strMac+".cfg");
		        	}
		    	}
            }
                        
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;        

    	} catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;
        
    }

	public String getGatewayCheck() {
		String	dhcpStr		= "";
		String	dhcpUseChk	= "";
		int 	nTemp 		= 0;
		
		SystemConfigSet 	systemConfig 	= new SystemConfigSet();
		List 				dhcpList 		= systemConfig.getRcConfigList();		// 데이타 조회
		int					dhcpCount		= dhcpList.size();		
		
		for(int i=0;i<dhcpCount;i++){
			dhcpStr = (String)dhcpList.get(i);		
			if(dhcpStr.length()>=12){
				if("dhcpd_enable".equals(dhcpStr.substring(0,12))){
					nTemp = dhcpStr.indexOf("=");
					dhcpUseChk = dhcpStr.substring(nTemp+1, dhcpStr.length()).replace('"',' ').trim();		// 신규장비 여부 체크
				}
			}
		}
		
        return dhcpUseChk;
    }

    public int autoPhoneAuthPasswordUpdate(String strEndpointid, String strAuthPwd){
    	int 			returnVal 	= 0;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	        
    		System.out.println("@@@@@@@@@@@@@@ strEndpointid : "+strEndpointid);
    		
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	System.out.println("@@@@@@@@@@@@@@ strAuthPwd : "+strAuthPwd);
	    	
        	sql = " Update table_auth Set password = '" + strAuthPwd + "' Where endpointid = '" + strEndpointid + "' ";
        	statement.executeUpdate(sql);
        	System.out.println("Update SQL문 : "+sql); 
        	
            statement.endTransaction(true);			// commit 처리
	        returnVal = 1;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = 0;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public int autoPhoneAuthUpdate_IMS(String strEndpointid, String strAuthPwd){
    	int 			returnVal 	= 0;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	        String		oldAuthPwd	= strAuthPwd;
	        
    		System.out.println("@@@@@@@@@@@@@@ strEndpointid : "+strEndpointid);
    		
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	System.out.println("@@@@@@@@@@@@@@ strAuthPwd : "+strAuthPwd);
	    	
	    	// IMS 관련 비밀번호 헥사값으로 변경
	    	IpcsList 	ipcsList02 	= new IpcsList();
	    	String		newAuthPass	= "";
	    	newAuthPass	= ipcsList02.makeMD5(strAuthPwd);
	    	
        	sql = " Update table_auth Set password = '" + newAuthPass + "' , descriptor = '" + oldAuthPwd + "'  Where endpointid = '" + strEndpointid + "' ";
        	statement.executeUpdate(sql);
        	System.out.println("Update SQL문 : "+sql); 
        	
            statement.endTransaction(true);			// commit 처리
	        returnVal = 1;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = 0;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
}
