package dao.addition;

import java.sql.ResultSet;
import java.util.List;
import java.io.File;
import java.util.Vector;

import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;

import dto.FeatureServiceDTO;
import acromate.common.util.StringUtil;
import acromate.common.StaticString;

public class FeatureServiceDAO {

    public FeatureServiceDAO() {}
    
	public int getMaxID(DataStatement stmt, String e164, int serviceNo) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(priority),0) " ;
		sql = sql +  "\n   FROM table_featureservice ";
		sql = sql +  "\n  WHERE e164      = '" + e164 + "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }
	

    public int insert(DataStatement stmt, FeatureServiceDTO featureServiceDTO) {

        ResultSet rs          = null;
        String    sql         = "";
        int       nResult     = 0;
        File      tempFile    = null;  // 파일 객체
        String    dbE164      = "";
        String    dbUserParam = "";
        try {            
            if (stmt != null) {
            	sql  = "\n SELECT e164, userparam " ;
        		sql += "\n   FROM table_featureservice ";
        		sql += "\n  WHERE e164      = '" + featureServiceDTO.getE164() + "' ";
        		sql += "\n    AND serviceno = "  + featureServiceDTO.getServiceNo();
        		
                rs = stmt.executeQuery(sql);
                if (rs.next()){
                	dbE164      = Str.CheckNullString(rs.getString("e164")); 
                	dbUserParam = Str.CheckNullString(rs.getString("userparam")); 
                }
                        
            	if(!"".equals(dbE164)){
            		if(!"".equals(featureServiceDTO.getUserParam())){
	            		sql  = "\n UPDATE table_featureservice  " ;
	                    sql += "\n    Set userparam = '" + featureServiceDTO.getUserParam() + "' " ;
	            		sql += "\n  WHERE e164      = '" + featureServiceDTO.getE164() + "' ";
	            		sql += "\n    AND serviceno = "  + featureServiceDTO.getServiceNo();
	              
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult >= 1){
	                    	if(!"".equals(dbUserParam)){
//	                    		if(!dbUserParam.equals(StaticString.defaultWav1) && !dbUserParam.equals(StaticString.defaultWav2) && !dbUserParam.equals(StaticString.defaultWav3) && !dbUserParam.equals(StaticString.defaultWav4) && !dbUserParam.equals(StaticString.defaultWav5) && !dbUserParam.equals(StaticString.defaultWav6) && !dbUserParam.equals(StaticString.defaultWav7) && !dbUserParam.equals(StaticString.defaultWav8)){
		                    	if(!dbUserParam.equals(StaticString.defaultWav5) && !dbUserParam.equals(StaticString.defaultWav6) && !dbUserParam.equals(StaticString.defaultWav7) && !dbUserParam.equals(StaticString.defaultWav8)){
		                    		// 통화 연결음일 경우(MRBT)
			                        if(featureServiceDTO.getServiceNo() == StaticString.MRBT){
			                        	String[] param1 = StringUtil.getParser(featureServiceDTO.getUserParam(), ",");
			                        	String[] param2 = StringUtil.getParser(dbUserParam, ",");
			                            if(param1.length == 3 && param2.length == 3){
			                            	if(!param1[2].equals(param2[2])){
			                            		dbUserParam = param2[2];
			                            		tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
						                    	tempFile.delete();
			                            	}
			                            }
			                        }else{
			                        	tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
				                    	tempFile.delete();
			                        }
	                    		}
	                    	}
	            			System.out.println("수정  성공");
	                    }else{
	                        System.out.println("수정  실패");
	                    }
            		}else{
            			nResult = 1;
            		}
            		
            	}else{
                    int maxId = getMaxID(stmt, featureServiceDTO.getE164(), featureServiceDTO.getServiceNo());

                    sql  = "\n INSERT INTO table_featureservice (e164, serviceno, priority, userparam) ";
                    sql += "\n                          values (" ;
                    sql += "'" + featureServiceDTO.getE164()      + "'," ;
                    sql += " " + featureServiceDTO.getServiceNo() + "," ;            
                    sql += " " + (maxId + 1)                      + "," ; 
                    sql += "'" + featureServiceDTO.getUserParam() + "'" ;
                    sql += ") ";

                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1)
                        System.out.println("입력 성공");
                    else
                        System.out.println("입력 실패");            		
            	}

            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        
        return nResult ;
    }
    
    public int update(DataStatement stmt, String e164, String serviceNo, String filename, String gubun) {

        ResultSet rs          = null;
        ResultSet rs2         = null;
        ResultSet rs3         = null;
        Vector 	  vecTmp 	  = new Vector();
        int		  returnValue = 0;
        
        String    sql         = "";
        int       nResult     = 0;
        String    dbE164      = "";
        String    dbUserParam = "";
        File      tempFile    = null;  // 파일 객체

        try {            
            if (stmt != null) {
            	sql  = "\n SELECT e164, userparam " ;
        		sql += "\n   FROM table_featureservice ";
        		sql += "\n  WHERE e164      = '" + e164 + "' ";
        		sql += "\n    AND serviceno = "  + serviceNo;
        		
                rs = stmt.executeQuery(sql);
                if (rs.next()){
                	dbE164      = Str.CheckNullString(rs.getString("e164")); 
                	dbUserParam = Str.CheckNullString(rs.getString("userparam")); 
                }
                
                if (rs != null) 
                	rs.close();
                
            	if(!"".equals(dbE164)){
            		if("".equals(gubun) || "0".equals(gubun)){
            			// 트랜잭션 시작
    					stmt.stxTransaction();
    					
            			sql  = "\n DELETE FROM table_featureservice  " ;
	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
	            		sql += "\n    AND serviceno = "  + serviceNo;
	              
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult >= 1){
	                    	sql  = "\n SELECT e164, serviceno, priority" ;
	                		sql += "\n   FROM table_featureservice ";
	                		sql += "\n  WHERE e164 = '" + e164 + "' ";
	                		sql += "\n  ORDER BY priority ";

	                        //rs = stmt.executeQuery(sql);
	                        rs2 = stmt.executeQuery(sql);
/*
	                        int cnt = 1;
	                        //while (rs.next()) {
	                        while (rs2.next()) {
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + Str.CheckNullString(rs2.getString("e164")) + "' ";
	    	            		sql += "\n    AND serviceno = "  + rs2.getInt("serviceno");
	    	              
	    	                    nResult = stmt.executeUpdate(sql);
	    	                    
	    	                    cnt++;
	                        }
*/
		    	            while(rs2.next()){
		    	            	vecTmp.add(WebUtil.CheckNullString(rs2.getString(1)+"|"+rs2.getString(2))) ;            	
		    	            }	                        
	                        rs2.close();
	                        
	                        int 		nTmp	= vecTmp.size();
	                        int 		cnt 	= 1;
	                        String[]	varTmp;
	                        String		strTmp 	= "";
	                        String		number1 = "";
	                        String		number2 = "";
	                        
	                        for(int i=0; i < nTmp; i++){
	                        	strTmp 	= (String)vecTmp.get(i);
	                        	varTmp 	= strTmp.split("[|]");
	                        	number1	= varTmp[0];
	                        	number2	= varTmp[1];
	                        	sql  = "\n UPDATE table_featureservice  " ;
	    	                    sql += "\n    Set priority  = " + cnt;
	    	            		sql += "\n  WHERE e164      = '" + number1 + "' ";
	    	            		sql += "\n    AND serviceno = "  + number2;	    	              
	    	            		nResult = stmt.executeUpdate(sql);
	    	                    cnt++;
	                        }
	                        
	                        
	                        
	                        // 통화 연결음일 경우(MRBT)
	                        int tempServiceNo = Integer.parseInt(serviceNo);
	                        //if(Integer.parseInt(serviceNo)==StaticString.MRBT){
	                        if(tempServiceNo==StaticString.MRBT){
	                        	sql  = "\n SELECT filename" ;
		                		sql += "\n   FROM table_callermrbt ";
		                		sql += "\n  WHERE e164 = '" + e164 + "' ";

		                        //rs = stmt.executeQuery(sql);
		                        rs3 = stmt.executeQuery(sql);
		                        
		                        //while (rs.next()) {
		                        while (rs3.next()) {
		                        	//tempFile = new File(StaticString.userWavPath+"/"+rs.getString("filename"));
		                        	tempFile = new File(StaticString.userWavPath+"/"+rs3.getString("filename"));
			                    	tempFile.delete();
		                        }
		                        rs3.close();
		                        
		                        sql  = "\n DELETE FROM table_callermrbt  " ;
			            		sql += "\n  WHERE e164      = '" + e164 + "' ";
			              
			                    nResult = stmt.executeUpdate(sql);		   
	                        	
	                        }
		                    
	                    	if(!"".equals(dbUserParam)){
//	                    		if(!dbUserParam.equals(StaticString.defaultWav1) && !dbUserParam.equals(StaticString.defaultWav2) && !dbUserParam.equals(StaticString.defaultWav3) && !dbUserParam.equals(StaticString.defaultWav4) && !dbUserParam.equals(StaticString.defaultWav5) && !dbUserParam.equals(StaticString.defaultWav6) && !dbUserParam.equals(StaticString.defaultWav7) && !dbUserParam.equals(StaticString.defaultWav8)){
		                        if(!dbUserParam.equals(StaticString.defaultWav5) && !dbUserParam.equals(StaticString.defaultWav6) && !dbUserParam.equals(StaticString.defaultWav7) && !dbUserParam.equals(StaticString.defaultWav8)){
		                        	// 통화 연결음일 경우(MRBT)
			                        if(Integer.parseInt(serviceNo) ==StaticString.MRBT){
			                        	String[] param = StringUtil.getParser(dbUserParam, ",");
			                            if(param.length == 3){
			                            	dbUserParam = param[2];
			                            }
			                        }
		                        	
		                        	tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
			                    	tempFile.delete();
	                    		}
	                    	}
	            			System.out.println("삭제  성공");
	            			returnValue = 1;
	                    }else{
	                        System.out.println("삭제  실패");
	                        returnValue = 0;
	                    }
	                    
	                    if (stmt != null)
							stmt.endTransaction(true);	                    
            		}else{
            			sql  = "\n UPDATE table_featureservice  " ;
	                    sql += "\n    Set userparam = '" + filename + "' " ;
	            		sql += "\n  WHERE e164      = '" + e164 + "' ";
	            		sql += "\n    AND serviceno = "  + serviceNo;
	              
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult >= 1){
	                    	if(!filename.equals(dbUserParam)){
	                    		if(!"".equals(dbUserParam)){
		                    		if(!dbUserParam.equals(StaticString.defaultWav1) && !dbUserParam.equals(StaticString.defaultWav2) && !dbUserParam.equals(StaticString.defaultWav3) && !dbUserParam.equals(StaticString.defaultWav4) && !dbUserParam.equals(StaticString.defaultWav5) && !dbUserParam.equals(StaticString.defaultWav6) && !dbUserParam.equals(StaticString.defaultWav7) && !dbUserParam.equals(StaticString.defaultWav8)){
		                    			// 통화 연결음일 경우(MRBT)
				                        if(Integer.parseInt(serviceNo) ==StaticString.MRBT){
				                        	String[] param = StringUtil.getParser(dbUserParam, ",");
				                            if(param.length == 3){
				                            	dbUserParam = param[2];
				                            }
				                        }
		                    			tempFile = new File(StaticString.userWavPath+"/"+dbUserParam);
				                    	tempFile.delete();
		                    		}
	                    		}
	                    	}
	            			System.out.println("수정  성공");
	            			returnValue = 1;
	                    }else{
	                        System.out.println("수정  실패");
	                        returnValue = 0;
	                    }
            		}
            	}else{
            		if("".equals(gubun) || "0".equals(gubun)){
            			//nResult = 1;
            			returnValue = 1;
            		}else{
                        int maxId = getMaxID(stmt, e164, Integer.parseInt(serviceNo));

                        sql  = "\n INSERT INTO table_featureservice (e164, serviceno, priority, userparam) ";
                        sql += "\n                          values (" ;
                        sql += "'" + e164        + "'," ;
                        sql += " " + serviceNo   + "," ;            
                        sql += " " + (maxId + 1) + "," ; 
                        sql += "'" + filename    + "'" ;
                        sql += ") ";

                        nResult = stmt.executeUpdate(sql);
                        if (nResult >= 1){
                            System.out.println("입력 성공");
                        	returnValue = 1;
                        }else{
                            System.out.println("입력 실패");
                            returnValue = 0;
                        }
            		}
            	}

            } else{
                System.out.println("데이터베이스에 연결할 수 없습니다.");
                returnValue = 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
            returnValue = 0;
        } finally {
            try {
            	if (rs3 != null) rs3.close();
            	if (rs2 != null) rs2.close();
                if (rs != null) rs.close();                
            } catch (Exception e) {}
        }
        
        //return nResult ;
        return returnValue ;
    }
    
}