package dao.addition;

import acromate.*;
import java.sql.ResultSet;
import java.util.Vector;

import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
import acromate.common.util.StringUtil;

public class BlockPrefixDAO {

    public BlockPrefixDAO() {}   
    
    public boolean e164Update(String hiEi64, String hiBlockType){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		e164		= hiEi64;			// E164
	    	String 		blockType	= hiBlockType;		// E164

	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            String temp_AnswerService = "";
            String answerService = "";
            
            sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + e164 + "'";
//            sql = "SELECT answerservice FROM table_E164 WHERE e164 = '027191000'";
            rs = statement.executeQuery(sql);
            if (rs.next()) temp_AnswerService = rs.getString(1);
            rs.close();

//            System.out.println("검색한 answerservice 값 : "+temp_AnswerService);
//            System.out.println("앞부분 answerservice 값 : "+temp_AnswerService.substring(0, 1));
//            System.out.println("수정항 answerservice 값 : "+temp_AnswerService.substring(1, 2));
//            System.out.println("뒷부분 answerservice 값 : "+temp_AnswerService.substring(2, 64));
            
            if(blockType.equals("1")){
            	answerService = temp_AnswerService.substring(0, 1) + "0" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("2")){
            	answerService = temp_AnswerService.substring(0, 1) + "1" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("3")){
            	answerService = temp_AnswerService.substring(0, 1) + "3" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("4")){
            	answerService = temp_AnswerService.substring(0, 1) + "7" + temp_AnswerService.substring(2, 64);
            }
            
//            System.out.println("수정후 answerservice 값 : "+answerService);
                            
            sql   = "Update table_E164 set answerservice = '" + answerService + "' WHERE e164 = '" + e164 + "'";
            System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[착신제한 등록] '","[Auth Properties Error] '")+e164+l.x("'는 착신제한 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
    public int getBlockPrefixChk(String hiEi64, String hiBlockNumber){
    	int 			nResult 	= 0;
    	DataStatement 	statement 	= null;
    	try {
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            sql = "SELECT count(*) FROM table_e164block WHERE e164 = '" + hiEi64 + "' And startprefix = '" + hiBlockNumber + "' And inoutflag = 1 ";
            rs = statement.executeQuery(sql);
            if (rs.next()) nResult = rs.getInt(1);
            rs.close();

            statement.endTransaction(true);			// commit 처리	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return nResult;        
    }

    public boolean blockPrefixSave(String hiEi64, String hiBlockNumber, String hiDescription, String hiBlockType){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	try {
//	    	int 		count 		= 0;
	    	int 		nResult 	= 0;
	    	String 		e164		= hiEi64;			// E164
	    	String 		startprefix	= hiBlockNumber;	// E164
	    	String 		description	= hiDescription;	// E164
	    	String 		blockType	= hiBlockType;		// E164
	    	String		endprefix	= "";
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	        endprefix = "________________________________";
	        if(hiBlockNumber.length() < 32) {
	            int nLength = hiBlockNumber.length();
	            endprefix = hiBlockNumber + endprefix.substring(nLength);
	        }
	        else if (hiBlockNumber.length() == 32 )
	            endprefix = hiBlockNumber ;
	    	
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	/***** Table_E164block 추가 ********/
            sql = "Insert into Table_E164block(e164, inoutflag, startprefix, endprefix, prefixtype, blockidtype, description) ";
            sql = sql + " Values('" + e164 + "', 1, '" + startprefix + "', '" + endprefix + "', 0, 1, '" + description + "')";
            
            System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[착신제한 번호 등록] '","[Auth Properties Error] '")+e164+l.x("'는 착신제한 번호 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                


            /***** table_E164 수정 ********/
            String temp_AnswerService = "";
            String answerService = "";            
            sql = "SELECT answerservice FROM table_E164 WHERE e164 = '" + e164 + "'";
            rs = statement.executeQuery(sql);
            if (rs.next()) temp_AnswerService = rs.getString(1);
            rs.close();

            if(blockType.equals("1")){
            	answerService = temp_AnswerService.substring(0, 1) + "0" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("2")){
            	answerService = temp_AnswerService.substring(0, 1) + "1" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("3")){
            	answerService = temp_AnswerService.substring(0, 1) + "3" + temp_AnswerService.substring(2, 64);
            }else if(blockType.equals("4")){
            	answerService = temp_AnswerService.substring(0, 1) + "7" + temp_AnswerService.substring(2, 64);
            }
            
            sql   = "Update table_E164 set answerservice = '" + answerService + "' WHERE e164 = '" + e164 + "'";
            System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[착신제한 등록] '","[Auth Properties Error] '")+e164+l.x("'는 착신제한 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
            
            
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean blockPrefixDelete(String deleteStr){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	Vector 			vecTmpUserE164 	= new Vector();
    	Vector 			vecTmpKeyNum 	= new Vector();
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 		= StringUtil.getParser(deleteStr, "");
			String		e164 			= "";
			String		blockPrefixNo 	= "";
			
			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					String[] dataStr = StringUtil.getParser(blockStr[k], "|");
					if(dataStr != null){
						e164  			= dataStr[0];
						blockPrefixNo   = dataStr[1];
			            
			            /***** Table_E164block 삭제 ********/
			            sql = "DELETE FROM Table_E164block WHERE e164 = '"+e164+"' And startprefix = '"+blockPrefixNo+"' And inoutflag = 1 " ;
			            System.out.println("1:"+sql);
			            statement.executeUpdate(sql);

					}
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean blockPrefixEdit(String hiEi64, String hiBlockNumber, String hiDescription){
    	boolean 		returnVal 		= false;
    	DataStatement 	statement 		= null;
    	
    	try {
    		int 		count 		= 0;
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
            /***** Table_E164block 수정 ********/
            sql = "Update Table_E164block Set description = '"+hiDescription+"' WHERE e164 = '"+hiEi64+"' And startprefix = '"+hiBlockNumber+"' And inoutflag = 1 " ;
            System.out.println("1:"+sql);
            statement.executeUpdate(sql);
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
    
}
