package dao.addition;

import java.sql.ResultSet;
import java.util.List;
import java.io.File;

import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;

import dto.AlarmServiceDTO;
import acromate.common.util.StringUtil;
import acromate.common.StaticString;

public class AlarmServiceDAO {

    public AlarmServiceDAO() {}
    
	public int getMaxID(DataStatement stmt, String e164) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(sequenceno),0) " ;
		sql = sql +  "\n   FROM table_alarmservice ";
		sql = sql +  "\n  WHERE e164      = '" + e164 + "' ";
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) max = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return max;
    }
	

    public int insert(DataStatement stmt, String e164, String alarmtype, String alarmtime, String alarmdate) {

        String    sql         = "";
        int       nResult     = 0;
        try {            
            if (stmt != null) {
                    int maxId = getMaxID(stmt, e164);

                    sql  = "\n INSERT INTO table_alarmservice (e164, sequenceno, alarmtype, alarmtime, alarmdate) ";
                    sql += "\n                         values (" ;
                    sql += "'" + e164        + "'," ;
                    sql += " " + (maxId + 1) + "," ;            
                    sql += " " + alarmtype   + "," ; 
                    sql += "'" + alarmtime   + "'," ;
                    sql += "'" + alarmdate   + "'" ;
                    sql += ") ";

                    nResult = stmt.executeUpdate(sql);
                    if (nResult >= 1)
                        System.out.println("입력 성공");
                    else
                        System.out.println("입력 실패");            		

            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return nResult ;
        }
    }
    
    public int delete(DataStatement stmt, String e164, String deleteStr) {
		int    nResult   = 0;
		String sql       = "";
		        
        try {            
        	String[] dataStr = StringUtil.getParser(deleteStr, "|");

    		if (stmt != null) {
				if(dataStr != null){
					// 트랜잭션 시작
					stmt.stxTransaction();
					
					for(int i=0; i < dataStr.length; i++){
		                sql  = "\n DELETE FROM table_alarmservice ";
		                sql += "\n  WHERE e164       = '" + e164 + "'";
		                sql += "\n    AND sequenceno = "  + dataStr[i];

		                nResult = stmt.executeUpdate(sql);
					}

					if (stmt != null)
						stmt.endTransaction(true);
				}                                        
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
    		return nResult;
        }
	}

    
    public int deleteAll(DataStatement stmt, String e164) {
		int    nResult   = 0;
		String sql       = "";
		        
        try {            
    		if (stmt != null) {
                sql  = "\n DELETE FROM table_alarmservice ";
                sql += "\n  WHERE e164       = '" + e164 + "'";

                nResult = stmt.executeUpdate(sql);
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
    		return nResult;
        }
	}

    public int delete_02(DataStatement stmt, String e164, String sequence) {
		int    nResult   = 0;
		String sql       = "";
		        
        try {            
    		if (stmt != null) {
				// 트랜잭션 시작
				stmt.stxTransaction();
				
                sql  = "\n DELETE FROM table_alarmservice ";
                sql += "\n  WHERE e164       = '" + e164 + "'";
                sql += "\n    AND sequenceno = "  + sequence;

                nResult = stmt.executeUpdate(sql);

				if (stmt != null)
					stmt.endTransaction(true);
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
    		return nResult;
        }
	}

}