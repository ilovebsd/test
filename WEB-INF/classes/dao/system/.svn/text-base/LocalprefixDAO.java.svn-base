package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.system.LocalprefixDTO;
import acromate.common.util.StringUtil;
import acromate.*;

public class LocalprefixDAO {

    public LocalprefixDAO() {}
    
    public int insert(DataStatement stmt, LocalprefixDTO localprefixDTO) {

        ResultSet 	rs 		= null;
        String 		sql		= "";
        int 		nResult = 0;

        int nPrefixType = 0;
        nPrefixType = localprefixDTO.getPrefixtype();

        int nThirdShare 	= nPrefixType / 4096;      //(0x1000)
        int nRest1 			= nPrefixType % 4096;
        int nSecondShare 	= nRest1 / 256;           //(0x100)
        int nRest2 			= nRest1 % 256;
        //int nRest2 			= nRest1;
        int nFirstShare 	= nRest2 / 16;             //(0x10)
        int nRest3 			= nRest2 % 16;                  //(0x01)
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                if ( nFirstShare == 1 ||nFirstShare == 2 || nFirstShare == 3 ) { //자국Prefix, 단말 없을 경우 정해진 루트로 호중계
                	sql = "INSERT INTO TABLE_LOCALPREFIX(STARTPREFIX, ENDPREFIX, PREFIXTYPE, PROTOCOL, ENDPOINTID, GROUPID) "
                              + "VALUES ('"+localprefixDTO.getStartprefix()+"', '"+localprefixDTO.getEndPrefix()+"',"+localprefixDTO.getPrefixtype()+", "
                              + ""+localprefixDTO.getProtocol()+", '"+localprefixDTO.getEndpointid()+"', '"+ localprefixDTO.getGroupid() +"' ) ";
                }
                else {
                	sql = "INSERT INTO TABLE_LOCALPREFIX(STARTPREFIX, ENDPREFIX, PREFIXTYPE, PROTOCOL, ENDPOINTID) "
                              + "VALUES ('"+localprefixDTO.getStartprefix()+"', '"+localprefixDTO.getEndPrefix()+"',"+localprefixDTO.getPrefixtype()+", "
                              + "Null, Null ) ";
                }
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int update(DataStatement stmt, LocalprefixDTO localprefixDTO) {

        ResultSet 	rs 		= null;
        String 		sql		= "";
        int 		nResult = 0;

        int nPrefixType = 0;
        nPrefixType = localprefixDTO.getPrefixtype();

        int nThirdShare 	= nPrefixType / 4096;      //(0x1000)
        int nRest1 			= nPrefixType % 4096;
        int nSecondShare 	= nRest1 / 256;           //(0x100)
        int nRest2 			= nRest1 % 256;
        //int nRest2 			= nRest1;
        int nFirstShare 	= nRest2 / 16;             //(0x10)
        int nRest3 			= nRest2 % 16;                  //(0x01)
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                if ( nFirstShare == 1 ||nFirstShare == 2 || nFirstShare == 3 ) { //자국Prefix, 단말 없을 경우 정해진 루트로 호중계
                	sql = " UPDATE TABLE_LOCALPREFIX SET "; 
                	sql = sql + "\n PREFIXTYPE 	=  " +localprefixDTO.getPrefixtype()+ ", "; 
                	sql = sql + "\n PROTOCOL 	=  " +localprefixDTO.getProtocol()+ ", "; 
                	sql = sql + "\n ENDPOINTID 	= '" +localprefixDTO.getEndpointid()+ "', "; 
                	sql = sql + "\n GROUPID 	= '" +localprefixDTO.getGroupid()+ "' "; 
                	sql = sql + "\n WHERE STARTPREFIX = '"+localprefixDTO.getStartprefix()+"' ";
                }else {
                	sql = " UPDATE TABLE_LOCALPREFIX SET ";
                	sql = sql + "\n PREFIXTYPE 	= "+localprefixDTO.getPrefixtype()+", "; 
                	sql = sql + "\n PROTOCOL 	= Null, ";
                	sql = sql + "\n ENDPOINTID 	= Null ";
                	sql = sql + "\n WHERE STARTPREFIX = '"+localprefixDTO.getStartprefix()+"' "; 
                }                                
                
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }
    
    public int delete(DataStatement stmt, String startPrefix) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From TABLE_LOCALPREFIX Where STARTPREFIX = '" + startPrefix + "'";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }
    
}