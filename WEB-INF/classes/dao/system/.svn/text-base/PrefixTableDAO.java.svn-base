package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.system.PrefixTableDTO;
import acromate.common.util.StringUtil;
import acromate.*;

public class PrefixTableDAO {

    public PrefixTableDAO() {}
    
    public int insert(DataStatement stmt, PrefixTableDTO prefixTableDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n INSERT INTO table_PrefixTable(PREFIXTABLEID, STARTPREFIX, ENDPREFIX, "; 
            	sql = sql +  "\n 			CALLTYPE, ROUTESELECTRULE, PROTOCOL, ROUTEID, CHARGETYPE, ";
            	sql = sql +  "\n 			DESCRIPTION, MINDIGITCOUNT, MAXDIGITCOUNT, ROUTINGENDPOINTTYPE) ";
            	sql = sql +  "\n                 	values (" ;
            	sql = sql + "'" + prefixTableDTO.getPrefixTableId()     	+ "' , " ;
            	sql = sql + "'" + prefixTableDTO.getStartPrefix()     		+ "' , " ;
            	sql = sql + "'" + prefixTableDTO.getEndPrefix()     		+ "' , " ;            	
            	sql = sql + " " + prefixTableDTO.getCallType()  			+ "  , " ;            	
            	sql = sql + " " + prefixTableDTO.getRouteSelectRule()  		+ "  , " ;
            	if(prefixTableDTO.getRouteSelectRule()==1){
            		sql = sql + " " + prefixTableDTO.getProtocol() 			+ "  , " ;
            	}else{
            		sql = sql + " null , " ;
            	}
            	sql = sql + "'" + prefixTableDTO.getRouteId()     			+ "' , " ;
            	sql = sql + " " + prefixTableDTO.getChargeType()  			+ "  , " ;
            	sql = sql + "'" + prefixTableDTO.getDescription()     		+ "' , " ;
            	sql = sql + " " + prefixTableDTO.getMinDigitCount()  		+ "  , " ;
            	sql = sql + " " + prefixTableDTO.getMaxDigitCount()  		+ "  , " ;
            	sql = sql + " " + prefixTableDTO.getRoutingEndpointType()	+ " " ;
            	sql = sql + ") ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int update(DataStatement stmt, PrefixTableDTO prefixTableDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	

                String sql = "\n UPDATE TABLE_PREFIXTABLE  SET ";
                sql = sql +  "\n 		CALLTYPE 		=  "+prefixTableDTO.getCallType()+", ";
                sql = sql +  "\n 		ROUTESELECTRULE =  "+prefixTableDTO.getRouteSelectRule()+", "; 
                if(prefixTableDTO.getRouteSelectRule()==1){
                	sql = sql +  "\n 		PROTOCOL 	=  "+prefixTableDTO.getProtocol()+", "; 	
                }else{
                	sql = sql +  "\n 		PROTOCOL 	= null, ";
                }
                sql = sql +  "\n 		ROUTEID 		= '"+prefixTableDTO.getRouteId()+"', ";
                sql = sql +  "\n 		DESCRIPTION 	= '"+prefixTableDTO.getDescription()+"', ";
                sql = sql +  "\n 		MINDIGITCOUNT 	=  "+prefixTableDTO.getMinDigitCount()+", ";
                sql = sql +  "\n 		MAXDIGITCOUNT 	=  "+prefixTableDTO.getMaxDigitCount()+" ";
                sql = sql +  "\n WHERE PrefixTableID 	= '"+prefixTableDTO.getPrefixTableId()+"' ";
                sql = sql +  "\n   AND STARTPREFIX 		= '"+prefixTableDTO.getStartPrefix()+"' "; 
                sql = sql +  "\n   AND ROUTINGENDPOINTTYPE = 1 ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정 성공");
                else
                    System.out.println("수정 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }
    
    public int delete(DataStatement stmt, String prefixId, String startPrefix) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
            	String sql = "\n Delete From table_PrefixTable ";
            	sql = sql + "\n  Where PrefixTableID = '" + prefixId + "' And StartPrefix = '"+ startPrefix +"' ";
            	sql = sql + "\n    AND ROUTINGENDPOINTTYPE = 1 ";
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult;
    }    
}