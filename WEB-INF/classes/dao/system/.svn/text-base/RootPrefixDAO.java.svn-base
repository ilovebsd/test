package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.system.PrefixTableIdDTO;
import dto.system.RootPrefixDTO;
import acromate.common.util.StringUtil;
import acromate.*;

public class RootPrefixDAO {

    public RootPrefixDAO() {}
    
    public int insert(DataStatement stmt, RootPrefixDTO dao, String roundAboutCount, String roundAboutStr, String roundAboutCheck, String inStartPosition, String inCutPrefix, String outStartPosition, String outCutPrefix, String goodsName_Type) {

        ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
            	
//    			System.out.println("우회 루트 문자열00 : "+roundAboutCount);
//    			System.out.println("우회 루트 문자열11 : "+roundAboutStr);
    			            	
                sql = " INSERT INTO TABLE_NEIGHBORPROXY(ENDPOINTID, ENDPOINTCLASS, AUTHMODE, SIGNALADDRESS, SIGNALPORT, ";
                sql = sql + "\n OUTFROMDOMAINNAME , OUTTODOMAINNAME, MESSAGETYPE, CHANNELMONITOR, INVIAADDRESS, ";
                sql = sql + "\n URITYPE, URIPARAM, DtmfType, Options , InDomainName, UserName, Password, INVIAPORT) ";
                sql = sql + "\n VALUES('"+dao.getEndpointid()+"', ";
                sql = sql + "\n  " +dao.getEndpointClass()+", ";
                sql = sql + "\n  " +dao.getAuthMode()+", ";
                sql = sql + "\n '" +dao.getSignalAddress()+"', ";
                sql = sql + "\n  " +dao.getSignalPort()+", ";
                sql = sql + "\n '" +dao.getOutFromDomainname()+"', ";
                sql = sql + "\n '" +dao.getOutToDomainname()+"', ";
                sql = sql + "\n  " +dao.getMessageType()+", ";
                sql = sql + "\n  " +dao.getChannelMonitor()+", ";
                sql = sql + "\n '" +dao.getInviaAddress()+"', ";
                sql = sql + "\n  " +dao.getUritype()+ ", ";
                sql = sql + "\n '" +dao.getUriparam()+ "', ";
                sql = sql + "\n  " +dao.getDtmfType()+ ", ";
                sql = sql + "\n  " +dao.getOptions()+ ", ";
                sql = sql + "\n '" +dao.getInDomainname()+ "', ";
                sql = sql + "\n '" +dao.getUserName()+ "', ";
                sql = sql + "\n '" +dao.getPassWord()+ "', ";
                if ( dao.getInviaPort() > 0)
                    sql = sql + "\n  "+dao.getInviaPort()+" )";
            	else
                    sql = sql + "\n  NULL )";
            	
                System.out.println("insert 1 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                
                sql = " INSERT INTO TABLE_ROUTESTATE(ENDPOINTID, PROTOCOL, ENDPOINTCLASS, ROUTECODE, GROUPID, GROUPATTACH, ";
                sql = sql + "\n StateFlag, ServiceFlag, INMAXCALL, OUTMAXCALL, INALARMCALL, "; 
                sql = sql + "\n OUTALARMCALL, BLOCKCOUNT, ";
                
                if(!"".equals(inStartPosition)) sql = sql + "\n INSTARTPOSITION, ";                
                if(!"".equals(inCutPrefix)) 	sql = sql + "\n INCUTPREFIX, ";
                
                sql = sql + "\n INADDPREFIX, ";
                
                if(!"".equals(outStartPosition)) sql = sql + "\n OUTSTARTPOSITION, ";
                if(!"".equals(outCutPrefix)) 	sql = sql + "\n OUTCUTPREFIX, ";
                
                sql = sql + "\n OUTADDPREFIX, INCUTCID, INADDCID, OUTCUTCID, OUTADDCID, ";
                sql = sql + "\n CHANNELLIMITMODE, TOTALMAXCALL, TOTALALARMCALL, ZONECODE, RouteName, INCURRENTCALL, OUTCURRENTCALL, MaxdetourCount ";
                if (dao.getRouteType() != null) sql = sql + "\n , ROUTETYPE ";
                if (dao.getIsLocal() >= 0)		sql = sql + "\n , ISLOCAL ";
                sql = sql + "\n ,inaddibleflag, outaddibleflag, options ";
                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', ";
                sql = sql + "\n  "+dao.getProtocol()+", ";
                sql = sql + "\n  "+dao.getEndpointClass()+", '', ";
                sql = sql + "\n '"+dao.getGroupId()+"', ";
                sql = sql + "\n  "+dao.getGroupAttach()+", ";
                sql = sql + "\n  "+dao.getStateFlag()+", ";
                sql = sql + "\n  "+dao.getServiceFlag()+", ";
                sql = sql + "\n  "+dao.getInMaxcall()+", ";
                sql = sql + "\n  "+dao.getOutMaxcall()+", ";
                sql = sql + "\n  "+dao.getInAlarmCall()+", ";
                sql = sql + "\n  "+dao.getOutAlarmCall()+", ";
                sql = sql + "\n  "+dao.getBlockCount()+", ";
                
                if(!"".equals(inStartPosition)) sql = sql + "\n  "+dao.getInstartposition()+", ";
                if(!"".equals(inCutPrefix)) 	sql = sql + "\n  "+dao.getIncutPrefix()+", ";
                
                sql = sql + "\n '"+dao.getInaddprefix()+"', ";
                
                if(!"".equals(outStartPosition)) sql = sql + "\n  "+dao.getOutstartPosition()+", ";
                if(!"".equals(outCutPrefix)) 	sql = sql + "\n  "+dao.getOutcutPrefix()+", ";
                
                sql = sql + "\n '"+dao.getOutaddPrefix()+"', ";
                sql = sql + "\n  "+dao.getInCutcid()+", ";
                sql = sql + "\n '"+dao.getInAddcid()+"', ";
                sql = sql + "\n  "+dao.getOutCutcid()+", ";
                sql = sql + "\n '"+dao.getOutAddcid()+"', ";
//                sql = sql + "\n  "+dao.getMaxdetourcount()+", ";
                sql = sql + "\n  "+dao.getChannelLimitMode()+", "; 
                sql = sql + "\n  "+dao.getTotalMaxcall()+", ";
                sql = sql + "\n  "+dao.getTotalAlarmCall()+", ";
                sql = sql + "\n '"+dao.getZoneCode()+"', ";
                sql = sql + "\n '"+dao.getRouteName()+ "', ";
                sql = sql + "\n  "+dao.getInCurrentCall()+ ", ";
                sql = sql + "\n  "+dao.getOutCurrentCall()+ ", ";
                sql = sql + "\n  "+dao.getMaxdetourCount()+ " ";
                if (dao.getRouteType() != null) sql = sql + "\n ,'" + dao.getRouteType() + "' ";
                if (dao.getIsLocal() >= 0) 		sql = sql + "\n ,'" + dao.getIsLocal() + "' ";
                sql = sql + "\n , 1, 1, 1) ";

                System.out.println("insert 2 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                
                sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 2211, 2211, '', 3) ";

                System.out.println("insert 3 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 2051, 2051, '', 1) ";

                System.out.println("insert 5 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 2451, 2451, '', 1) ";

                System.out.println("insert 5-2 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
             // ####### IMS 용 #######
				if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
	                sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
	                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 274, 274, '', 2) ";
	                System.out.println("insert 5-4 --->"+sql);
	                nResult = stmt.executeUpdate(sql);
	                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
					
	                sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
	                sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 2901, 2901, '+82', 2) ";
	                System.out.println("insert 5-5 --->"+sql);
	                nResult = stmt.executeUpdate(sql);
	                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
				}else{
	                // CallBox 이원화 ============================
	                String tmpEndpointid = dao.getEndpointid();
	                System.out.println("################ tmpEndpointid --->"+tmpEndpointid);
	                if("Pri_CSCF".equals(tmpEndpointid) || "Sec_CSCF".equals(tmpEndpointid)){
	                    sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
	                    sql = sql + "\n ) VALUES ( '"+dao.getEndpointid()+"', 2, 258, 258, '', 1) ";
	
	                    System.out.println("insert 5-3 --->"+sql);
	                    nResult = stmt.executeUpdate(sql);
	                    if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
	                }
	                // =========================================
				}
				// ######################
				
                // table_detour (우회경로 루트 등록)
                if("1".equals(roundAboutCheck)){
                    String[] dataStr = StringUtil.getParser(roundAboutStr, "|");
                    
                    for(int k=0;k<dataStr.length;k++){
                    	String[] dataStr2 = StringUtil.getParser(dataStr[k], ",");
                    	String  detourendpointid 	= dataStr2[0];
                    	int 	detourprotocol 		= Integer.parseInt(dataStr2[1]);
                    	int		idx					= k+1;
                    	
                        sql = " INSERT INTO table_detour(ENDPOINTID, PROTOCOL, DETOURINDEX, DETOURENDPOINTID, DETOURPROTOCOL) VALUES ( ";
                        sql = sql + "\n '"+dao.getEndpointid()+"', ";
                        sql = sql + "\n  "+dao.getProtocol()+", ";
                        sql = sql + "\n  "+idx+", ";
                        sql = sql + "\n '"+detourendpointid+"', ";
                        sql = sql + "\n  "+detourprotocol+")";

                        System.out.println("insert 6 --->"+sql);
                        try{
                        	nResult = stmt.executeUpdate(sql);
                        }catch(Exception e){
                        	throw new Exception(l.x("[우회 루트 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	
                        }
                        if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                        
                    }
                }
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int update(DataStatement stmt, RootPrefixDTO dao, String proxyId, String roundAboutCount, String roundAboutStr, String oldRoundAboutStr, String roundAboutCheck, String inStartPosition, String inCutPrefix, String outStartPosition, String outCutPrefix) {

        ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
            	
                sql = " Update TABLE_NEIGHBORPROXY Set ";
                sql = sql + "\n ENDPOINTCLASS 		=  " +dao.getEndpointClass()+", ";
                sql = sql + "\n AUTHMODE 			=  " +dao.getAuthMode()+", ";
                //sql = sql + "\n SIGNALADDRESS 		= '" +dao.getSignalAddress()+"', ";
                sql = sql + "\n SIGNALPORT 			=  " +dao.getSignalPort()+", ";
                sql = sql + "\n OUTFROMDOMAINNAME 	= '" +dao.getOutFromDomainname()+"', ";
                sql = sql + "\n OUTTODOMAINNAME 	= '" +dao.getOutToDomainname()+"', ";
                sql = sql + "\n MESSAGETYPE 		=  " +dao.getMessageType()+", ";
                sql = sql + "\n CHANNELMONITOR 		=  " +dao.getChannelMonitor()+", ";
                //sql = sql + "\n INVIAADDRESS 		= '" +dao.getInviaAddress()+"', ";
                sql = sql + "\n URITYPE 			=  " +dao.getUritype()+ ", ";
                sql = sql + "\n URIPARAM 			= '" +dao.getUriparam()+ "', ";
                sql = sql + "\n DtmfType 			=  " +dao.getDtmfType()+ ", ";
                sql = sql + "\n Options 			=  " +dao.getOptions()+ ", ";
                sql = sql + "\n InDomainName 		= '" +dao.getInDomainname()+ "', ";
                sql = sql + "\n UserName 			= '" +dao.getUserName()+ "', ";
                sql = sql + "\n Password 			= '" +dao.getPassWord()+ "', ";
                if ( dao.getInviaPort() > 0)
                    sql = sql + "\n INVIAPORT 		=  " +dao.getInviaPort()+ " ";
            	else
                    sql = sql + "\n INVIAPORT 		= NULL ";                
                sql = sql + "\n Where ENDPOINTID 	= '"+proxyId+"'";
                
                System.out.println("Update 1 --->"+sql);
                nResult = stmt.executeUpdate(sql);
//                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                
                sql = " Update TABLE_ROUTESTATE Set ";
                sql = sql + "\n PROTOCOL 		=  "+dao.getProtocol()+", ";
                sql = sql + "\n ENDPOINTCLASS 	=  "+dao.getEndpointClass()+", ";
                sql = sql + "\n ROUTECODE 		= '', ";
                sql = sql + "\n GROUPID 		= '"+dao.getGroupId()+"', ";
                sql = sql + "\n GROUPATTACH 	=  "+dao.getGroupAttach()+", ";
                sql = sql + "\n StateFlag 		=  "+dao.getStateFlag()+", ";
                sql = sql + "\n ServiceFlag 	=  "+dao.getServiceFlag()+", ";
                sql = sql + "\n INMAXCALL 		=  "+dao.getInMaxcall()+", ";
                sql = sql + "\n OUTMAXCALL 		=  "+dao.getOutMaxcall()+", ";
                sql = sql + "\n INALARMCALL 	=  "+dao.getInAlarmCall()+", ";
                sql = sql + "\n OUTALARMCALL 	=  "+dao.getOutAlarmCall()+", ";
                sql = sql + "\n BLOCKCOUNT 		=  "+dao.getBlockCount()+", ";
                if(!"".equals(inStartPosition)) sql = sql + "\n INSTARTPOSITION =  "+dao.getInstartposition()+", ";
                if(!"".equals(inCutPrefix)) 	sql = sql + "\n INCUTPREFIX 	=  "+dao.getIncutPrefix()+", ";
                sql = sql + "\n INADDPREFIX 	= '"+dao.getInaddprefix()+"', ";
                if(!"".equals(outStartPosition)) sql = sql + "\n OUTSTARTPOSITION = "+dao.getOutstartPosition()+", ";
                if(!"".equals(outCutPrefix)) 	sql = sql + "\n OUTCUTPREFIX 	=  "+dao.getOutcutPrefix()+", ";
                sql = sql + "\n OUTADDPREFIX 	= '"+dao.getOutaddPrefix()+"', ";
                sql = sql + "\n INCUTCID 		=  "+dao.getInCutcid()+", ";
                sql = sql + "\n INADDCID 		= '"+dao.getInAddcid()+"', ";
                sql = sql + "\n OUTCUTCID 		=  "+dao.getOutCutcid()+", ";
                sql = sql + "\n OUTADDCID 		= '"+dao.getOutAddcid()+"', ";
//                sql = sql + "\n  "+dao.getMaxdetourcount()+", ";
                sql = sql + "\n CHANNELLIMITMODE = "+dao.getChannelLimitMode()+", "; 
                sql = sql + "\n TOTALMAXCALL 	=  "+dao.getTotalMaxcall()+", ";
                sql = sql + "\n TOTALALARMCALL 	=  "+dao.getTotalAlarmCall()+", ";
                sql = sql + "\n ZONECODE 		= '"+dao.getZoneCode()+"', ";
                sql = sql + "\n RouteName 		= '"+dao.getRouteName()+ "', ";
                sql = sql + "\n INCURRENTCALL 	=  "+dao.getInCurrentCall()+ ", ";
                sql = sql + "\n OUTCURRENTCALL 	=  "+dao.getOutCurrentCall()+ ", ";
                sql = sql + "\n MaxdetourCount 	=  "+dao.getMaxdetourCount()+ " ";
                if (dao.getRouteType() != null) sql = sql + "\n , ROUTETYPE = '" + dao.getRouteType() + "' ";
                if (dao.getIsLocal() >= 0) 		sql = sql + "\n , ISLOCAL	= '" + dao.getIsLocal() + "' ";
                sql = sql + "\n Where ENDPOINTID = '"+proxyId+"'";
                
                System.out.println("Update 2 --->"+sql);
                nResult = stmt.executeUpdate(sql);
//                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
                
                //if(dao.getMaxdetourCount()>0 && !"".equals(roundAboutStr) && !roundAboutCount.equals(oldRoundAboutStr)){
                if(!"".equals(roundAboutStr)){
	                sql = "DELETE FROM table_detour Where ENDPOINTID = '"+proxyId+"'";
	                System.out.println("Delete 3:"+sql);
	                stmt.executeUpdate(sql);
                    
	                String[] dataStr = StringUtil.getParser(roundAboutStr, "|");
                    
                    for(int k=0;k<dataStr.length;k++){
                    	String[] dataStr2 = StringUtil.getParser(dataStr[k], ",");
                    	String  detourendpointid 	= dataStr2[0];
                    	int 	detourprotocol 		= Integer.parseInt(dataStr2[1]);
                    	int		idx					= k+1;
                    	
                        sql = " INSERT INTO table_detour(ENDPOINTID, PROTOCOL, DETOURINDEX, DETOURENDPOINTID, DETOURPROTOCOL) VALUES ( ";
                        sql = sql + "\n '"+proxyId+"', ";
                        sql = sql + "\n  "+dao.getProtocol()+", ";
                        sql = sql + "\n  "+idx+", ";
                        sql = sql + "\n '"+detourendpointid+"', ";
                        sql = sql + "\n  "+detourprotocol+")";

                        System.out.println("insert 4 --->"+sql);
                        try{
                        	nResult = stmt.executeUpdate(sql);
                        }catch(Exception e){
                        	throw new Exception(l.x("[우회 루트 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	
                        }
                        //if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}                        
                    }
                }else if("".equals(roundAboutStr) && !roundAboutCount.equals(oldRoundAboutStr)){
	                sql = "DELETE FROM table_detour Where ENDPOINTID = '"+proxyId+"'";
	                System.out.println("Delete 3:"+sql);
	                stmt.executeUpdate(sql);
                    
	                String[] dataStr = StringUtil.getParser(roundAboutStr, "|");
                    
                    for(int k=0;k<dataStr.length;k++){
                    	String[] dataStr2 = StringUtil.getParser(dataStr[k], ",");
                    	String  detourendpointid 	= dataStr2[0];
                    	int 	detourprotocol 		= Integer.parseInt(dataStr2[1]);
                    	int		idx					= k+1;
                    	
                        sql = " INSERT INTO table_detour(ENDPOINTID, PROTOCOL, DETOURINDEX, DETOURENDPOINTID, DETOURPROTOCOL) VALUES ( ";
                        sql = sql + "\n '"+proxyId+"', ";
                        sql = sql + "\n  "+dao.getProtocol()+", ";
                        sql = sql + "\n  "+idx+", ";
                        sql = sql + "\n '"+detourendpointid+"', ";
                        sql = sql + "\n  "+detourprotocol+")";

                        System.out.println("insert 4 --->"+sql);
                        try{
                        	nResult = stmt.executeUpdate(sql);
                        }catch(Exception e){
                        	throw new Exception(l.x("[우회 루트 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	
                        }
                        //if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+dao.getEndpointid()+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}                        
                    }                	
                }else if("0".equals(roundAboutCheck)){
	                sql = "DELETE FROM table_detour Where ENDPOINTID = '"+proxyId+"'";
	                System.out.println("Delete 4:"+sql);
	                stmt.executeUpdate(sql);
                }
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }
    
    public int delete(DataStatement stmt, String endpointId) {
    	ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
                
            	sql = "\n Delete From table_neighborproxy Where endpointid = '" + endpointId + "' ";                
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+endpointId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                sql = "\n Delete From table_routestate Where endpointid = '" + endpointId + "' ";                
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+endpointId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                sql = "\n Delete From table_routeservice Where endpointid = '" + endpointId + "' ";                
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+endpointId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                sql = "\n Delete From table_detour Where endpointid = '" + endpointId + "' ";                
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+endpointId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
                
                
                // 장애시 백업(이원화) 추가 ---------------------------------------------------------
	            int 	cnt 	= 0;
            	sql  = " SELECT count(*) FROM table_routegroup WHERE endpointid = '" + endpointId +"' and routegroupid = 'redundancy' ";
                rs = stmt.executeQuery(sql);
				if (rs.next()){ 
					cnt = Integer.parseInt(rs.getString(1));
				}
				rs.close();
                if (rs != null)	rs.close();
            	
                if (cnt > 0){
					sql = " Delete From table_routegroup WHERE endpointid = '" + endpointId +"' and routegroupid = 'redundancy' "; 
	    			nResult = stmt.executeUpdate(sql);
	    			if (nResult < 0){	throw new Exception(l.x("[RouteGroup 등록] '","[RouteGroup Error] '")+l.x("'RouteGroup 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
	    			
	    			int maxCount 	= getCountIndex(stmt);
	    			if(maxCount == 0){
	    				sql = " update table_routegroupid set huntindex = 0, maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
	    			}else{
	    				sql = " update table_routegroupid set huntindex = 1, maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
	    			}
	                System.out.println("update 0 --->"+sql);
	                nResult = stmt.executeUpdate(sql);
	                if (nResult < 0){	throw new Exception(l.x("[RouteGroupID 수정] '","[Phone Number Error] '")+l.x("RouteGroupID 수정이 실패하였습니다.."," join failed."));	}
                }
                // ------------------------------------------------------------------------------
                
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
            e.printStackTrace();
        }        
        return nResult;
    }    

    public int insertRouteGroup(DataStatement stmt, String routeGroupId) {

        ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        int 		cnt		= 0;
        int 		cnt2	= 0;
        int 		cnt3	= 0;
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
            	
				// table_routegroup 테이블 Pri_CSCF 체크
				sql	="Select count(*) From table_routegroup Where routegroupid = '"+routeGroupId+"' And endpointid = 'Pri_CSCF' ";
				rs = stmt.executeQuery(sql);
				System.out.println("사용 SQL2 : "+sql);
				if (rs.next()){ 
					cnt2 = Integer.parseInt(rs.getString(1));
				}
				rs.close();
				
				if (cnt2 == 0){
					int maxIndex 	= getMaxIndex(stmt);
	                sql = " insert into table_routegroup(routegroupid, routeindex, endpointid, protocol, routerate) ";
	                //sql = sql + "\n values('redundancy', "+ (maxIindex+1) +", 'Pri_CSCF', 2, 0) ";
	                sql = sql + "\n values('redundancy', "+ (maxIndex+1) +", 'Pri_CSCF', 2, "+ maxIndex +") ";		// 20121106 수정 routerate 값이 0부터 1씩 증가함
	                System.out.println("insert 1 --->"+sql);
	                nResult = stmt.executeUpdate(sql);
	                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+routeGroupId+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
				}
				
				// table_routegroup 테이블 Sec_CSCF 체크
				sql	="Select count(*) From table_routegroup Where routegroupid = '"+routeGroupId+"' And endpointid = 'Sec_CSCF' ";
				rs = stmt.executeQuery(sql);
				System.out.println("사용 SQL3 : "+sql);
				if (rs.next()){ 
					cnt3 = Integer.parseInt(rs.getString(1));
				}
				rs.close();
				
				if (cnt3 == 0){
					int maxIndex 	= getMaxIndex(stmt);
					sql = " insert into table_routegroup(routegroupid, routeindex, endpointid, protocol, routerate) ";
	                //sql = sql + "\n values('redundancy', "+ (maxIindex+1) +", 'Sec_CSCF', 2, 0) ";
	                sql = sql + "\n values('redundancy', "+ (maxIndex+1) +", 'Sec_CSCF', 2, "+ maxIndex +") ";		// 20121106 수정 routerate 값이 0부터 1씩 증가함
	                System.out.println("insert 2 --->"+sql);
	                nResult = stmt.executeUpdate(sql);
	                if (nResult < 1){	throw new Exception(l.x("[프락시 번호 오류] 단말에 ","[Phone Number Error]  In the Phone, the Number")+routeGroupId+ l.x(" 프락시 번호 할당이 실패하였습니다."," join failed."));	}
				}
                
				int maxCount 	= getCountIndex(stmt);
                sql = " update table_routegroupid set maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
                System.out.println("update 0 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[RouteGroupID 수정] '","[Phone Number Error] '")+l.x("RouteGroupID 수정이 실패하였습니다.."," join failed."));	}

                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int deleteRouteGroup(DataStatement stmt, String routeGroupId) {
    	ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        int 		cnt		= 0;
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
                
            	sql = " Delete From table_routegroup Where routegroupid = '" + routeGroupId + "' ";                
            	System.out.println("delete 0 --->"+sql);
            	nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+routeGroupId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                
                sql = " Update table_routegroupid Set huntindex = 1 , maxhuntindex = 0 Where routegroupid = '"+routeGroupId+"'";
                System.out.println("update 0 --->"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 0){	throw new Exception(l.x("[프락시 번호 오류] '","[Auth Properties Error] '")+routeGroupId+l.x("'는 프락시 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
            e.printStackTrace();
        }        
        return nResult;
    }    

    public int smsSetUpInsert(DataStatement stmt, String insertStr, String rootCount) {
    	ResultSet 	rs 		= null;
        int 		nResult = 0;
        String 		sql 	= "";
        int 		cnt		= 0;
        
        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();
            	
            	sql = " Delete From table_routeservice Where serviceno = 6051 ";                
            	System.out.println("delete 0 --->"+sql);
            	nResult = stmt.executeUpdate(sql);
            	            		
                if(!"0".equals(rootCount)){	
            		String[] endpoints = StringUtil.getParser(insertStr, "");
            		for (int i = 0; i < endpoints.length; i++) {            			
            			if(endpoints[i].trim().length()==0) continue;
                    	sql = " INSERT INTO Table_routeservice(ENDPOINTID, PROTOCOL, SERVICENO, PRIORITY, USERPARAM, INOUTFLAG ";
                        sql = sql + "\n ) VALUES ( '"+endpoints[i]+"', 2, 6051, 6051, '', 2) ";
                        System.out.println("insert "+i+" --->"+sql);
                        nResult = stmt.executeUpdate(sql);
					}//for            		
            	}            	
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
            e.printStackTrace();
        }        
        return nResult;
    }    

	public int getCountIndex(DataStatement stmt) {
		int iCount = 0 ;
		String sql = "\n SELECT count(*) FROM table_routegroup ";
		sql = sql +  "\n  WHERE routegroupid      = 'redundancy' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) iCount = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return iCount;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return iCount;
    }

	public int getMaxIndex(DataStatement stmt) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(routeindex),0) " ;
		sql = sql +  "\n   FROM table_routegroup ";
		sql = sql +  "\n  WHERE routegroupid = 'redundancy' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }
}