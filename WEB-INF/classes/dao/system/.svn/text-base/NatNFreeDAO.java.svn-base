package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.system.NatNFreeDTO;
import acromate.common.util.StringUtil;
import acromate.*;

public class NatNFreeDAO {

    public NatNFreeDAO() {}
    
    public int insert(DataStatement stmt, NatNFreeDTO natNFreeDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n INSERT INTO table_tr(TrID, TrIP, TrPort, Description, MaxChannel, MinChannel, NormChannel, MaxCall, ";
            	sql = sql + "\n                 	AlarmCall, Currentcall) values(" ;
            	sql = sql + "\n '" + natNFreeDTO.getTrid()     		+ "' , " ;            
            	sql = sql + "\n '" + natNFreeDTO.getTrip()  		+ "' , " ;
            	sql = sql + "\n  " + natNFreeDTO.getTrport()   		+ "  , " ;
            	sql = sql + "\n '" + natNFreeDTO.getDescription()  	+ "' , " ;
            	sql = sql + "\n  " + natNFreeDTO.getMaxchannel()   	+ "  , " ;
            	sql = sql + "\n  " + natNFreeDTO.getMinchannel()   	+ "  , " ;
            	sql = sql + "\n  " + natNFreeDTO.getNormchannel()  	+ "  , " ;
            	sql = sql + "\n  " + natNFreeDTO.getMaxcall()      	+ "  , " ;
            	sql = sql + "\n  " + natNFreeDTO.getAlarmcall()    	+ "  , " ;
            	sql = sql + "\n  " + natNFreeDTO.getCurrentcall()  	+ " " ;
            	sql = sql + ") ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int update(DataStatement stmt, NatNFreeDTO natNFreeDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n UPDATE table_tr Set ";
            	sql = sql + "\n TrIP 		= '" + natNFreeDTO.getTrip()  		+ "' , " ;
            	sql = sql + "\n TrPort 		= " + natNFreeDTO.getTrport()   	+ " , " ;
            	sql = sql + "\n Description = '" + natNFreeDTO.getDescription()  + "' , " ;
            	sql = sql + "\n MaxChannel 	= " + natNFreeDTO.getMaxchannel()   + " , " ;
            	sql = sql + "\n MinChannel 	= " + natNFreeDTO.getMinchannel()   + " , " ;
            	sql = sql + "\n NormChannel = " + natNFreeDTO.getNormchannel()  + " , " ;
            	sql = sql + "\n MaxCall 	= " + natNFreeDTO.getMaxcall()   	+ " , " ;
            	sql = sql + "\n AlarmCall 	= " + natNFreeDTO.getAlarmcall()   	+ " , " ;
            	sql = sql + "\n Currentcall = " + natNFreeDTO.getCurrentcall()  + " " ;
            	sql = sql + "\n WHERE TrID	= '" + natNFreeDTO.getTrid() + "' ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }
  
    public int delete(DataStatement stmt, String trid) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From table_tr Where TrID = '" + trid + "' ";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult;
    }    
}