package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import dto.system.NatNFreeZoneDTO;
import acromate.common.util.StringUtil;
import acromate.*;

public class NatNFreeZoneDAO {

    public NatNFreeZoneDAO() {}
    
    public int insert(DataStatement stmt, NatNFreeZoneDTO natNFreeZoneDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n INSERT INTO table_TrZone(TrID, ZoneCode, ZoneIp) values(" ;
            	sql = sql + "\n '" + natNFreeZoneDTO.getTrid()    	+ "' , " ;            
            	sql = sql + "\n '" + natNFreeZoneDTO.getZonecode()	+ "' , " ;
            	sql = sql + "\n '" + natNFreeZoneDTO.getZoneip()  	+ "'  " ;
            	sql = sql + ") ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }

    public int update(DataStatement stmt, NatNFreeZoneDTO natNFreeZoneDTO) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n UPDATE table_TrZone Set ";
            	sql = sql + "\n ZoneIp = '" + natNFreeZoneDTO.getZoneip()  + "'  " ;
            	sql = sql + "\n WHERE  Trid	= '" + natNFreeZoneDTO.getTrid()  	 + "'" ; 
            	sql = sql + "\n AND ZoneCode= '" + natNFreeZoneDTO.getZonecode() + "' ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult;
    }
  
    public int delete(DataStatement stmt, String trid, String zonecode) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From table_TrZone Where TrID = '" + trid + "' And ZoneCode = '" + zonecode + "' ";
                
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult;
    }    
}