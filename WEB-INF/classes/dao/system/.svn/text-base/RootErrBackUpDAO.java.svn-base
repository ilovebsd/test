package dao.system;

import acromate.*;

import java.io.File;
import java.sql.ResultSet;
import java.util.Vector;
import acromate.common.util.Str;
import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
import acromate.common.util.StringUtil;
import acromate.common.StaticString;
import business.CommonData;
import business.LogHistory;

public class RootErrBackUpDAO {

    public RootErrBackUpDAO() {}   
        
	public int getCountIndex(DataStatement stmt) {
		int iCount = 0 ;
		String sql = "\n SELECT count(*) FROM table_routegroup ";
		sql = sql +  "\n  WHERE routegroupid      = 'redundancy' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) iCount = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return iCount;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return iCount;
    }
    
	public int getMaxIndex(DataStatement stmt) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(routeindex),0) " ;
		sql = sql +  "\n   FROM table_routegroup ";
		sql = sql +  "\n  WHERE routegroupid = 'redundancy' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }
	
    public boolean rootBackUpInsert(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		endpointid 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					endpointid   	= blockStr[k];
		            int 	cnt 	= 0;
		            
	            	sql  = " SELECT count(*) FROM table_routegroup WHERE endpointid = '" + endpointid +"' and routegroupid = 'redundancy' ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt == 0){
						int maxIndex 	= getMaxIndex(statement);
	                	sql = " insert into table_routegroup(routegroupid, routeindex, endpointid, protocol, routerate) "; 
		    			//sql = sql + "  values('redundancy', "+ (maxIndex + 1) +", '" + endpointid + "', 2, 0)";
		    			sql = sql + "  values('redundancy', "+ (maxIndex + 1) +", '" + endpointid + "', 2, "+ maxIndex +") ";		// 20121106 수정 routerate 값이 0부터 1씩 증가함
		    			System.out.println("insert 0 --->"+sql);
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[RouteGroup 등록] '","[RouteGroup Error] '")+l.x("'RouteGroup 등록이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
		    			
		    			
		    			int maxCount 	= getCountIndex(statement);
		                sql = " update table_routegroupid set maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
		                System.out.println("update 0 --->"+sql);
		                nResult = statement.executeUpdate(sql);
		                if (nResult < 0){	throw new Exception(l.x("[RouteGroupID 수정] '","[Phone Number Error] '")+l.x("RouteGroupID 수정이 실패하였습니다.."," join failed."));	}

						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|86|장애시 백업 ("+endpointid+")|1|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

    public boolean rootBackUpDelete(String insertStr, String strIp, String userID){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String    	fileName 	= "";
	        
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			String[] 	blockStr 	= StringUtil.getParser(insertStr, "");
			String		endpointid 		= "";
			
			// ############### LogHistory 처리  ###############
			LogHistory	logHistory 	= new LogHistory();
			// ##############################################

			if(blockStr != null){
				for(int k=0; k < blockStr.length; k++){
					endpointid   	= blockStr[k];
		            int 	cnt 	= 0;
		            
	            	sql  = " SELECT count(*) FROM table_routegroup WHERE endpointid = '" + endpointid +"' and routegroupid = 'redundancy' ";
	        		
	                rs = statement.executeQuery(sql);
					if (rs.next()){ 
						cnt = Integer.parseInt(rs.getString(1));
					}
					rs.close();
	                
	                if (rs != null) 
	                	rs.close();
                	
                    if (cnt > 0){

						sql = " Delete From table_routegroup WHERE endpointid = '" + endpointid +"' and routegroupid = 'redundancy' "; 
		    			nResult = statement.executeUpdate(sql);
		    			if (nResult < 0){	throw new Exception(l.x("[RouteGroup 등록] '","[RouteGroup Error] '")+l.x("'RouteGroup 삭제가 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

		    			
		    			int maxCount 	= getCountIndex(statement);
		    			if(maxCount == 0){
		    				sql = " update table_routegroupid set huntindex = 0, maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
		    			}else{
		    				sql = " update table_routegroupid set huntindex = 1, maxhuntindex = "+ maxCount +" Where routegroupid = 'redundancy'";
		    			}
		                System.out.println("update 0 --->"+sql);
		                nResult = statement.executeUpdate(sql);
		                if (nResult < 0){	throw new Exception(l.x("[RouteGroupID 수정] '","[Phone Number Error] '")+l.x("RouteGroupID 수정이 실패하였습니다.."," join failed."));	}

						// ############### LogHistory 처리  ###############
						int int_result = logHistory.LogHistorySave(userID+"|86|장애시 백업 ("+endpointid+")|2|"+strIp);
						// ##############################################
                    }
				}
			}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }
}
