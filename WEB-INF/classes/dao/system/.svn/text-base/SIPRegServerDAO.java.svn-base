package dao.system;

import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;

import acromate.common.util.WebUtil;
import com.acromate.driver.db.DataStatement;

import dto.system.SIPRegServerDTO;
import acromate.common.util.StringUtil;

// PYK 20090120 ------------
//import dto.ipcs.IpcsDeptDTO;
//import dao.ipcs.IpcsDeptDAO;
//import business.CommonData;
//import acromate.ConnectionManager;
// -------------------------
import acromate.*;

public class SIPRegServerDAO {

    public SIPRegServerDAO() {}
    
    public int insert(DataStatement stmt, SIPRegServerDTO sipRegServerDTO, String goodsName_Type) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {            	
    			// MD5 Hash (IMS용) 관련 추가 (2012.11.12) ==============
    			String userauthpasswd 	= "";
    			String descriptor		= "";
    			
            	if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
    				userauthpasswd 	= makeMD5(sipRegServerDTO.getUserauthpasswd());
    				descriptor		= sipRegServerDTO.getUserauthpasswd();
    			}else{
    				userauthpasswd 	= sipRegServerDTO.getUserauthpasswd();
    			}
            	// ====================================================
    			

            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n INSERT INTO table_sipregserver (subid, serverip, serverport, servertransport, userdomain, ";
                // MD5 Hash (IMS용) 관련 추가 (2012.11.12) ==============
                //sql = sql +  "\n                         	usernumber, userauthid, userauthpasswd, expiretime) ";
            	sql = sql +  "\n                         	usernumber, userauthid, userauthpasswd, descriptor, expiretime) ";
            	// ====================================================
            	sql = sql +  "\n                 	values (" ;
            	sql = sql + "'" + sipRegServerDTO.getSubid()            + "' , " ;            
            	sql = sql + "'" + sipRegServerDTO.getServerip()  		+ "', " ;
            	sql = sql + " " + sipRegServerDTO.getServerport()       + " , " ; 
            	sql = sql + " " + sipRegServerDTO.getServertransport()  + " , " ; 
            	sql = sql + "'" + sipRegServerDTO.getUserdomain()       + "', " ;
            	sql = sql + "'" + sipRegServerDTO.getUsernumber()       + "' , " ; 
            	sql = sql + "'" + sipRegServerDTO.getUserauthid()       + "' , " ; 
            	// MD5 Hash (IMS용) 관련 추가 (2012.11.12) ==============
            	//sql = sql + "'" + sipRegServerDTO.getUserauthpasswd() 	+ "', " ;
            	sql = sql + "'" + userauthpasswd 	+ "', " ;
            	sql = sql + "'" + descriptor 	+ "', " ;
            	// ====================================================
            	sql = sql + " " + sipRegServerDTO.getExpiretime()       + " " ;
            	sql = sql + ") ";
                System.out.println("insert--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("입력 성공");
                else
                    System.out.println("입력 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult ;
    }

    public int update(DataStatement stmt, SIPRegServerDTO sipRegServerDTO, String goodsName_Type) {

        ResultSet rs = null;
        int nResult = 0;

        try {            
            if (stmt != null) {
    			// MD5 Hash (IMS용) 관련 추가 (2012.11.12) ==============
    			String userauthpasswd 	= "";
    			String descriptor		= "";
    			
            	if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
    				userauthpasswd 	= makeMD5(sipRegServerDTO.getUserauthpasswd());
    				descriptor		= sipRegServerDTO.getUserauthpasswd();
    			}else{
    				userauthpasswd 	= sipRegServerDTO.getUserauthpasswd();
    			}
            	// ====================================================
            	
            	// Transaction 시작
            	stmt.stxTransaction();            	
            	
                String sql = "\n UPDATE table_sipregserver Set ";
            	if(!"Pri_CSCF".equals(sipRegServerDTO.getSubid())&&!"Sec_CSCF".equals(sipRegServerDTO.getSubid())){
            		sql = sql + "\n serverip 		= '" + sipRegServerDTO.getServerip()  		+ "', " ;
            	}
            	sql = sql + "\n serverport 		=  " + sipRegServerDTO.getServerport()      + " , " ; 
            	sql = sql + "\n servertransport =  " + sipRegServerDTO.getServertransport() + " , " ; 
            	sql = sql + "\n userdomain 		= '" + sipRegServerDTO.getUserdomain()      + "', " ;
            	sql = sql + "\n usernumber 		= '" + sipRegServerDTO.getUsernumber()      + "' , " ; 
            	sql = sql + "\n userauthid 		= '" + sipRegServerDTO.getUserauthid()      + "' , " ;
            	// MD5 Hash (IMS용) 관련 추가 (2012.11.12) ==============
            	//sql = sql + "\n userauthpasswd 	= '" + sipRegServerDTO.getUserauthpasswd() 	+ "', " ;
            	sql = sql + "\n userauthpasswd 	= '" + userauthpasswd 	+ "', " ;
            	sql = sql + "\n descriptor 	= '" + descriptor 	+ "', " ;
            	// ===================================================
            	sql = sql + "\n expiretime 		=  " + sipRegServerDTO.getExpiretime()      + " " ;
            	sql = sql + "\n WHERE subid = '" + sipRegServerDTO.getSubid() + "' ";
                System.out.println("UPDATE--->"+sql);
                                        
                nResult = stmt.executeUpdate(sql);
                if (nResult >= 1)
                    System.out.println("수정 성공");
                else
                    System.out.println("수정 실패");
                
                // Transaction 종료
                stmt.endTransaction(true);			// commit 처리
                // ======================================================================
                
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        }
        
        return nResult ;
    }
    
    public int delete(DataStatement stmt, String subId) {
    	ResultSet rs = null;
        int nResult = 0;
        try {            
            if (stmt != null) {
                String sql = "\n Delete From table_sipregserver Where subid = '" + subId+ "' ";
                
                nResult = stmt.executeUpdate(sql);
                //System.out.println("삭제 SQL : "+sql);
                if (nResult >= 1) {
                    System.out.println("삭제 성공"); 
                }
                else
                    System.out.println("삭제 실패");
            } else
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        } catch (Exception e) {
            e.printStackTrace();
        }        
        return nResult ;
    }
    
    public static String makeMD5(String password) {
        StringBuffer md5 = new StringBuffer();
        StringBuilder strSum = new StringBuilder();
        strSum.append(password);

        try {
            byte[] digest = java.security.MessageDigest.getInstance("MD5").digest(strSum.toString().getBytes());

            for (int i = 0; i < digest.length; i++) {
                md5.append(Integer.toString((digest[i] & 0xf0) >> 4, 16));
                md5.append(Integer.toString(digest[i] & 0x0f, 16));
            }
        } catch(java.security.NoSuchAlgorithmException ne) {
            ne.printStackTrace();
        }

        return md5.toString().toUpperCase();
    }

}