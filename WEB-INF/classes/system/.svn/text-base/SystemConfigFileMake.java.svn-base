package system;

import java.sql.ResultSet ;
//import java.util.ArrayList ;
//import java.util.List ;
import java.util.*;
import acromate.*;
//import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement;
import acromate.ConnectionManager;
import acromate.common.util.StringUtil;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import business.CommonData;
		
import dao.system.RouteMonitorDAO;
import dto.ipcs.IpcsUserDTO;
import dto.system.SystemConfigDTO;
import system.SystemConfigSet;

import dto.system.SystemDefaultDTO;
import dto.system.GatewayConfigDTO;

//import framework.sql.AjaxRunner; 
import framework.log.LogSql;
//import framework.tray.ResultSetTray;
//import framework.tray.Tray;
//import framework.config.ConfigFactory;
//import framework.config.Config;
//import framework.exception.PropNotFoundException;
//import framework.util.DateUtil;
import framework.Shell.LinuxShell;

public class SystemConfigFileMake{
	private LogSql 			logsql 			= new LogSql();
	private SystemConfigSet systemConfig 	= new SystemConfigSet();
	private LinuxShell 		linuxShell 		= new LinuxShell();
	private String 			osType 			= "";
	private String 			filePath 		= "";
	
	public int makeFile(SystemConfigDTO systemConfigDTO) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        // 서버로부터 DataStatement 객체를 할당
        DataStatement 	stmt = null;        
        try {
        	stmt 			= ConnectionManager.allocStatement("SSW");
        	CommonData		commonData	= new CommonData();
        	String 			domainid 	= commonData.getDomain(stmt);			// 도메인ID 조회
        	String 			domain		= "";
        	String			sql			= "";
        	String			hostname	= "";
        	
        	if("".equals(domainid)){
        		domainid 	= systemConfigDTO.getWanId();
        		domain 		= domainid + ".callbox.kt.com";
        		hostname 	= domain;
        		/*
        		sql = "INSERT INTO table_domain(domainid, domainlevel, parentdomain, domaindesc) VALUES('"+domain+"', 0, '', '"+domainid+"')";
    	        int result = 0;
    	        System.out.println("0:"+sql);
    	        result = stmt.executeUpdate(sql);
    	        if (result < 1){
    	        	throw new Exception(l.x("[도메인 등록 오류] '","[Domain ID Error] '") + l.x("' 도메인 등록이 실패하였습니다.","' Domain ID Insertion failed."));	
    	        }
    	        
                sql   = "Update nasa_trunk_set set ssw_domain_name = '" + domain + "' ";
                System.out.println("13:"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

                sql   = "Update table_dept set deptname = '" + domain + "' Where deptid = 1 ";
                System.out.println("13:"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[부서 테이블 도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 부서 테이블 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                */
        	}else{
        		hostname = domainid;
        	}
        	
        	//System.out.println("################# CallBox 도메인 : "+hostname);
        	
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/rc.conf";		// 테스트
            }else{
            	filePath = "/etc/rc.conf";
            }
            
    		List 				rcList 			= systemConfig.getRcConfigList();		// 데이타 조회
			//logsql.open("D:/etc/rc.conf");
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				// 게이트웨이
				if(rcTemp.length()>=13){			
					if("defaultrouter".equals(rcTemp.substring(0,13))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+systemConfigDTO.getWanGateway()+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}

				/*
				// hostname
				if(rcTemp.length()>=8){			
					if("hostname".equals(rcTemp.substring(0,8))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+hostname+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}
				*/
				
				// IP주소, 서비넷마스크
				if(rcTemp.length()>=9){
					// 외부 네트워크
					String netType1 = "ifconfig_"+systemConfigDTO.getWanName();
					if(netType1.equals(rcTemp.substring(0,9+systemConfigDTO.getWanName().length()))){
						nTemp = rcTemp.indexOf("=");
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getWanIp()+"  netmask "+systemConfigDTO.getWanMask()+"$";
						rcTemp = temp2.replace('$', '"');
					}						
					// 내부 네트워크
					String netType2 = "ifconfig_"+systemConfigDTO.getLanName();
					if(netType2.equals(rcTemp.substring(0,9+systemConfigDTO.getLanName().length()))){
						nTemp = rcTemp.indexOf("=");				
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getLanIp()+"  netmask "+systemConfigDTO.getLanMask()+"$";
						rcTemp = temp2.replace('$', '"');						
					}					
				}					
				rcString.append(rcTemp+"\n");				
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                

			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/resolv.conf";		// 테스트
            }else{
            	filePath = "/etc/resolv.conf";
            }

    		StringBuffer 	dnsString 	= new StringBuffer();
        	List 			dnsList 	= systemConfig.getDNSList();		// 데이타 조회
			//logsql.open("D:/etc/resolv.conf");
			logsql.open(filePath);
			
			Boolean dns 	= true;
			String	dnsTemp = "";
			
			for(int i=0;i<dnsList.size();i++){
				dnsTemp = (String)dnsList.get(i);
				
				// DNS 서버
				if(dnsTemp.length()>=10){			
					if("nameserver".equals(dnsTemp.substring(0,10))){
						if(dns){
							dnsTemp = "nameserver "+systemConfigDTO.getWanDns();
							dns = false;
						}
					}
				}
				dnsString.append(dnsTemp+"\n");				
			}
			logsql.write("",dnsString.toString());			
			logsql.close();				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			// 내부 네트워크 환경
			StringBuffer 	dhcpChkString 	= new StringBuffer();

			if("2".equals(systemConfigDTO.getSelectLan())){
				// DHCP 사용안함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if(!"#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					//logsql.open("D:/etc/dhcpd.sh");
					logsql.open(filePath);
					
					dhcpTemp = "#"+lTemp;
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}else{
				// DHCP 사용함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if("#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					logsql.open(filePath);
					
					dhcpTemp = lTemp.replace("#", "");
					//dhcpTemp = "#"+lTemp;
					
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}
			
			
			StringBuffer 	dhcpString 	= new StringBuffer();
			// DHCP 사용함
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/dhcpd.conf";
            }

			List 				dhcpList 		= systemConfig.getLanConfigList();		// 데이타 조회
			String				dhcpStr			= "";
			//logsql.open("D:/etc/dhcpd.conf");
			logsql.open(filePath);
			
			for(int i=0;i<dhcpList.size();i++){
				dhcpStr = (String)dhcpList.get(i);		
				
				if(dhcpStr.length()>=18){
					// 내부 서브넷마스크
					if("option subnet-mask".equals(dhcpStr.substring(0,18))){
						dhcpStr = "option subnet-mask "+systemConfigDTO.getLanMask()+";";
					}
					// 내부 DNS서버
					if("option domain-name".equals(dhcpStr.substring(0,18))&&!"option domain-name-servers".equals(dhcpStr.substring(0,26))){
						dhcpStr = "option domain-name "+"$"+systemConfigDTO.getLanDns()+"$";
						dhcpStr = dhcpStr.replace('$', '"')+";";
					}
				}
				// 내부 DNS서버
				if(dhcpStr.length()>=26){
					if("option domain-name-servers".equals(dhcpStr.substring(0,26))){
						dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanDns()+";";
					}
				}
				// 내부 IP주소 갱신 주기
				if(dhcpStr.length()>=14){
					if("max-lease-time".equals(dhcpStr.substring(0,14))){
						dhcpStr = "max-lease-time "+systemConfigDTO.getTimeCycle()+";";
					}
				}
				
				if(dhcpStr.length()>=6){
					// 내부 서브넷마스크
					if("subnet".equals(dhcpStr.substring(0,6))){
						/*
						String temp1 = dhcpStr.substring(6, dhcpStr.length());
						String subnetTemp = "";
							
					   	StringTokenizer tk = new StringTokenizer(temp1, " "); 		// 현재 분리단어는 " " 공백 스페이스로 나누어짐
					   	String token;
					   	int t=0;
					   	while ( tk.hasMoreTokens() ) {
					    	token = tk.nextToken();
					    	if(t==0){
					    		subnetTemp = token;									
					    	}
					    	t++;
					    }
					   	dhcpStr = "subnet "+subnetTemp+" netmask "+systemConfigDTO.getLanMask()+" {";
					   	*/
						
						String[]	tempIp 	= systemConfigDTO.getLanIp().split("[.]");
						dhcpStr = "subnet "+tempIp[0]+"."+tempIp[1]+"."+tempIp[2]+".0"+" netmask "+systemConfigDTO.getLanMask()+" {";
					}
					// 내부 IP주소 범위
					if("range".equals(dhcpStr.substring(0,6).trim())){
						dhcpStr = "range "+systemConfigDTO.getStartIp()+" "+systemConfigDTO.getEndIp()+";";	// IP 시작
					}						
				}
				// 내부 IP주소
				if(dhcpStr.length()>=24){
					if("option tftp-server-name".equals(dhcpStr.substring(0,24).trim())){
						dhcpStr = "option tftp-server-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
						dhcpStr = dhcpStr.replace('$', '"');
					}
				}
				// 내부 IP주소
				if(dhcpStr.length()>=15){
					if("option routers".equals(dhcpStr.substring(0,15).trim())){
						dhcpStr = "option routers "+systemConfigDTO.getLanIp()+";";
					}
				}
				
				dhcpString.append(dhcpStr+"\n");
			}
			
			logsql.write("",dhcpString.toString());			
			logsql.close();                				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			/*
			// hosts 파일변경    ////////////////////////////////////////////////////////////////////////////////////
			osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/hosts";		// 테스트
            }else{
            	filePath = "/etc/hosts";
            }

    		StringBuffer 	hostsString 	= new StringBuffer();
			logsql.open(filePath);
			
			String 		tempDomain = "";
			String 		tempHosts  = "";
			String 		tempHosts1 = "";
			String 		tempHosts2 = "";
			String 		tempHosts3 = "";
			String 		tempHosts4 = "";
			String[]	tempHostsId;
			
			tempHostsId = hostname.split("[.]");
			tempHosts 	= tempHostsId[0];
			tempDomain	= tempHostsId[1]+"."+tempHostsId[2]+"."+tempHostsId[3];
			
			tempHosts1 = "::1"+"\t"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts1+"\n");
			tempHosts2 = "127.0.0.1"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts2+"\n");
			tempHosts3 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+" "+tempHosts;
			hostsString.append(tempHosts3+"\n");
			tempHosts4 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+".";
			hostsString.append(tempHosts4+"\n");
			
			logsql.write("",hostsString.toString());			
			logsql.close();
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			*/
			
			makeEMSFile(systemConfigDTO);			// WAR파일 만들때 확인
			dbIpUpdate(systemConfigDTO);			// WAR파일 만들때 확인
			
        	nResult = 1;
			
        	// 유닉스 장비이면 리브팅
        	String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/acroBackup/acro_reboot.sh");
        	if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }
	
	public void dbIpUpdate(SystemConfigDTO systemConfigDTO) {
    	DataStatement 	statement = null;
    	try {
	    	String 		newWanIp	= systemConfigDTO.getWanIp();			// 변경전 IP
	    	String 		oldWanIp	= systemConfigDTO.getOldWanIp();		// 변경후 IP
	    	String 		newLanIp	= systemConfigDTO.getLanIp();			// 변경전 IP
	    	String 		oldLanIp	= systemConfigDTO.getOldLanIp();		// 변경후 IP
	    	String[]	newTmp 		= StringUtil.getParser(newLanIp, ".");
	    	String[]	oldTmp 		= StringUtil.getParser(oldLanIp, ".");
	    	String		newZoneLan	= "";
	    	String		oldZoneLan	= "";
	    	String		tmpZoneLan	= "";
	    	String		newStartIp	= "";
	    	String		newEndIp	= "";
	    			
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int 		nResult 	= 0;
	    	
	    	//for(int i=0; i < newTmp.length; i++){
	    	for(int i=0; i < 3; i++){
	    		if(newTmp[i].length()==3){
	    			tmpZoneLan = newTmp[i];
	    		}else if(newTmp[i].length()==2){
	    			tmpZoneLan = "0"+newTmp[i];
	    		}else if(newTmp[i].length()==1){
	    			tmpZoneLan = "00"+newTmp[i];
	    		}
	    		
	    		//if(i == newTmp.length-1){
	    		//	newZoneLan = newZoneLan+tmpZoneLan;
	    		//}else{
	    		//	newZoneLan = newZoneLan+tmpZoneLan+".";
	    		//}	    		
	    		newZoneLan = newZoneLan+tmpZoneLan+".";
	    		
	    	}
	    	newStartIp	= newZoneLan+"001";
	    	newEndIp	= newZoneLan+"254";
	    	
	    	//for(int i=0; i < oldTmp.length; i++){
	    	for(int i=0; i < 3; i++){
	    		if(oldTmp[i].length()==3){
	    			tmpZoneLan = oldTmp[i];
	    		}else if(oldTmp[i].length()==2){
	    			tmpZoneLan = "0"+oldTmp[i];
	    		}else if(oldTmp[i].length()==1){
	    			tmpZoneLan = "00"+oldTmp[i];
	    		}
	    		
	    		//if(i == oldTmp.length-1){
	    		//	oldZoneLan = oldZoneLan+tmpZoneLan;
	    		//}else{
	    		//	oldZoneLan = oldZoneLan+tmpZoneLan+".";
	    		//}
	    		oldZoneLan = oldZoneLan+tmpZoneLan+".";
	    		
	    	}
	    	oldZoneLan = oldZoneLan + "001";
	    	
//	    	System.out.println("############### newZoneLan :"+newZoneLan);
//	    	System.out.println("############### oldZoneLan :"+oldZoneLan);
	    	
//	    	System.out.println("newWanIp :"+newWanIp);
//	    	System.out.println("oldWanIp :"+oldWanIp);
	    	

	    	// 할당받은 DataStatement 객체
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	
	    	// Table_tr 테이블 IP변경 
            sql   = "update table_tr set trip = '" + newWanIp + "' where trip = '" + oldWanIp  + "' ";            
            //System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[Table_tr IP변경 오류] '","[Auth Properties Error] '")+l.x("'Table_tr IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// table_trzone 테이블 IP변경 
            sql   = "update table_trzone set zoneip = '" + newWanIp + "' where zoneip = '" + oldWanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            sql   = "update table_trzone set zoneip = '" + newLanIp + "' where zoneip = '" + oldLanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_sbc_set 테이블 IP변경 
            sql   = "update ncr_sbc_set set sbc_ip = '" + newWanIp + "' where sbc_ip = '" + oldWanIp  + "' ";            
            //System.out.println("3:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_sbc_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_sbc_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_set 테이블 IP변경 
            sql   = "update ncr_set set " +
            		"server = '" + newWanIp + "', " +
            		"myip 	= '" + newWanIp + "', " +
            		"linkip = '" + newWanIp + "' " +
            		"where server = '" + oldWanIp  + "' ";            
            //System.out.println("4:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_pbx_set 테이블 IP변경 
            sql   = "update ncr_pbx_set set pbx_ip = '" + newWanIp + "' where pbx_ip = '" + oldWanIp  + "' ";            
            //System.out.println("5-1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(1)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            sql   = "update ncr_pbx_set set pbx_ip = '" + newLanIp + "' where pbx_ip = '" + oldLanIp  + "' ";            
            //System.out.println("5-2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(2)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
	    	// nasa_trunk_set 테이블 IP변경 
            sql   = "update nasa_trunk_set set " +
            		"server_ip 		 = '" + newWanIp + "', " +
            		"ssw_server_ip 	 = '" + newWanIp + "' ";
            //System.out.println("6:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_trunk_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_trunk_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_system_info 테이블 IP변경 
            sql   = "update nasa_system_info set " +
            		"ns_server_ip 		= '" + newWanIp + "', " +
            		"ns_mw_ip 			= '" + newWanIp + "', " +
            		"ns_dup_ip 			= '" + newWanIp + "', " +
            		"outbound_proxy		= '" + newWanIp + "', " +
            		"outbound_domain	= '" + newWanIp + "' " +
            		"where ns_server_ip = '" + oldWanIp + "' ";            
            //System.out.println("7:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_system_info IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_system_info IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_neighborproxy 테이블 IP변경 
            sql   = "update table_neighborproxy set " +
            		"signaladdress 		= '" + newWanIp + "', " +
            		"inviaaddress 		= '" + newWanIp + "', " +
            		"outfromdomainname 	= '" + newWanIp + "', " +
            		"outtodomainname	= '" + newWanIp + "' " +
            		"where endpointid 	= 'MS' ";            
            //System.out.println("8:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_neighborproxy IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_neighborproxy IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// ncr_backupconfig 테이블 변경 
            sql   = "update ncr_backupconfig set serverip = '" + newWanIp + "' where serverip = '" + oldWanIp  + "' ";            
            //System.out.println("9:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_backupconfig IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_backupconfig IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_systemupdate 테이블 변경 
            sql   = "update nasa_systemupdate set su_check = 'Y' ";
            //System.out.println("10:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_systemupdate 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_zoneiprange 테이블 변경 
            //sql   = "update table_zoneiprange set startip = '" + newZoneLan + "' where startip = '" + oldZoneLan  + "' ";
            sql   = "update table_zoneiprange set startip = '" + newStartIp + "', endip = '" + newEndIp + "' where startip = '" + oldZoneLan  + "' ";
            //System.out.println("11:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_zoneiprange 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            statement.endTransaction(true);			// commit 처리
//	        returnVal = true;

        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
//            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
		
	}
	
	public void makeEMSFile(SystemConfigDTO systemConfigDTO) {
    	
		try { 							
			// 고정 IP 주소 인 경우
			LogSql 			logsql2 		= new LogSql();
			SystemConfigSet systemConfig 	= new SystemConfigSet();
			String 			osType2 		= "";
			String 			filePath2 		= "";
			int				nTemp			= 0;

			// across.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }

    		StringBuffer 	acrossString 	= new StringBuffer();
        	List 			acrossList 		= systemConfig.getAcrossCfg();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrossTemp = "";								
			for(int i=0;i<acrossList.size();i++){
				acrossTemp = (String)acrossList.get(i);										
				//acrossTemp = acrossTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrossString.append(acrossTemp+"\n");	
				
				if(acrossTemp.length()>=50){
					if("publicAddress.address.sip.hostport.host.ip4Address".equals(acrossTemp.substring(0,50))){
						acrossTemp = acrossTemp.substring(0, 50)+" = "+systemConfigDTO.getWanIp();
					}
				}
				
				if(acrossTemp.length()>=58){
					if("channelAddress.connectionWaitingAddress[0].host.ip4Address".equals(acrossTemp.substring(0,58))){
						acrossTemp = acrossTemp.substring(0, 58)+" = "+systemConfigDTO.getWanIp();
					}
				}

				if(acrossTemp.length()>=48){
					if("channelAddress.unicastAddress[0].host.ip4Address".equals(acrossTemp.substring(0,48))){
						acrossTemp = acrossTemp.substring(0, 48)+" = "+systemConfigDTO.getWanIp();
					}
				}
				
				acrossString.append(acrossTemp+"\n");
				
			}
			logsql2.write("",acrossString.toString());			
			logsql2.close();
            if("uix".equals(osType2)) linuxShell.runShell("chown ipcs /data/acromate_home/ssw/cfg/acrossw.cfg");
			
			
			// acrobk.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrobk.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acrobk/cfg/acrobk.cfg";
            }

    		StringBuffer 	acrobkString 	= new StringBuffer();
        	List 			acrobkList 	= systemConfig.getAcrobkIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrobkTemp = "";								
			for(int i=0;i<acrobkList.size();i++){
				acrobkTemp = (String)acrobkList.get(i);															
				//acrobkTemp = acrobkTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrobkString.append(acrobkTemp+"\n");
				
				if(acrobkTemp.length()>=5){			
					if("MY_IP".equals(acrobkTemp.substring(0,5))){
						nTemp = acrobkTemp.indexOf("=");
						acrobkTemp = acrobkTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
					}
				}					
				acrobkString.append(acrobkTemp+"\n");
				
			}
			logsql2.write("",acrobkString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acrobk/cfg/acrobk.cfg");
			
			
			// acrorc.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrorc.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acrorc/cfg/acrorc.cfg";
            }

    		StringBuffer 	acrorcString 	= new StringBuffer();
        	List 			acrorcList 	= systemConfig.getAcrorcIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrorcTemp = "";								
			for(int i=0;i<acrorcList.size();i++){
				acrorcTemp = (String)acrorcList.get(i);										
				//acrorcTemp = acrorcTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrorcString.append(acrorcTemp+"\n");
				
				if(acrorcTemp.length()>=5){			
					if("MY_IP".equals(acrorcTemp.substring(0,5))){
						nTemp = acrorcTemp.indexOf("=");
						acrorcTemp = acrorcTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
					}
				}					
				acrorcString.append(acrorcTemp+"\n");
				
			}
			logsql2.write("",acrorcString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acrorc/cfg/acrorc.cfg");
			
			
			// acroms.cfg 파일변경 ####################################
/*
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acroms.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acroms/cfg/acroms.cfg";
            }

    		StringBuffer 	acromsString 	= new StringBuffer();
        	List 			acromsList 	= systemConfig.getAcromsIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acromsTemp = "";								
			for(int i=0;i<acromsList.size();i++){
				acromsTemp = (String)acromsList.get(i);										
				//acromsTemp = acromsTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acromsString.append(acromsTemp+"\n");
				
				if(acromsTemp.length()>=5){			
					if("MY_IP".equals(acromsTemp.substring(0,5))){
						nTemp = acromsTemp.indexOf("=");
						acromsTemp = acromsTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
					}
				}					
				acromsString.append(acromsTemp+"\n");
				
			}
			logsql2.write("",acromsString.toString());			
			logsql2.close();				
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acroms/cfg/acroms.cfg");
*/			

			
			// ems.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/ems.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/ems/cfg/ems.cfg";
            }

    		StringBuffer 	emsString 	= new StringBuffer();
        	List 			emsList 	= systemConfig.getEmsCfg();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	emsTemp = "";								
			for(int i=0;i<emsList.size();i++){
				emsTemp = (String)emsList.get(i);										
				//emsTemp = emsTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//emsString.append(emsTemp+"\n");
				
				if(emsTemp.length()>=15){			
					if("defaultHostAddr".equals(emsTemp.substring(0,15))){
						nTemp = emsTemp.indexOf("=");
						emsTemp = emsTemp.substring(0, nTemp+2)+systemConfigDTO.getWanIp();
					}
				}
				emsString.append(emsTemp+"\n");
			}
			logsql2.write("",emsString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("chown ipcs /data/acromate_home/ems/cfg/ems.cfg");
			
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	e.printStackTrace();
        }
	        	        	        	        
	}
	
	
	public void dbDefault(SystemDefaultDTO systemDefaultDTO) {
    	DataStatement 	statement = null;
    	try {
	    	String 		newWanIp	= systemDefaultDTO.getWanIp();			// 변경전 IP
	    	String 		oldWanIp	= systemDefaultDTO.getOldWanIp();		// 최초 Wan IP
	    	String 		newLanIp	= systemDefaultDTO.getLanIp();			// 변경전 IP
	    	String 		oldLanIp	= systemDefaultDTO.getOldLanIp();		// 최초 Lan IP
	    	String[]	newTmp 		= StringUtil.getParser(newLanIp, ".");
	    	String[]	oldTmp 		= StringUtil.getParser(oldLanIp, ".");
	    	String		newZoneLan	= "";
	    	String		oldZoneLan	= "";
	    	String		tmpZoneLan	= "";
	    	String		newStartIp	= "";
	    	String		newEndIp	= "";
	    	
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int 		nResult 	= 0;

	    	for(int i=0; i < 3; i++){
	    		if(newTmp[i].length()==3){
	    			tmpZoneLan = newTmp[i];
	    		}else if(newTmp[i].length()==2){
	    			tmpZoneLan = "0"+newTmp[i];
	    		}else if(newTmp[i].length()==1){
	    			tmpZoneLan = "00"+newTmp[i];
	    		}	    		
	    		newZoneLan = newZoneLan+tmpZoneLan+".";
	    		
	    	}
	    	newStartIp	= newZoneLan+"001";
	    	newEndIp	= newZoneLan+"254";
	    	
//	    	for(int i=0; i < newTmp.length; i++){
//	    		if(newTmp[i].length()==3){
//	    			tmpZoneLan = newTmp[i];
//	    		}else if(newTmp[i].length()==2){
//	    			tmpZoneLan = "0"+newTmp[i];
//	    		}else if(newTmp[i].length()==1){
//	    			tmpZoneLan = "00"+newTmp[i];
//	    		}
//	    		if(i == newTmp.length-1){
//	    			newZoneLan = newZoneLan+tmpZoneLan;
//	    		}else{
//	    			newZoneLan = newZoneLan+tmpZoneLan+".";
//	    		}
//	    	}

//	    	for(int i=0; i < oldTmp.length; i++){
//	    		if(oldTmp[i].length()==3){
//	    			tmpZoneLan = oldTmp[i];
//	    		}else if(oldTmp[i].length()==2){
//	    			tmpZoneLan = "0"+oldTmp[i];
//	    		}else if(oldTmp[i].length()==1){
//	    			tmpZoneLan = "00"+oldTmp[i];
//	    		}
	    		
//	    		if(i == oldTmp.length-1){
//	    			oldZoneLan = oldZoneLan+tmpZoneLan;
//	    		}else{
//	    			oldZoneLan = oldZoneLan+tmpZoneLan+".";
//	    		}
//	    	}

	    	// 할당받은 DataStatement 객체
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	
	    	// Table_tr 테이블 IP변경 
            sql   = "update table_tr set trip = '" + newWanIp + "' where trip = '" + oldWanIp  + "' ";            
            //System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[Table_tr IP변경 오류] '","[Auth Properties Error] '")+l.x("'Table_tr IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// table_trzone 테이블 IP변경 
            sql   = "update table_trzone set zoneip = '" + newWanIp + "' where zoneip = '" + oldWanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            sql   = "update table_trzone set zoneip = '" + newLanIp + "' where zoneip = '" + oldLanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_sbc_set 테이블 IP변경 
            sql   = "update ncr_sbc_set set sbc_ip = '" + newWanIp + "' where sbc_ip = '" + oldWanIp  + "' ";            
            //System.out.println("3:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_sbc_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_sbc_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_set 테이블 IP변경 
            sql   = "update ncr_set set " +
            		"server = '" + newWanIp + "', " +
            		"myip 	= '" + newWanIp + "', " +
            		"linkip = '" + newWanIp + "' " +
            		"where server = '" + oldWanIp  + "' ";            
            //System.out.println("4:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_pbx_set 테이블 IP변경 
            sql   = "update ncr_pbx_set set pbx_ip = '" + newWanIp + "' where pbx_ip = '" + oldWanIp  + "' ";            
            //System.out.println("5-1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(1)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            sql   = "update ncr_pbx_set set pbx_ip = '" + newLanIp + "' where pbx_ip = '" + oldLanIp  + "' ";            
            //System.out.println("5-2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(2)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
	    	// nasa_trunk_set 테이블 IP변경 
//            sql   = "update nasa_trunk_set set " +
//    				"server_ip 		 = '" + newLanIp + "', " +
//    				"ssw_server_ip 	 = '" + newLanIp + "' ";            
            //System.out.println("6:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[nasa_trunk_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_trunk_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_system_info 테이블 IP변경 
//            sql   = "update nasa_system_info set " +
//    				"ns_server_ip 		= '" + newLanIp + "', " +
//    				"ns_mw_ip 			= '" + newLanIp + "', " +
//    				"ns_dup_ip 			= '" + newLanIp + "', " +
//    				"outbound_proxy		= '" + newLanIp + "', " +
//    				"outbound_domain	= '" + newLanIp + "' " ;
    				//"where ns_server_ip = '" + oldLanIp + "' ";
            //System.out.println("7:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[nasa_system_info IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_system_info IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_neighborproxy 테이블 IP변경 
//            sql   = "update table_neighborproxy set " +
//    				"signaladdress 		= '" + newLanIp + "', " +
//    				"inviaaddress 		= '" + newLanIp + "', " +
//    				"outfromdomainname 	= '" + newLanIp + "', " +
//    				"outtodomainname	= '" + newLanIp + "' " +
//    				"where endpointid 	= 'MS' ";
            //System.out.println("8:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[table_neighborproxy IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_neighborproxy IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// ncr_backupconfig 테이블 변경 
            sql   = "update ncr_backupconfig set serverip = '" + newWanIp + "' where serverip = '" + oldWanIp  + "' ";            
            //System.out.println("9:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_backupconfig IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_backupconfig IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_systemupdate 테이블 변경 
            sql   = "update nasa_systemupdate set su_check = 'Y' ";
            //System.out.println("10:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_systemupdate 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_zoneiprange 테이블 변경 
            //sql   = "update table_zoneiprange set startip = '" + newZoneLan + "' where startip = '" + oldZoneLan  + "' ";
            sql   = "update table_zoneiprange set startip = '" + newStartIp + "', endip = '" + newEndIp + "' where zonecode = 'Z0001' ";
            //System.out.println("11:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_systemupdate 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            statement.endTransaction(true);			// commit 처리
//	        returnVal = true;

        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
//            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
		
	}
	
	public int makeDomain(SystemConfigDTO systemConfigDTO) {
		int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();
		
        // 서버로부터 DataStatement 객체를 할당
        DataStatement 	stmt = null;        
        try {
        	stmt 			= ConnectionManager.allocStatement("SSW");
        	CommonData		commonData	= new CommonData();
        	String 			domainid 	= commonData.getDomain(stmt);			// 도메인ID 조회
        	String 			domain		= "";
        	String			sql			= "";
        	String			hostname	= "";
        	
    		domainid 	= systemConfigDTO.getWanId();
    		domain 		= domainid + ".callbox.kt.com";
    		hostname 	= domain;
    		
    		sql = "INSERT INTO table_domain(domainid, domainlevel, parentdomain, domaindesc) VALUES('"+domain+"', 0, '', '"+domainid+"')";
	        int result = 0;
	        System.out.println("0:"+sql);
	        result = stmt.executeUpdate(sql);
	        if (result < 1){
	        	throw new Exception(l.x("[도메인 등록 오류] '","[Domain ID Error] '") + l.x("' 도메인 등록이 실패하였습니다.","' Domain ID Insertion failed."));	
	        }
	        
            sql   = "Update nasa_trunk_set set ssw_domain_name = '" + domain + "' ";
            System.out.println("1:"+sql);
            nResult = stmt.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

            sql   = "Update table_dept set deptname = '" + domain + "' Where deptid = 1 ";
            System.out.println("2:"+sql);
            nResult = stmt.executeUpdate(sql);
            if (nResult < 1){	throw new Exception(l.x("[부서 테이블 도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 부서 테이블 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

            
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/rc.conf";		// 테스트
            	filePath = "D:/etc/rc.conf.local";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }else{
            	//filePath = "/etc/rc.conf";
            	filePath = "/etc/rc.conf.local";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }
            
    		List 	rcList 	= systemConfig.getRcConfigList();		// 데이타 조회
			//logsql.open("D:/etc/rc.conf");
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				// hostname
				if(rcTemp.length()>=8){			
					if("hostname".equals(rcTemp.substring(0,8))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+hostname+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}
				rcString.append(rcTemp+"\n");
			}				
			logsql.write("",rcString.toString());			
			logsql.close();                
            
			
			// hosts 파일변경    ////////////////////////////////////////////////////////////////////////////////////
			osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/hosts";		// 테스트
            }else{
            	filePath = "/etc/hosts";
            }

    		StringBuffer 	hostsString 	= new StringBuffer();
			logsql.open(filePath);
			
			String 		tempDomain = "";
			String 		tempHosts  = "";
			String 		tempHosts1 = "";
			String 		tempHosts2 = "";
			String 		tempHosts3 = "";
			String 		tempHosts4 = "";
			String[]	tempHostsId;
			
			tempHostsId = hostname.split("[.]");
			tempHosts 	= tempHostsId[0];
			tempDomain	= tempHostsId[1]+"."+tempHostsId[2]+"."+tempHostsId[3];
			
			tempHosts1 = "::1"+"\t"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts1+"\n");
			tempHosts2 = "127.0.0.1"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts2+"\n");
			tempHosts3 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+" "+tempHosts;
			hostsString.append(tempHosts3+"\n");
			tempHosts4 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+".";
			hostsString.append(tempHosts4+"\n");
			
			logsql.write("",hostsString.toString());			
			logsql.close();

			
        	// DDNS 파일 수정 (2011.09.16 주석처리 => acro_ipphone_info 사용안함)
//			osType = systemConfig.osChk();
//            if("win".equals(osType)){
//            	filePath = "D:/etc/acro_ipphone_info.txt";		// 테스트
//            }else{
//            	filePath = "/data/acromate_home/ddns/info/acro_ipphone_info";
//            }
//            String 			ddnsTemp 		= "";
//            StringBuffer 	ddnsString 	= new StringBuffer();
//    		List 	ddnsList 	= systemConfig.getDdnsConfigList();		// 데이타 조회

//			logsql.open(filePath);
			
//			for(int i=0;i<ddnsList.size();i++){
//				ddnsTemp = (String)ddnsList.get(i);
				
				// ddns host ID
//				if(ddnsTemp.length()>=7){			
//					if("user_id".equals(ddnsTemp.substring(0,7))){
						//nTemp 	= ddnsTemp.indexOf("=");
						//ddnsTemp 	= ddnsTemp.substring(0, nTemp+2)+domainid;
//						ddnsTemp ="user_id = "+domainid;
//					}
//				}
//				ddnsString.append(ddnsTemp+"\n");
//			}				
//			logsql.write("",ddnsString.toString());			
//			logsql.close();                
	

        	nResult = 1;
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }		
		return nResult ;
	}

	public int macMakeFile(IpcsUserDTO ipcsDTO, int numberType) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        //strMac = ipcsDTO.getMac();
        tmpMac = ipcsDTO.getMac();
        //strMac = tmpMac.substring(0,2)+tmpMac.substring(3,2)+tmpMac.substring(6,2)+tmpMac.substring(9,2)+tmpMac.substring(12,2)+tmpMac.substring(15,2);
        strMac = tmpMac.substring(0,2)+tmpMac.substring(3,5)+tmpMac.substring(6,8)+tmpMac.substring(9,11)+tmpMac.substring(12,14)+tmpMac.substring(15,17);
        System.out.println("Mac 명칭 :"+strMac);	
//        System.out.println("ipcsDTO.getMacAutoNo()_02 : "+ipcsDTO.getMacAutoNo());
//        System.out.println("ipcsDTO.getMacAuto()_02 : "+ipcsDTO.getMacAuto());
        
        try {
        	// mpimstone.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/"+strMac+".cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/"+strMac+".cfg";
            }
            
    		List 				rcList 			= systemConfig.getMacMoimstoneList();		// 데이타 조회
			//logsql.open("D:/etc/rc.conf");
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
								
				if(rcTemp.length()>=8){			
					// User ID 설정(전화번호)
					if("username".equals(rcTemp.substring(0,8))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getE164().trim();
						//rcTemp = rcTemp.replace('$', '"');
					}
					if(numberType==1){
						// 인증이름
						if("authname".equals(rcTemp.substring(0,8))){
							nTemp = rcTemp.indexOf("=");
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuthId();
						}
					}
					// Primary Proxy Server IP Address or DNS Name
					if("proxyip1".equals(rcTemp.substring(0,8))){
						nTemp = rcTemp.indexOf("=");
						
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacWanIp();
						}else{
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
						}
					}					
				}

				if(rcTemp.length()>=6){			
					if(numberType==1){
						// 인증Password
						if("passwd".equals(rcTemp.substring(0,6))){
							nTemp = rcTemp.indexOf("=");
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuthPass();
						}
					}
					// 도메인이름
					if("domain".equals(rcTemp.substring(0,6))){
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
					}
					// Primary Registrar Server IP Address or DNS Name
					if("regip1".equals(rcTemp.substring(0,6))){
						nTemp = rcTemp.indexOf("=");
						
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacWanIp();
						}else{
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
						}
					}
				}

				if(rcTemp.length()>=7){			
					// 표시이름
					if("display".equals(rcTemp.substring(0,7))){
						//nTemp = rcTemp.indexOf("=");
						//rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacDisplay();
						if("".equals(ipcsDTO.getMacDisplay())){
							rcTemp = "#display="+ipcsDTO.getMacDisplay();
						}else{
							rcTemp = "display="+ipcsDTO.getMacDisplay();
						}
					}
					// 자동지역번호 설정
					if("prefix=".equals(rcTemp.substring(0,7))){
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAutoNo();
					}					
				}
				
				if(rcTemp.length()>=10){			
					// 자동지역번호 설정 사용 여부
					if("autoprefix".equals(rcTemp.substring(0,10))){
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuto();
					}
				}
				
				// 2011.11.22 추가
				if(rcTemp.length()>=11){			
					// Primary Registrar Server IP Address or DNS Name
					if("outproxyip1".equals(rcTemp.substring(0,11))){
						nTemp = rcTemp.indexOf("=");
						
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacWanIp();
						}else{
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
						}
					}
				}
				
				rcString.append(rcTemp+"\n");				
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        	// 유닉스 장비이면 리브팅
        	//String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/acroBackup/acro_reboot.sh");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
//            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	public int macMakeImsFile(IpcsUserDTO ipcsDTO, int numberType) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();
        String			strMac		= "";

        strMac = ipcsDTO.getMac().replace(":","");
        System.out.println("Mac 명칭 :"+strMac);	
        
        try {
        	// mpimstone.cfg 작성
            int len = 0;
    		List rcList = systemConfig.getMacImsMoimstoneList();		// 데이타 조회
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				nTemp = rcTemp.indexOf("=");
				if (nTemp >= 0) {
					len = rcTemp.substring(0,nTemp).length();
					if (len == 8 && rcTemp.startsWith("username")) {
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getE164().trim();
					} else if (len == 8 && rcTemp.startsWith("authname")) { //if(numberType==1)
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuthId();
					} else if (len == 6 && rcTemp.startsWith("passwd")) { 
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuthPass();
					} else if (len == 7 && rcTemp.startsWith("display")) { 
						if("".equals(ipcsDTO.getMacDisplay())) {
							rcTemp = "#display="+ipcsDTO.getMacDisplay();
						} else {
							rcTemp = "display="+ipcsDTO.getMacDisplay();
						}
					} else if (len == 6 && rcTemp.startsWith("sipuri")) { 
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getE164().trim()+"@"+ipcsDTO.getDomainId();
					} else if (len == 6 && rcTemp.startsWith("domain")) { 
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
					} else if ((len == 8 && rcTemp.startsWith("proxyip1")) || 
							   (len == 11 && rcTemp.startsWith("outproxyip1")) || 
							   (len == 6 && rcTemp.startsWith("regip1")) || 
							   (len == 6 && rcTemp.startsWith("sbcip1"))) { 
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacWanIp();
						}else{
							rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getDomainId();
						}
					} else if (len == 10 && rcTemp.startsWith("autoprefix")) { 
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAuto();
					} else if (len == 6 && rcTemp.startsWith("prefix")) { 
						rcTemp = rcTemp.substring(0, nTemp+1)+ipcsDTO.getMacAutoNo();
					}
				}
				System.out.println(i+"=="+rcTemp);
				rcString.append(rcTemp+"\n");				
			}
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/"+strMac+".cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/"+strMac+".cfg";
            }
			logsql.open(filePath);
			logsql.write("",rcString.toString());			
			logsql.close();                
        	nResult = 1;
        	// 유닉스 장비이면 리브팅
        	//String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/acroBackup/acro_reboot.sh");
        } catch (Exception e) {
        	e.printStackTrace();
        } finally {
        }
        
        return nResult ;
    }
	
	public int macJungWooFile(IpcsUserDTO ipcsDTO, int numberType) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        tmpMac = ipcsDTO.getMac();
        strMac = tmpMac.substring(0,2)+tmpMac.substring(3,5)+tmpMac.substring(6,8)+tmpMac.substring(9,11)+tmpMac.substring(12,14)+tmpMac.substring(15,17);
        System.out.println("Mac 명칭 :"+strMac);	
        
        try {
        	// jungwoo.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/"+strMac+".cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/"+strMac+".cfg";
            }
            
    		List 				rcList 			= systemConfig.getMacJungWooList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
								
				if(rcTemp.length()>=12){			
					// 전화번호 설정(표시이름, 전화번호, 인증번호, 비밀번호)
					if("<number_info".equals(rcTemp.substring(0,12))){
						rcTemp = "<number_info line_displayname=$"+ipcsDTO.getMacDisplay().trim()+"$ , line_name=$"+ipcsDTO.getE164().trim()+"$ , line_authname=$"+ipcsDTO.getMacAuthId().trim()+"$ line_password=$"+ipcsDTO.getMacAuthPass().trim()+"$, />";
						rcTemp = rcTemp.replace('$', '"');
					}

				}

				if(rcTemp.length()>=10){
					// 서버 설정(서버IP, 도메인)
					if("<cb_server".equals(rcTemp.substring(0,10))){
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = "<cb_server cb_proxy=$"+ipcsDTO.getMacWanIp().trim()+"$, cb_domain=$"+ipcsDTO.getDomainId().trim()+"$ , cb_port=$5060$ , cb_sbc_srv=$"+ipcsDTO.getMacWanIp().trim()+"$, />";
						}else{
							rcTemp = "<cb_server cb_proxy=$"+ipcsDTO.getDomainId().trim()+"$, cb_domain=$"+ipcsDTO.getDomainId().trim()+"$ , cb_port=$5060$ , cb_sbc_srv=$"+ipcsDTO.getDomainId().trim()+"$, />";
						}
						rcTemp = rcTemp.replace('$', '"');
					}
					
					// 자동지역번호 설정(지역번호, 사용유무)
					if("<dial_info".equals(rcTemp.substring(0,10))){
						rcTemp = "<dial_info prefix_code=$"+ipcsDTO.getMacAutoNo().trim()+"$, p_enable=$"+ipcsDTO.getMacAuto().trim()+"$, />";
						rcTemp = rcTemp.replace('$', '"');
					}					
				}
				
				rcString.append(rcTemp+"\n");				
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
//            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	
	public int macDasanFile(IpcsUserDTO ipcsDTO, int numberType) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        tmpMac = ipcsDTO.getMac();
        strMac = tmpMac.substring(0,2)+tmpMac.substring(3,5)+tmpMac.substring(6,8)+tmpMac.substring(9,11)+tmpMac.substring(12,14)+tmpMac.substring(15,17);
        System.out.println("Mac 명칭 :"+strMac);	
        
        try {
        	// dasan.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/"+strMac+".cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/"+strMac+".cfg";
            }
            
    		List 				rcList 			= systemConfig.getMacDasanList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=11){			
					// Outbound Proxy Server
					if("outproxyip1".equals(rcTemp.substring(0,11))){
						if("1".equals(ipcsDTO.getMacAddrType())){
							rcTemp = "outproxyip1="+ipcsDTO.getMacWanIp().trim();
						}else{
							rcTemp = "outproxyip1="+ipcsDTO.getDomainId().trim();
						}
					}					
				}
				
				if(rcTemp.length()>=10){			
					// 자동지역번호
//					if("     autoprefix".equals(rcTemp.substring(0,15))){
//						rcTemp = "     autoprefix="+ipcsDTO.getMacAutoNo().trim();
//					}
					if("autoprefix".equals(rcTemp.substring(0,10))){
						rcTemp = "autoprefix="+ipcsDTO.getMacAutoNo().trim();
					}					
				}
				
				if(rcTemp.length()>=8){			
					// 전화번호 (사용자 ID)
					if("username".equals(rcTemp.substring(0,8))){
						rcTemp = "username="+ipcsDTO.getE164().trim();
					}					
					// 인증번호
					if("authname".equals(rcTemp.substring(0,8))){
						rcTemp = "authname="+ipcsDTO.getMacAuthId().trim();
					}
					
					// Proxy Server
					if("proxyip1".equals(rcTemp.substring(0,8))){
						rcTemp = "proxyip1="+ipcsDTO.getDomainId().trim();
					}
				}
				
				if(rcTemp.length()>=7){			
					// 표시이름
					if("display".equals(rcTemp.substring(0,7))){
						rcTemp = "display="+ipcsDTO.getMacDisplay().trim();
					}					
				}

				if(rcTemp.length()>=6){			
					// 암호
					if("passwd".equals(rcTemp.substring(0,6))){
						rcTemp = "passwd="+ipcsDTO.getMacAuthPass().trim();
					}					
					// 도메인
					if("domain".equals(rcTemp.substring(0,6))){
						rcTemp = "domain="+ipcsDTO.getDomainId().trim();
					}					
					// 자동지역번호 사용유무
					if("prefix".equals(rcTemp.substring(0,6))){
						rcTemp = "prefix="+ipcsDTO.getMacAuto().trim();
					}
					
					// Registrar Server
					if("regip1".equals(rcTemp.substring(0,6))){
						rcTemp = "regip1="+ipcsDTO.getDomainId().trim();
					}
				}
				
				rcString.append(rcTemp+"\n");				
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
//            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	public int portForwardingFile(String protocol, String inport, String ip, String outport) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        try {
//		   	String[]	tempInfo;			   	
//		   	tempInfo 	= outport.split("|");
		   	
        	// dasan.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=21){			
					if("nat on $wan from $lan".equals(rcTemp.substring(0,21))){
						rcString.append(rcTemp+"\n");
						
						rcTemp = "rdr on $wan proto "+protocol+" from any to any port "+inport+" -> "+ip+" port "+outport;
						rcString.append(rcTemp+"\n");
					}else{
						rcString.append(rcTemp+"\n");
					}
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int portForwardingDelete(String deleteStr) {
        int 			nResult 	= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        try {
        	// dasan.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);


			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=3){			
					if("rdr".equals(rcTemp.substring(0,3))){
					   	String[]	tempInfo;			   	
					   	
					   	tempInfo 	= rcTemp.split(" ");
					   	
					   	String strprotocol 	= tempInfo[4];
					   	String strInPort 	= tempInfo[10];
					   	String strIp 		= tempInfo[12];
					   	String strOutPort 	= tempInfo[14];

						String[] dataStr = StringUtil.getParser(deleteStr, "");			
						if(dataStr != null){
							for(int k=0; k < dataStr.length; k++){
								String strTmep = dataStr[k];
								
							   	String[]	temp;			   	
							   	temp 	= strTmep.split("[|]");
							   	
							   	if(strprotocol.equals(temp[0])&&strInPort.equals(temp[1])&&strIp.equals(temp[2])&&strOutPort.equals(temp[3])){
							   		// 모든 값이 같으면 출력하지 않음 
							   		System.out.println("출력안함 : OK");
							   		//break;
							   	}else{
							   		rcString.append(rcTemp+"\n");
							   	}
							}
						}
					}else{
						rcString.append(rcTemp+"\n");
					}
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
			
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
        	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int portForwardingDelete2(String deleteStr) {
        int 			nResult 	= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);


			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=17){			
					if("rdr on $wan proto".equals(rcTemp.substring(0,17))){
						if(portCheck(rcTemp, deleteStr)){
							rcString.append(rcTemp+"\n");
						}else{

						}						
					}else{
						rcString.append(rcTemp+"\n");
					}
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
			
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }
	
	public boolean portCheck(String rcTemp, String deleteStr) {
		boolean 	returnVal = false;
	   	String[]	tempInfo;			   	
	   	
	   	tempInfo 	= rcTemp.split(" ");
	   	
	   	String strprotocol 	= tempInfo[4];
	   	String strInPort 	= tempInfo[10];
	   	String strIp 		= tempInfo[12];
	   	String strOutPort 	= tempInfo[14];
	   	
		String[] dataStr = StringUtil.getParser(deleteStr, "");			
		if(dataStr != null){
			for(int k=0; k < dataStr.length; k++){
				String strTmep = dataStr[k];
				
			   	String[]	temp;			   	
			   	temp 	= strTmep.split("[|]");

			   	if(strprotocol.equals(temp[0])&&strInPort.equals(temp[1])&&strIp.equals(temp[2])&&strOutPort.equals(temp[3])){
			   		// 모든 값이 같으면 출력하지 않음 
			   		returnVal = false;
			   		break;
			   	}else{
			   		returnVal = true;
			   	}
			}
		}
		
		return returnVal;
	}

	// Hybrid 용  pf.conf 파일 수정
	public int portForwardingFile_Hybrid(String protocol, String inport, String ip, String outport) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        try {
//		   	String[]	tempInfo;			   	
//		   	tempInfo 	= outport.split("|");
		   	
        	// dasan.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=19){			
					if("nat on wan from lan".equals(rcTemp.substring(0,19))){
						rcString.append(rcTemp+"\n");
						
						rcTemp = "rdr on wan proto "+protocol+" from any to any port "+inport+" -> "+ip+" port "+outport;
						rcString.append(rcTemp+"\n");
					}else{
						//rcString.append(rcTemp+"\n");
						if(i==rcList.size()-1){
							rcString.append(rcTemp);
						}else{
							rcString.append(rcTemp+"\n");
						}
					}
				}else{
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int portForwardingDelete_Hybrid(String deleteStr) {
        int 			nResult 	= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);


			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=16){			
					if("rdr on wan proto".equals(rcTemp.substring(0,16))){
						if(portCheck_Hybrid(rcTemp, deleteStr)){
							rcString.append(rcTemp+"\n");
						}else{

						}						
					}else{
						//rcString.append(rcTemp+"\n");
						if(i==rcList.size()-1){
							rcString.append(rcTemp);
						}else{
							rcString.append(rcTemp+"\n");
						}
					}
				}else{
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
			}
			
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");

        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public boolean portCheck_Hybrid(String rcTemp, String deleteStr) {
		boolean 	returnVal = false;
	   	String[]	tempInfo;			   	
	   	
	   	tempInfo 	= rcTemp.split(" ");
	   	
	   	String strprotocol 	= tempInfo[4];
	   	String strInPort 	= tempInfo[10];
	   	String strIp 		= tempInfo[12];
	   	String strOutPort 	= tempInfo[14];
	   	
		String[] dataStr = StringUtil.getParser(deleteStr, "");			
		if(dataStr != null){
			for(int k=0; k < dataStr.length; k++){
				String strTmep = dataStr[k];
				
			   	String[]	temp;			   	
			   	temp 	= strTmep.split("[|]");

			   	if(strprotocol.equals(temp[0])&&strInPort.equals(temp[1])&&strIp.equals(temp[2])&&strOutPort.equals(temp[3])){
			   		// 모든 값이 같으면 출력하지 않음 
			   		returnVal = false;
			   		break;
			   	}else{
			   		returnVal = true;
			   	}
			}
		}
		
		return returnVal;
	}

	public int makeFile_Hybrid(SystemConfigDTO systemConfigDTO) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        // 서버로부터 DataStatement 객체를 할당
        DataStatement 	stmt = null;        
        try {
        	stmt 			= ConnectionManager.allocStatement("SSW");
        	CommonData		commonData	= new CommonData();
        	String 			domainid 	= commonData.getDomain(stmt);			// 도메인ID 조회
        	String 			domain		= "";
        	String			sql			= "";
        	String			hostname	= "";
        	
        	if("".equals(domainid)){
        		domainid 	= systemConfigDTO.getWanId();
        		domain 		= domainid + ".callbox.kt.com";
        		hostname 	= domain;
        		/*
        		sql = "INSERT INTO table_domain(domainid, domainlevel, parentdomain, domaindesc) VALUES('"+domain+"', 0, '', '"+domainid+"')";
    	        int result = 0;
    	        System.out.println("0:"+sql);
    	        result = stmt.executeUpdate(sql);
    	        if (result < 1){
    	        	throw new Exception(l.x("[도메인 등록 오류] '","[Domain ID Error] '") + l.x("' 도메인 등록이 실패하였습니다.","' Domain ID Insertion failed."));	
    	        }
    	        
                sql   = "Update nasa_trunk_set set ssw_domain_name = '" + domain + "' ";
                System.out.println("13:"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                

                sql   = "Update table_dept set deptname = '" + domain + "' Where deptid = 1 ";
                System.out.println("13:"+sql);
                nResult = stmt.executeUpdate(sql);
                if (nResult < 1){	throw new Exception(l.x("[부서 테이블 도메인 오류] '","[Auth Properties Error] '")+domain+l.x("'는 부서 테이블 도메인 수정이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}	                
                */
        	}else{
        		hostname = domainid;
        	}
        	
        	//System.out.println("################# CallBox 도메인 : "+hostname);
        	
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/rc.conf";		// 테스트
            }else{
            	filePath = "/etc/rc.conf";
            }
            
    		List 				rcList 			= systemConfig.getRcConfigList();		// 데이타 조회
			//logsql.open("D:/etc/rc.conf");
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				// 게이트웨이
				if(rcTemp.length()>=13){			
					if("defaultrouter".equals(rcTemp.substring(0,13))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+systemConfigDTO.getWanGateway()+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}

				/*
				// hostname
				if(rcTemp.length()>=8){			
					if("hostname".equals(rcTemp.substring(0,8))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+hostname+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}
				*/
				
				// IP주소, 서비넷마스크
				//if(rcTemp.length()>=9){
				if(rcTemp.length()>=13){
					// 외부 네트워크
					//String netType1 = "ifconfig_"+systemConfigDTO.getWanName();
					//if("ifconfig_wan".equals(rcTemp.substring(0,12))){
					if("ifconfig_wan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getWanIp()+" netmask "+systemConfigDTO.getWanMask()+"$";
						rcTemp = temp2.replace('$', '"');
					}						
					// 내부 네트워크
					//String netType2 = "ifconfig_"+systemConfigDTO.getLanName();
					//if("ifconfig_lan".equals(rcTemp.substring(0,12))){
					if("ifconfig_lan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");				
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getLanIp()+" netmask "+systemConfigDTO.getLanMask()+"$";
						rcTemp = temp2.replace('$', '"');						
					}					
				}					
				//rcString.append(rcTemp+"\n");
				if(i==rcList.size()-1){
					rcString.append(rcTemp);
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                

			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
        	// 고정 IP 주소 인 경우
//            osType = systemConfig.osChk();
//            if("win".equals(osType)){
//            	filePath = "D:/etc/resolv.conf";		// 테스트
//            }else{
//            	filePath = "/etc/resolv.conf";
//            }

//    		StringBuffer 	dnsString 	= new StringBuffer();
//        	List 			dnsList 	= systemConfig.getDNSList();		// 데이타 조회
			//logsql.open("D:/etc/resolv.conf");
//			logsql.open(filePath);
			
//			Boolean dns 	= true;
//			String	dnsTemp = "";
			
//			for(int i=0;i<dnsList.size();i++){
//				dnsTemp = (String)dnsList.get(i);
				
				// DNS 서버
//				if(dnsTemp.length()>=10){			
//					if("nameserver".equals(dnsTemp.substring(0,10))){
//						if(dns){
//							dnsTemp = "nameserver "+systemConfigDTO.getWanDns();
//							dns = false;
//						}
//					}
//				}
				//dnsString.append(dnsTemp+"\n");
//				if(i==dnsList.size()-1){
//					dnsString.append(dnsTemp);
//				}else{
//					dnsString.append(dnsTemp+"\n");
//				}
//			}
//			logsql.write("",dnsString.toString());			
//			logsql.close();				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			// 내부 네트워크 환경
			StringBuffer 	dhcpChkString 	= new StringBuffer();
			if("2".equals(systemConfigDTO.getSelectLan())){
				// DHCP 사용안함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if(!"#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					//logsql.open("D:/etc/dhcpd.sh");
					logsql.open(filePath);
					
					dhcpTemp = "#"+lTemp;
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}else{
				// DHCP 사용함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if("#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					logsql.open(filePath);
					
					dhcpTemp = lTemp.replace("#", "");
					//dhcpTemp = lTemp;
					
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}
			
			
			StringBuffer 	dhcpString 	= new StringBuffer();
			// DHCP 사용함
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/dhcpd.conf";
            }

			List 				dhcpList 		= systemConfig.getLanConfigList();		// 데이타 조회
			String				dhcpStr			= "";
			//logsql.open("D:/etc/dhcpd.conf");
			logsql.open(filePath);
			
			for(int i=0;i<dhcpList.size();i++){
				dhcpStr = (String)dhcpList.get(i);		
				
				if(dhcpStr.length()>=18){
					// 내부 서브넷마스크
					if("option subnet-mask".equals(dhcpStr.substring(0,18))){
						dhcpStr = "option subnet-mask "+systemConfigDTO.getLanMask()+";";
					}
					// 내부 DNS서버
					//if("option domain-name".equals(dhcpStr.substring(0,18))&&!"option domain-name-servers".equals(dhcpStr.substring(0,26))){
					//	dhcpStr = "option domain-name "+"$"+systemConfigDTO.getLanDns()+"$";
					//	dhcpStr = dhcpStr.replace('$', '"')+";";
					//}
				}
				// 내부 DNS서버
				//if(dhcpStr.length()>=26){
				//	if("option domain-name-servers".equals(dhcpStr.substring(0,26))){
				//		dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanDns()+";";
				//	}
				//}
				
				// 내부 IP주소 갱신 주기
//				if(dhcpStr.length()>=14){
//					if("max-lease-time".equals(dhcpStr.substring(0,14))){
//						dhcpStr = "max-lease-time "+systemConfigDTO.getTimeCycle()+";";
//					}
//				}
				
				if(dhcpStr.length()>=6){
					// 내부 서브넷마스크
					if("subnet".equals(dhcpStr.substring(0,6))){
						/*
						String temp1 = dhcpStr.substring(6, dhcpStr.length());
						String subnetTemp = "";
							
					   	StringTokenizer tk = new StringTokenizer(temp1, " "); 		// 현재 분리단어는 " " 공백 스페이스로 나누어짐
					   	String token;
					   	int t=0;
					   	while ( tk.hasMoreTokens() ) {
					    	token = tk.nextToken();
					    	if(t==0){
					    		subnetTemp = token;									
					    	}
					    	t++;
					    }
					   	dhcpStr = "subnet "+subnetTemp+" netmask "+systemConfigDTO.getLanMask()+" {";
					   	*/
						
						String[]	tempIp 	= systemConfigDTO.getLanIp().split("[.]");
						dhcpStr = "subnet "+tempIp[0]+"."+tempIp[1]+"."+tempIp[2]+".0"+" netmask "+systemConfigDTO.getLanMask()+" {";
					}
					// 내부 IP주소 범위
					if("range".equals(dhcpStr.substring(0,6).trim())){
						dhcpStr = "range "+systemConfigDTO.getStartIp()+" "+systemConfigDTO.getEndIp()+";";	// IP 시작
					}						
				}
				// 내부 IP주소
				if(dhcpStr.length()>=24){
					if("option tftp-server-name".equals(dhcpStr.substring(0,24).trim())){
						dhcpStr = "option tftp-server-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
						dhcpStr = dhcpStr.replace('$', '"');
					}
				}
				// 내부 IP주소
				if(dhcpStr.length()>=15){
					if("option routers".equals(dhcpStr.substring(0,15).trim())){
						dhcpStr = "option routers "+systemConfigDTO.getLanIp()+";";
					}
				}
				
				// 내부 IP주소 (2011.10.10 추가) ===========================
				if(dhcpStr.length()>=19){
					if("option domain-name ".equals(dhcpStr.substring(0,19))){
						dhcpStr = "option domain-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
						dhcpStr = dhcpStr.replace('$', '"');
					}
				}
				if(dhcpStr.length()>=27){
					if("option domain-name-servers".equals(dhcpStr.substring(0,27).trim())){
						dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanIp()+";";
					}
				}
				// =====================================================
				
				//dhcpString.append(dhcpStr+"\n");
				if(i==dhcpList.size()-1){
					dhcpString.append(dhcpStr);
				}else{
					dhcpString.append(dhcpStr+"\n");
				}
			}
			
			logsql.write("",dhcpString.toString());			
			logsql.close();                				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			/*
			// hosts 파일변경    ////////////////////////////////////////////////////////////////////////////////////
			osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/hosts";		// 테스트
            }else{
            	filePath = "/etc/hosts";
            }

    		StringBuffer 	hostsString 	= new StringBuffer();
			logsql.open(filePath);
			
			String 		tempDomain = "";
			String 		tempHosts  = "";
			String 		tempHosts1 = "";
			String 		tempHosts2 = "";
			String 		tempHosts3 = "";
			String 		tempHosts4 = "";
			String[]	tempHostsId;
			
			tempHostsId = hostname.split("[.]");
			tempHosts 	= tempHostsId[0];
			tempDomain	= tempHostsId[1]+"."+tempHostsId[2]+"."+tempHostsId[3];
			
			tempHosts1 = "::1"+"\t"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts1+"\n");
			tempHosts2 = "127.0.0.1"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts2+"\n");
			tempHosts3 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+" "+tempHosts;
			hostsString.append(tempHosts3+"\n");
			tempHosts4 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+".";
			hostsString.append(tempHosts4+"\n");
			
			logsql.write("",hostsString.toString());			
			logsql.close();
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			*/
			
			//makeEMSFile_Hybrid(systemConfigDTO);			// WAR파일 만들때 확인			// 2012.11.12 IMS 장비인경우 acrossw.cfg 파일 변경 추가되어 주석 처리
			dbIpUpdate_Hybrid(systemConfigDTO);			// WAR파일 만들때 확인
			
        	nResult = 1;
			
        	// 유닉스 장비이면 리브팅
        	String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/acroBackup/acro_reboot.sh");
        	if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	public void makeEMSFile_Hybrid(SystemConfigDTO systemConfigDTO, String	goodsName_Type) {
    	
		try { 							
			// 고정 IP 주소 인 경우
			LogSql 			logsql2 		= new LogSql();
			SystemConfigSet systemConfig 	= new SystemConfigSet();
			String 			osType2 		= "";
			String 			filePath2 		= "";
			int				nTemp			= 0;

			// across.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }

    		StringBuffer 	acrossString 	= new StringBuffer();
        	List 			acrossList 		= systemConfig.getAcrossCfg();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrossTemp = "";								
			for(int i=0;i<acrossList.size();i++){
				acrossTemp = (String)acrossList.get(i);										
				//acrossTemp = acrossTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrossString.append(acrossTemp+"\n");	
				
				if(acrossTemp.length()>=50){
					if("publicAddress.address.sip.hostport.host.ip4Address".equals(acrossTemp.substring(0,50))){
						acrossTemp = acrossTemp.substring(0, 50)+" = "+systemConfigDTO.getWanIp();
					}
				}
				
				if(acrossTemp.length()>=58){
					if("channelAddress.connectionWaitingAddress[0].host.ip4Address".equals(acrossTemp.substring(0,58))){
						acrossTemp = acrossTemp.substring(0, 58)+" = "+systemConfigDTO.getWanIp();
					}
				}

				if(acrossTemp.length()>=48){
					if("channelAddress.unicastAddress[0].host.ip4Address".equals(acrossTemp.substring(0,48))){
						acrossTemp = acrossTemp.substring(0, 48)+" = "+systemConfigDTO.getWanIp();
					}
				}
				
				// IMS용 관련 추가 (2012.11.12) =========================================================
				if("ACRO-CBS-IMS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){
					if(acrossTemp.length()>=58){
						if("channelAddress.connectionWaitingAddress[1].host.ip4Address".equals(acrossTemp.substring(0,58))){
							acrossTemp = acrossTemp.substring(0, 58)+" = "+systemConfigDTO.getWanIp();
						}
					}

					if(acrossTemp.length()>=48){
						if("channelAddress.unicastAddress[1].host.ip4Address".equals(acrossTemp.substring(0,48))){
							acrossTemp = acrossTemp.substring(0, 48)+" = "+systemConfigDTO.getWanIp();
						}
					}
				}
				// ===================================================================================
				
				//acrossString.append(acrossTemp+"\n");
				if(i==acrossList.size()-1){
					acrossString.append(acrossTemp);
				}else{
					acrossString.append(acrossTemp+"\n");
				}
				
			}
			logsql2.write("",acrossString.toString());			
			logsql2.close();
            if("uix".equals(osType2)) linuxShell.runShell("chown ipcs /data/acromate_home/ssw/cfg/acrossw.cfg");
			
			
			// acrobk.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrobk.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acrobk/cfg/acrobk.cfg";
            }

    		StringBuffer 	acrobkString 	= new StringBuffer();
        	List 			acrobkList 	= systemConfig.getAcrobkIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrobkTemp = "";								
			for(int i=0;i<acrobkList.size();i++){
				acrobkTemp = (String)acrobkList.get(i);															
				//acrobkTemp = acrobkTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrobkString.append(acrobkTemp+"\n");
				
				if(acrobkTemp.length()>=5){			
					if("MY_IP".equals(acrobkTemp.substring(0,5))){
						nTemp = acrobkTemp.indexOf("=");
						acrobkTemp = acrobkTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
					}
				}					
				acrobkString.append(acrobkTemp+"\n");
				
			}
			logsql2.write("",acrobkString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acrobk/cfg/acrobk.cfg");
			
			
			// acrorc.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acrorc.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acrorc/cfg/acrorc.cfg";
            }

    		StringBuffer 	acrorcString 	= new StringBuffer();
        	List 			acrorcList 	= systemConfig.getAcrorcIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acrorcTemp = "";								
			for(int i=0;i<acrorcList.size();i++){
				acrorcTemp = (String)acrorcList.get(i);										
				//acrorcTemp = acrorcTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acrorcString.append(acrorcTemp+"\n");
				
				if(acrorcTemp.length()>=5){			
					if("MY_IP".equals(acrorcTemp.substring(0,5))){
						nTemp = acrorcTemp.indexOf("=");
						acrorcTemp = acrorcTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
					}
				}					
				acrorcString.append(acrorcTemp+"\n");
				
			}
			logsql2.write("",acrorcString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acrorc/cfg/acrorc.cfg");
			
			
			// acroms.cfg 파일변경 ####################################
/*			
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/acroms.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/acroms/cfg/acroms.cfg";
            }

    		StringBuffer 	acromsString 	= new StringBuffer();
        	List 			acromsList 	= systemConfig.getAcromsIni();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	acromsTemp = "";								
			for(int i=0;i<acromsList.size();i++){
				acromsTemp = (String)acromsList.get(i);										
				//acromsTemp = acromsTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//acromsString.append(acromsTemp+"\n");
				
				if(acromsTemp.length()>=5){			
					if("MY_IP".equals(acromsTemp.substring(0,5))){
						nTemp = acromsTemp.indexOf("=");
						//acromsTemp = acromsTemp.substring(0, nTemp+1)+systemConfigDTO.getWanIp();
						acromsTemp = acromsTemp.substring(0, nTemp+1)+systemConfigDTO.getLanIp();
					}
				}					
				acromsString.append(acromsTemp+"\n");
				
			}
			logsql2.write("",acromsString.toString());			
			logsql2.close();				
			if("uix".equals(osType2)) linuxShell.runShell("/data/acromate_home/acroms/cfg/acroms.cfg");
*/

			
			// ems.cfg 파일변경 ####################################
			osType2 = systemConfig.osChk();
            if("win".equals(osType2)){
            	filePath2 = "D:/etc/ip/ems.cfg";		// 테스트
            }else{
            	filePath2 = "/data/acromate_home/ems/cfg/ems.cfg";
            }

    		StringBuffer 	emsString 	= new StringBuffer();
        	List 			emsList 	= systemConfig.getEmsCfg();		// 데이타 조회
			logsql2.open(filePath2);
			
			String	emsTemp = "";								
			for(int i=0;i<emsList.size();i++){
				emsTemp = (String)emsList.get(i);										
				//emsTemp = emsTemp.replace(systemConfigDTO.getOldWanIp(),systemConfigDTO.getWanIp());	// IP변경					
				//emsString.append(emsTemp+"\n");
				
				if(emsTemp.length()>=15){			
					if("defaultHostAddr".equals(emsTemp.substring(0,15))){
						nTemp = emsTemp.indexOf("=");
						emsTemp = emsTemp.substring(0, nTemp+2)+systemConfigDTO.getWanIp();
					}
				}
				emsString.append(emsTemp+"\n");
			}
			logsql2.write("",emsString.toString());			
			logsql2.close();
			if("uix".equals(osType2)) linuxShell.runShell("chown ipcs /data/acromate_home/ems/cfg/ems.cfg");
			
        } catch (Exception e) {
        	// Transaction  Rollback 처리
        	e.printStackTrace();
        }	        	        	        	        
	}

	public void dbIpUpdate_Hybrid(SystemConfigDTO systemConfigDTO) {
    	DataStatement 	statement = null;
    	try {
	    	String 		newWanIp	= systemConfigDTO.getWanIp();			// 변경전 IP
	    	String 		oldWanIp	= systemConfigDTO.getOldWanIp();		// 변경후 IP
	    	String 		newLanIp	= systemConfigDTO.getLanIp();			// 변경전 IP
	    	String 		oldLanIp	= systemConfigDTO.getOldLanIp();		// 변경후 IP
	    	String[]	newTmp 		= StringUtil.getParser(newLanIp, ".");
	    	String[]	oldTmp 		= StringUtil.getParser(oldLanIp, ".");
	    	String		newZoneLan	= "";
	    	String		oldZoneLan	= "";
	    	String		tmpZoneLan	= "";
	    	String		newStartIp	= "";
	    	String		newEndIp	= "";
	    			
	    	String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int 		nResult 	= 0;
	    	
	    	//for(int i=0; i < newTmp.length; i++){
//	    	for(int i=0; i < 3; i++){
//	    		if(newTmp[i].length()==3){
//	    			tmpZoneLan = newTmp[i];
//	    		}else if(newTmp[i].length()==2){
//	    			tmpZoneLan = "0"+newTmp[i];
//	    		}else if(newTmp[i].length()==1){
//	    			tmpZoneLan = "00"+newTmp[i];
//	    		}
//	    		newZoneLan = newZoneLan+tmpZoneLan+".";
	    		
//	    	}
//	    	newStartIp	= newZoneLan+"001";
//	    	newEndIp	= newZoneLan+"254";
	    	
	    	//for(int i=0; i < oldTmp.length; i++){
//	    	for(int i=0; i < 3; i++){
//	    		if(oldTmp[i].length()==3){
//	    			tmpZoneLan = oldTmp[i];
//	    		}else if(oldTmp[i].length()==2){
//	    			tmpZoneLan = "0"+oldTmp[i];
//	    		}else if(oldTmp[i].length()==1){
//	    			tmpZoneLan = "00"+oldTmp[i];
//	    		}
//	    		oldZoneLan = oldZoneLan+tmpZoneLan+".";
	    		
//	    	}
//	    	oldZoneLan = oldZoneLan + "001";

	    	for(int i=0; i < 3; i++){
	    		if(newTmp[i].length()==3){
	    			tmpZoneLan = newTmp[i];
	    		}else if(newTmp[i].length()==2){
	    			tmpZoneLan = "0"+newTmp[i];
	    		}else if(newTmp[i].length()==1){
	    			tmpZoneLan = "00"+newTmp[i];
	    		}	    		
	    		newZoneLan = newZoneLan+tmpZoneLan+".";
	    		
	    	}
	    	newStartIp	= newZoneLan+"001";
	    	newEndIp	= newZoneLan+"254";

	    	
	    	
//	    	System.out.println("############### newZoneLan :"+newZoneLan);
//	    	System.out.println("############### oldZoneLan :"+oldZoneLan);
	    	
//	    	System.out.println("newWanIp :"+newWanIp);
//	    	System.out.println("oldWanIp :"+oldWanIp);
	    	

	    	// 할당받은 DataStatement 객체
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
	    	
	    	// Table_tr 테이블 IP변경 
            sql   = "update table_tr set trip = '" + newWanIp + "' where trip = '" + oldWanIp  + "' ";            
            //System.out.println("1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[Table_tr IP변경 오류] '","[Auth Properties Error] '")+l.x("'Table_tr IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// table_trzone 테이블 IP변경 
            sql   = "update table_trzone set zoneip = '" + newWanIp + "' where zoneip = '" + oldWanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            sql   = "update table_trzone set zoneip = '" + newLanIp + "' where zoneip = '" + oldLanIp  + "' ";            
            //System.out.println("2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_trzone IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_trzone IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_sbc_set 테이블 IP변경 
            sql   = "update ncr_sbc_set set sbc_ip = '" + newWanIp + "' where sbc_ip = '" + oldWanIp  + "' ";            
            //System.out.println("3:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_sbc_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_sbc_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_set 테이블 IP변경 
            sql   = "update ncr_set set " +
            		"server = '" + newWanIp + "', " +
            		"myip 	= '" + newWanIp + "', " +
            		"linkip = '" + newWanIp + "' " +
            		"where server = '" + oldWanIp  + "' ";            
            //System.out.println("4:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// ncr_pbx_set 테이블 IP변경 
            sql   = "update ncr_pbx_set set pbx_ip = '" + newWanIp + "' where pbx_ip = '" + oldWanIp  + "' ";            
            //System.out.println("5-1:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(1)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            sql   = "update ncr_pbx_set set pbx_ip = '" + newLanIp + "' where pbx_ip = '" + oldLanIp  + "' ";            
            //System.out.println("5-2:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_pbx_set IP(2)변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_pbx_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            
	    	// nasa_trunk_set 테이블 IP변경 
//            sql   = "update nasa_trunk_set set " +
//    				"server_ip 		 = '" + newLanIp + "', " +
//    				"ssw_server_ip 	 = '" + newLanIp + "' ";            
            //System.out.println("6:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[nasa_trunk_set IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_trunk_set IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_system_info 테이블 IP변경 
//            sql   = "update nasa_system_info set " +
//    				"ns_server_ip 		= '" + newLanIp + "', " +
//    				"ns_mw_ip 			= '" + newLanIp + "', " +
//    				"ns_dup_ip 			= '" + newLanIp + "', " +
//    				"outbound_proxy		= '" + newLanIp + "', " +
//    				"outbound_domain	= '" + newLanIp + "' " +
//    				"where ns_server_ip = '" + oldLanIp + "' ";
            //System.out.println("7:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[nasa_system_info IP변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_system_info IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_neighborproxy 테이블 IP변경 
//            sql   = "update table_neighborproxy set " +
//    				"signaladdress 		= '" + newLanIp + "', " +
//    				"inviaaddress 		= '" + newLanIp + "', " +
//    				"outfromdomainname 	= '" + newLanIp + "', " +
//    				"outtodomainname	= '" + newLanIp + "' " +
//    				"where endpointid 	= 'MS' ";
            //System.out.println("8:"+sql);
//            nResult = statement.executeUpdate(sql);
//            if (nResult < 0){	throw new Exception(l.x("[table_neighborproxy IP변경 오류] '","[Auth Properties Error] '")+l.x("'table_neighborproxy IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// ncr_backupconfig 테이블 변경 
            sql   = "update ncr_backupconfig set serverip = '" + newWanIp + "' where serverip = '" + oldWanIp  + "' ";            
            //System.out.println("9:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[ncr_backupconfig IP변경 오류] '","[Auth Properties Error] '")+l.x("'ncr_backupconfig IP변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}

            
	    	// nasa_systemupdate 테이블 변경 
            sql   = "update nasa_systemupdate set su_check = 'Y' ";
            //System.out.println("10:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[nasa_systemupdate 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}


	    	// table_zoneiprange 테이블 변경 
            //sql   = "update table_zoneiprange set startip = '" + newZoneLan + "' where startip = '" + oldZoneLan  + "' ";
            //sql   = "update table_zoneiprange set startip = '" + newStartIp + "', endip = '" + newEndIp + "' where startip = '" + oldZoneLan  + "' ";
            sql   = "update table_zoneiprange set startip = '" + newStartIp + "', endip = '" + newEndIp + "' where zonecode = 'Z0001' ";
            //System.out.println("11:"+sql);
            nResult = statement.executeUpdate(sql);
            if (nResult < 0){	throw new Exception(l.x("[table_zoneiprange 변경 오류] '","[Auth Properties Error] '")+l.x("'nasa_systemupdate 변경이 실패하였습니다. Table_tr IP변경이 실패하였습니다.","' Phone Authentication Properties registration failed. Phone Insertion failed."));	}
            
            statement.endTransaction(true);			// commit 처리
//	        returnVal = true;

        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
//            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }		
	}

	public int QualityServicesFile(String strType, String strMb, String strQuality, String strIndex, String strSchedule, String strUse) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/local_QoS.conf";		// 테스트
            	filePath = "D:/etc/anchor_QoS.conf";		// 테스트
            }else{
            	//filePath = "/data/acromate_home/firewall/local_QoS.conf";
            	filePath = "/data/acromate_home/firewall/anchor_QoS.conf";
            }
            
    		List 	rcList 	= systemConfig.getQosList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				String tmpUse = "";
				if("1".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on wan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on wan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_wan, voice_wan, std_wan }";
						}
					}
					if(rcTemp.length()>=15){
						if("queue voice_wan".equals(rcTemp.substring(0,15))){
							if("1".equals(strUse)){
								tmpUse = "(rio, borrow)";
							}else{
								tmpUse = "(rio)";
							}
							rcTemp = "queue voice_wan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
				if("2".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on wan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on wan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_wan, voice_wan, std_wan }";
						}
					}
					if(rcTemp.length()>=13){
						if("queue sip_wan".equals(rcTemp.substring(0,13))){
							if("1".equals(strUse)){
								tmpUse = "(rio, borrow)";
							}else{
								tmpUse = "(rio)";
							}
							rcTemp = "queue sip_wan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
				if("3".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on wan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on wan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_wan, voice_wan, std_wan }";
						}
					}
					
					if(rcTemp.length()>=13){
						if("queue std_wan".equals(rcTemp.substring(0,13))){
							if("1".equals(strUse)){
								tmpUse = "(default, borrow)";
							}else{
								tmpUse = "(default)";
							}
							rcTemp = "queue std_wan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
				if("4".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on lan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on lan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_lan, voice_lan, std_lan }";
						}
					}
					
					if(rcTemp.length()>=15){
						if("queue voice_lan".equals(rcTemp.substring(0,15))){
							if("1".equals(strUse)){
								tmpUse = "(rio, borrow)";
							}else{
								tmpUse = "(rio)";
							}
							rcTemp = "queue voice_lan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
				if("5".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on lan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on lan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_lan, voice_lan, std_lan }";
						}
					}
					if(rcTemp.length()>=13){
						if("queue sip_lan".equals(rcTemp.substring(0,13))){
							if("1".equals(strUse)){
								tmpUse = "(rio, borrow)";
							}else{
								tmpUse = "(rio)";
							}
							rcTemp = "queue sip_lan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
				if("6".equals(strType)){
					if(rcTemp.length()>=25){			
						if("altq on lan cbq bandwidth".equals(rcTemp.substring(0,25))){
							rcTemp = "altq on lan cbq bandwidth "+strMb+"Mb qlimit 100 queue { sip_lan, voice_lan, std_lan }";
						}
					}
					if(rcTemp.length()>=13){
						if("queue std_lan".equals(rcTemp.substring(0,13))){
							if("1".equals(strUse)){
								tmpUse = "(default, borrow)";
							}else{
								tmpUse = "(default)";
							}
							rcTemp = "queue std_lan bandwidth "+strQuality+"% priority "+strIndex+" "+strSchedule+" "+tmpUse;
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
				
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	// ACL 용  pf.conf 파일 수정
	public int aclFile(String ip) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=17){			
					if("block in quick on".equals(rcTemp.substring(0,17))){
						rcString.append(rcTemp+"\n");
						
						rcTemp = "block in on wan from "+ip+" to any";
						rcString.append(rcTemp+"\n");
					}else{
						rcString.append(rcTemp+"\n");
					}
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int aclDelete(String deleteStr) {
        int 			nResult 	= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);

			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);

				if(rcTemp.length()>=20){			
					//if("block in on wan from".equals(rcTemp.substring(0,20))){
					//	if(aclCheck(rcTemp, deleteStr)){
					if("block in on wan".equals(rcTemp.substring(0,15))||"pass in on wan ".equals(rcTemp.substring(0,15))){
						if(aclCheck2(rcTemp, deleteStr)){
							rcString.append(rcTemp+"\n");
						}else{

						}						
					}else{
						//rcString.append(rcTemp+"\n");
						if(i==rcList.size()-1){
							rcString.append(rcTemp);
						}else{
							rcString.append(rcTemp+"\n");
						}
					}
				}else{
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						if(!"".equals(rcTemp)){
							rcString.append(rcTemp);
						}
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
			}
			
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        	// 유닉스 장비이면 실행
        	//String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");

        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public boolean aclCheck(String rcTemp, String deleteStr) {
		boolean 	returnVal = false;
	   	String[]	tempInfo;			   	
	   	
	   	tempInfo 	= rcTemp.split(" ");
	   	
	   	String strIp 		= tempInfo[5];
	   	
		String[] dataStr = StringUtil.getParser(deleteStr, "");			
		if(dataStr != null){
			for(int k=0; k < dataStr.length; k++){
				String strTmep = dataStr[k];
				
			   	//String[]	temp;			   	
			   	//temp 	= strTmep.split("[|]");

			   	//if(strIp.equals(temp[5])){
			   	if(strIp.equals(strTmep)){
			   		// 모든 값이 같으면 출력하지 않음 
			   		returnVal = false;
			   		break;
			   	}else{
			   		returnVal = true;
			   	}
			}
		}
		
		return returnVal;
	}

	public int aclFile2_old(String strAccessType, String strProtocol, String strIpType, String strIp, String strPortType, String strPort) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";
        boolean 		aclChk 		= false;
        
        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);
			int check = 0;
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				if(rcTemp.length()>=68){
					//if("block in quick on".equals(rcTemp.substring(0,17))){
					if("block in quick on wan proto tcp from <sshguard> to any port 22 label".equals(rcTemp.substring(0,68))){
						rcString.append(rcTemp+"\n");
						check++;
						i++;
						rcTemp = (String)rcList.get(i);
						if ( "".equals(rcTemp.trim()) ){
							//새로만든걸 넣는다
							check++;
							if("any".equals(strProtocol)){
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan from any to any";
									}else{
										rcTemp = strAccessType+" in on wan from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan from "+strIp+" to any";
									}else{
										rcTemp = strAccessType+" in on wan from "+strIp+" to any port "+strPort;
									}
								}
							}else{
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from any to any";
									}else{
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any";
									}else{
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any port "+strPort;
									}
								}
							}
							rcString.append(rcTemp+"\n\n");
						}else{
							//rcString.append(rcTemp+"\n");
							if(i==rcList.size()-1){
								rcString.append(rcTemp);
							}else{
								rcString.append(rcTemp+"\n");
							}
						}
					}else{
						//rcString.append(rcTemp+"\n");
						if(i==rcList.size()-1){
							rcString.append(rcTemp);
						}else{
							rcString.append(rcTemp+"\n");
						}
					}
					
				}else{
					if (check == 1 ){
						String temp1;
						if("any".equals(strProtocol)){
							if("any".equals(strIpType)){
								if("any".equals(strPortType)){
									temp1 = strAccessType+" in on wan from any to any";
								}else{
									temp1 = strAccessType+" in on wan from any to any port "+strPort;
								}
							}else{
								if("any".equals(strPortType)){
									temp1 = strAccessType+" in on wan from "+strIp+" to any";
								}else{
									temp1 = strAccessType+" in on wan from "+strIp+" to any port "+strPort;
								}
							}
						}else{
							if("any".equals(strIpType)){
								if("any".equals(strPortType)){
									temp1 = strAccessType+" in on wan proto "+strProtocol+" from any to any";
								}else{
									temp1 = strAccessType+" in on wan proto "+strProtocol+" from any to any port "+strPort;
								}
							}else{
								if("any".equals(strPortType)){
									temp1 = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any";
								}else{
									temp1 = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any port "+strPort;
								}
							}
						}
						rcString.append(temp1+"\n");
						check++;

					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	//String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public boolean aclCheck2(String rcTemp, String deleteStr) {
		boolean 	returnVal = false;
	   	String[]	tempInfo;			   	
	   	
	   	tempInfo 	= rcTemp.split(" ");
	   	
	   	String strAccessType 	= "";
	   	String strProtocol 		= "";
	   	String strIpType 		= "";
	   	String strIp 			= "";
	   	String strPortType 		= "";
	   	String strPort 			= "";
	   	
	   	if(tempInfo.length == 8){
	   		strAccessType 	= tempInfo[0];
	   		strProtocol 	= tempInfo[4];
	   		strIp 			= tempInfo[5];
	   	}else if(tempInfo.length == 10 && "proto".equals(tempInfo[4])){
	   		strAccessType 	= tempInfo[0];
	   		strProtocol 	= tempInfo[5];
	   		strIp 			= tempInfo[7];
	   	}else if(tempInfo.length == 10 && "from".equals(tempInfo[4])){
	   		strAccessType 	= tempInfo[0];
	   		strProtocol 	= tempInfo[4];
	   		strIp 			= tempInfo[5];
	   		strPort 		= tempInfo[9];
	   	}else if(tempInfo.length == 12){
	   		strAccessType 	= tempInfo[0];
	   		strProtocol 	= tempInfo[5];
	   		strIp 			= tempInfo[7];
	   		strPort 		= tempInfo[11];
	   	}
	   	
		String[] dataStr = StringUtil.getParser(deleteStr, "");			
		if(dataStr != null){
			for(int k=0; k < dataStr.length; k++){
				String strTmep = dataStr[k];
				
			   	String[]	temp;			   	
			   	temp 	= strTmep.split("[|]");
			   	if("9".equals(temp[0])||"10".equals(temp[0])){
			   		if(strAccessType.equals(temp[1]) && strProtocol.equals(temp[2]) && strIp.equals(temp[3])){
				   		// 모든 값이 같으면 출력하지 않음 
				   		returnVal = false;
				   		break;
				   	}else{
				   		returnVal = true;
				   	}
			   	}else if("11".equals(temp[0])){
			   		if(strAccessType.equals(temp[1]) && strProtocol.equals(temp[2]) && strIp.equals(temp[3]) && strPort.equals(temp[4])){
				   		// 모든 값이 같으면 출력하지 않음 
				   		returnVal = false;
				   		break;
				   	}else{
				   		returnVal = true;
				   	}
			   	}else if("12".equals(temp[0])){
			   		if(strAccessType.equals(temp[1]) && strProtocol.equals(temp[2]) && strIp.equals(temp[3]) && strPort.equals(temp[4])){
				   		// 모든 값이 같으면 출력하지 않음 
				   		returnVal = false;
				   		break;
				   	}else{
				   		returnVal = true;
				   	}
			   	}

			}
		}
		
		return returnVal;
	}

	public int aclFile2(String strAccessType, String strProtocol, String strIpType, String strIp, String strPortType, String strPort) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        String			tmpMac		= "";
        String			strMac		= "";
        boolean 		aclChk 		= false;
        
        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            
    		List 	rcList 	= systemConfig.getNetWorkType();		// 데이타 조회
			logsql.open(filePath);
			int check 	= 0;
			int k 		= 0;
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				if(rcTemp.length()>=68){
					//if("block in quick on".equals(rcTemp.substring(0,17))){
					if("block in quick on wan proto tcp from <sshguard> to any port 22 label".equals(rcTemp.substring(0,68))){
						rcString.append(rcTemp+"\n");
						check++;
						i++;
						rcTemp = (String)rcList.get(i);
						if ( "".equals(rcTemp.trim()) ){
							//새로만든걸 넣는다
							check++;
							if("any".equals(strProtocol)){
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan from any to any";
									}else{
										rcTemp = strAccessType+" in on wan from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan from "+strIp+" to any";
									}else{
										rcTemp = strAccessType+" in on wan from "+strIp+" to any port "+strPort;
									}
								}
							}else{
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from any to any";
									}else{
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any";
									}else{
										rcTemp = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any port "+strPort;
									}
								}
							}
							rcString.append(rcTemp+"\n\n");
						}else{
							//rcString.append(rcTemp+"\n");
							if(i==rcList.size()-1){
								rcString.append(rcTemp);
							}else{
								rcString.append(rcTemp+"\n");
							}
						}
					}else{
						//rcString.append(rcTemp+"\n");
						if(i==rcList.size()-1){
							rcString.append(rcTemp);
						}else{
							rcString.append(rcTemp+"\n");
						}
					}
					
				}else{
					if (check == 1 ){
						String temp1 	= "";
						String rcTemp2 	= (String)rcList.get(i);
						if ((check == 1) && ("".equals(rcTemp2.trim()))){
							if("any".equals(strProtocol)){
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										temp1 = strAccessType+" in on wan from any to any";
									}else{
										temp1 = strAccessType+" in on wan from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										temp1 = strAccessType+" in on wan from "+strIp+" to any";
									}else{
										temp1 = strAccessType+" in on wan from "+strIp+" to any port "+strPort;
									}
								}
							}else{
								if("any".equals(strIpType)){
									if("any".equals(strPortType)){
										temp1 = strAccessType+" in on wan proto "+strProtocol+" from any to any";
									}else{
										temp1 = strAccessType+" in on wan proto "+strProtocol+" from any to any port "+strPort;
									}
								}else{
									if("any".equals(strPortType)){
										temp1 = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any";
									}else{
										temp1 = strAccessType+" in on wan proto "+strProtocol+" from "+strIp+" to any port "+strPort;
									}
								}
							}
							
							rcString.append(temp1+"\n");
							check++;					
						}
					}
					//rcString.append(rcTemp+"\n");
					if(i==rcList.size()-1){
						rcString.append(rcTemp);
					}else{
						rcString.append(rcTemp+"\n");
					}
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	//String osType3 = systemConfig.osChk();
        	//if("uix".equals(osType3)) linuxShell.runShell("/sbin/pfctl -f /etc/pf.conf");
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	// 신규 장비인 경우 dhcp 관련 rc.conf , dhcpd.conf 파일 수정 , dhcpd.sh 부분 삭제 (2012.2.2 / 2012.4.6)
	public int makeFile_Hybrid_New(SystemConfigDTO systemConfigDTO, String dhcpTypeChk) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();

        // 서버로부터 DataStatement 객체를 할당
        DataStatement 	stmt = null;        
        try {
        	stmt 			= ConnectionManager.allocStatement("SSW");
        	CommonData		commonData	= new CommonData();
        	String 			domainid 	= commonData.getDomain(stmt);			// 도메인ID 조회
        	String 			domain		= "";
        	String			sql			= "";
        	String			hostname	= "";
        	
        	if("".equals(domainid)){
        		domainid 	= systemConfigDTO.getWanId();
        		domain 		= domainid + ".callbox.kt.com";
        		hostname 	= domain;
        	}else{
        		hostname = domainid;
        	}
        	
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/rc.conf";		// 테스트
            }else{
            	filePath = "/etc/rc.conf";
            }
            
    		List 				rcList 			= systemConfig.getRcConfigList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				// dhcp 사용유무
				if(rcTemp.length()>=13){
					if("dhcpd_ifaces=".equals(rcTemp.substring(0,13))){
						//System.out.println("문자열 :"+rcTemp);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+dhcpTypeChk+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}
				
				// 게이트웨이
				if(rcTemp.length()>=13){			
					if("defaultrouter".equals(rcTemp.substring(0,13))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+systemConfigDTO.getWanGateway()+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}

				// IP주소, 서비넷마스크
				if(rcTemp.length()>=13){
					// 외부 네트워크
					if("ifconfig_wan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getWanIp()+" netmask "+systemConfigDTO.getWanMask()+"$";
						rcTemp = temp2.replace('$', '"');
					}						
					// 내부 네트워크
					if("ifconfig_lan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");				
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getLanIp()+" netmask "+systemConfigDTO.getLanMask()+"$";
						rcTemp = temp2.replace('$', '"');						
					}					
				}					
				//rcString.append(rcTemp+"\n");
				if(i==rcList.size()-1){
					rcString.append(rcTemp);
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                

			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
        	// 고정 IP 주소 인 경우
//            osType = systemConfig.osChk();
//            if("win".equals(osType)){
//            	filePath = "D:/etc/resolv.conf";		// 테스트
//            }else{
//            	filePath = "/etc/resolv.conf";
//            }

//    		StringBuffer 	dnsString 	= new StringBuffer();
//        	List 			dnsList 	= systemConfig.getDNSList();		// 데이타 조회
//			logsql.open(filePath);
			
//			Boolean dns 	= true;
//			String	dnsTemp = "";
			
//			for(int i=0;i<dnsList.size();i++){
//				dnsTemp = (String)dnsList.get(i);
				
				// DNS 서버
//				if(dnsTemp.length()>=10){			
//					if("nameserver".equals(dnsTemp.substring(0,10))){
//						if(dns){
//							dnsTemp = "nameserver "+systemConfigDTO.getWanDns();
//							dns = false;
//						}
//					}
//				}
				//dnsString.append(dnsTemp+"\n");
//				if(i==dnsList.size()-1){
//					dnsString.append(dnsTemp);
//				}else{
//					dnsString.append(dnsTemp+"\n");
//				}
//			}
//			logsql.write("",dnsString.toString());			
//			logsql.close();				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			
			StringBuffer 	dhcpString 	= new StringBuffer();
			// DHCP 사용함
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/dhcpd.conf";
            }

			List 				dhcpList 		= systemConfig.getLanConfigList();		// 데이타 조회
			String				dhcpStr			= "";
			String				dhcpd_Type		= "1";		// (1: Lan, 2: gw)
			
			logsql.open(filePath);
			
			for(int i=0;i<dhcpList.size();i++){
				dhcpStr = (String)dhcpList.get(i);		
				
				if(dhcpStr.length()>=5){
					if("# lan".equals(dhcpStr.substring(0,5))){
						dhcpd_Type = "1";
					}
				}
				if(dhcpStr.length()>=4){
					if("# gw".equals(dhcpStr.substring(0,4))){
						dhcpd_Type = "2";
					}
				}
				
				if(dhcpStr.length()>=18){
					// 내부 서브넷마스크
					if("option subnet-mask".equals(dhcpStr.substring(0,18))){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option subnet-mask "+systemConfigDTO.getLanMask()+";";
						}
					}
				}
				// 내부 DNS서버
				//if(dhcpStr.length()>=26){
				//	if("option domain-name-servers".equals(dhcpStr.substring(0,26))){
				//		dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanDns()+";";
				//	}
				//}
				
				// 내부 IP주소 갱신 주기
//				if(dhcpStr.length()>=14){
//					if("max-lease-time".equals(dhcpStr.substring(0,14))){
//						dhcpStr = "max-lease-time "+systemConfigDTO.getTimeCycle()+";";
//					}
//				}
				
				if(dhcpStr.length()>=6){
					// 내부 서브넷마스크
					if("subnet".equals(dhcpStr.substring(0,6))){
						if("1".equals(dhcpd_Type)){
							String[]	tempIp 	= systemConfigDTO.getLanIp().split("[.]");
							dhcpStr = "subnet "+tempIp[0]+"."+tempIp[1]+"."+tempIp[2]+".0"+" netmask "+systemConfigDTO.getLanMask()+" {";
						}
					}
					// 내부 IP주소 범위
					if("range".equals(dhcpStr.substring(0,6).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "range "+systemConfigDTO.getStartIp()+" "+systemConfigDTO.getEndIp()+";";	// IP 시작
						}
					}						
				}
				// 내부 IP주소
				if(dhcpStr.length()>=24){
					if("option tftp-server-name".equals(dhcpStr.substring(0,24).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option tftp-server-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
							dhcpStr = dhcpStr.replace('$', '"');
						}
					}
				}
				// 내부 IP주소
				if(dhcpStr.length()>=15){
					if("option routers".equals(dhcpStr.substring(0,15).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option routers "+systemConfigDTO.getLanIp()+";";
						}
					}
				}
				
				// 내부 IP주소 (2011.10.10 추가) ===========================
				//if(dhcpStr.length()>=19){
				//	if("option domain-name ".equals(dhcpStr.substring(0,19))){
				//		dhcpStr = "option domain-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
				//		dhcpStr = dhcpStr.replace('$', '"');
				//	}
				//}
				if(dhcpStr.length()>=27){
					if("option domain-name-servers".equals(dhcpStr.substring(0,27).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanIp()+";";
						}
					}
				}
				// =====================================================
				
				//dhcpString.append(dhcpStr+"\n");
				if(i==dhcpList.size()-1){
					dhcpString.append(dhcpStr);
				}else{
					dhcpString.append(dhcpStr+"\n");
				}
			}
			
			logsql.write("",dhcpString.toString());			
			logsql.close();                				
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			//makeEMSFile_Hybrid(systemConfigDTO);			// WAR파일 만들때 확인		// 2012.11.12 IMS 장비인경우 acrossw.cfg 파일 변경 추가되어 주석 처리
			dbIpUpdate_Hybrid(systemConfigDTO);			// WAR파일 만들때 확인
			
        	nResult = 1;
			
        	// 유닉스 장비이면 리브팅
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	public int makeFile_Gateway(GatewayConfigDTO gatewayConfigDTO) {
        int 			nResult 		= 0;
        int				nTemp			= 0;
        String 			gatewayTemp 	= "";
        StringBuffer 	gatewayString 	= new StringBuffer();

        // 서버로부터 DataStatement 객체를 할당
//        DataStatement 	stmt = null;        
        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acrogw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/acroua/cfg/acrogw.cfg";
            }
            
    		List 	gatewayList 	= systemConfig.getGatewayConfigList();		// 데이타 조회
			//logsql.open("D:/etc/acrogw.cfg");
			logsql.open(filePath);
			
			for(int i=0;i<gatewayList.size();i++){
				gatewayTemp = (String)gatewayList.get(i);
				
				if(gatewayTemp.length()>=7){			
					// country (0: USA, 1: JAPAN, 2: KOREA)
					if("country".equals(gatewayTemp.substring(0,7))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCountry()+"                 ; (0: USA            1: JAPAN          2: KOREA)";
					}
				
					// Driver Port Range (udpPort)
					if("udpPort".equals(gatewayTemp.substring(0,7))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getDriverPort1()+"-"+gatewayConfigDTO.getDriverPort2()+"       ; (Read Only)";
					}
				}

				// maxDigit
				if(gatewayTemp.length()>=8){
					if("maxDigit".equals(gatewayTemp.substring(0,8))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getMaxDigit();
					}
				}
				
				if(gatewayTemp.length()>=9){
					// VAD
					if("enableVAD".equals(gatewayTemp.substring(0,9))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getVad()+"               ; (0: Disable        1: Enable)";
					}
					
					// CNG
					if("enableCNG".equals(gatewayTemp.substring(0,9))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCng()+"               ; (0: Disable        1: Enable)";
					}
					
					// fxsVolume
					if("fxsVolume".equals(gatewayTemp.substring(0,9))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getFxsTx()+":"+gatewayConfigDTO.getFxsRx()+"             ; Tx(1-12):Rx(1-12)";
					}
					
					// fxoVolume
					if("fxoVolume".equals(gatewayTemp.substring(0,9))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getFxoTx()+":"+gatewayConfigDTO.getFxoRx()+"             ; Tx(1-12):Rx(1-12)";
					}
				}
				
				if(gatewayTemp.length()>=10){
					// fxsPort
					if("fxsRegPort".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getFxsPort1()+"-"+gatewayConfigDTO.getFxsPort2()+"      ; (Min Port)-(Max Port)";
					}
					
					// fxoPort
					if("fxoRegPort".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getFxoPort();
					}
					
					// codecInfo1
					if("codecInfo1".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCodecName1()+":"+gatewayConfigDTO.getCodecPtime1()+"           ; (0: Not Use        1: PCM u-law      2: PCM a-law      3: G.729          4: G.723.1 5.3k   5: G.723.1 6.3k):(ptime)";
					}
					
					// codecInfo2
					if("codecInfo2".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCodecName2()+":"+gatewayConfigDTO.getCodecPtime2()+"           ; (0: Not Use        1: PCM u-law      2: PCM a-law      3: G.729          4: G.723.1 5.3k   5: G.723.1 6.3k):(ptime)";
					}
					
					// codecInfo3
					if("codecInfo3".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCodecName3()+":"+gatewayConfigDTO.getCodecPtime3()+"           ; (0: Not Use        1: PCM u-law      2: PCM a-law      3: G.729          4: G.723.1 5.3k   5: G.723.1 6.3k):(ptime)";
					}
					
					// codecInfo4
					if("codecInfo4".equals(gatewayTemp.substring(0,10))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getCodecName4()+":"+gatewayConfigDTO.getCodecPtime4()+"           ; (0: Not Use        1: PCM u-law      2: PCM a-law      3: G.729          4: G.723.1 5.3k   5: G.723.1 6.3k):(ptime)";
					}
				}
				
				// dialPlan
				if(gatewayTemp.length()>=11){
					if("dialingRule".equals(gatewayTemp.substring(0,11))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getDialPlan();
					}
				}
				
				if(gatewayTemp.length()>=13){
					// hookFlashTime
					if("hookFlashTime".equals(gatewayTemp.substring(0,13))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getHookTime1()+"-"+gatewayConfigDTO.getHookTime2()+"     ; (Min Time)-(Max Time)";
					}
					
					// digitInterval
					if("digitInterval".equals(gatewayTemp.substring(0,13))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getDigit();
					}
				}
				
				// addingAreaCode (Number)
				if(gatewayTemp.length()>=15){
					if("addingAreaCode ".equals(gatewayTemp.substring(0,15))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getAreaNumber();
					}
				}
				
				// dialtoneInterval
				if(gatewayTemp.length()>=16){
					if("dialtoneInterval".equals(gatewayTemp.substring(0,16))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getDialtone();
					}
				}
				
				// dtmfTransportType
				if(gatewayTemp.length()>=17){
					if("dtmfTransportType".equals(gatewayTemp.substring(0,17))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getDtmf()+"       ; (0: Bypass         1: RFC2833        2: INFO)";
					}
				}
				
				// enableEchoCanceller
				if(gatewayTemp.length()>=19){
					if("enableEchoCanceller".equals(gatewayTemp.substring(0,19))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getEcho()+"     ; (0: Disable        1: Enable)";
					}
				}
				
				// enableAddingAreaCode
				if(gatewayTemp.length()>=20){
					if("enableAddingAreaCode".equals(gatewayTemp.substring(0,20))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getArea_Code()+"    ; (0: Disable        1: Enable)";
					}
				}
				
				// addingAreaCodeExceptionRule
				if(gatewayTemp.length()>=27){
					if("addingAreaCodeExceptionRule".equals(gatewayTemp.substring(0,27))){
						nTemp 		= gatewayTemp.indexOf("=");
						gatewayTemp = gatewayTemp.substring(0, nTemp+2)+gatewayConfigDTO.getAreaException();
					}
				}
				
				
				//rcString.append(gatewayTemp+"\n");
				if(i==gatewayList.size()-1){
					gatewayString.append(gatewayTemp);
				}else{
					gatewayString.append(gatewayTemp+"\n");
				}
			}
				
			logsql.write("",gatewayString.toString());			
			logsql.close();                

			
        	nResult = 1;
			
        	// 유닉스 장비이면 Gateway cfg파일 다시 읽기 실행.
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/script/acroua_change_config");
        	
        	System.out.println("########### linuxShell strCommand : /data/acromate_home/script/acroua_change_config");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }

	// anchor_forward.conf 파일 수정
	public int portForwardingFile_New(String protocol, String inport, String ip, String outport) {
        int 			nResult 		= 0;
        int				nTemp			= 0;
        String 			forwardTemp 	= "";
        StringBuffer 	forwardString 	= new StringBuffer();

        try {
        	// dasan.cfg 작성
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/anchor_forward.conf";		// 테스트
            }else{
            	filePath = "/data/acromate_home/firewall/anchor_forward.conf";
            }
            
    		List 	forwardList 	= systemConfig.getForward();		// 데이타 조회
			logsql.open(filePath);
			
			if(forwardList.size() > 0){
				forwardTemp = (String)forwardList.get(0);
				if(!forwardTemp.equals("")){
					for(int i=0;i<forwardList.size();i++){
						forwardTemp = (String)forwardList.get(i);	
						
						//forwardString.append(forwardTemp+"\n");
						if(!forwardTemp.equals("")){
							forwardString.append(forwardTemp+"\n");
						}
					}
				}
			}
			
			forwardTemp = "rdr on wan proto "+protocol+" from any to any port "+inport+" -> "+ip+" port "+outport;
			forwardString.append(forwardTemp);
			
			
			logsql.write("",forwardString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)){
        		//linuxShell.runShell("/data/acromate_home/script/ipcs_local_forward");
        		linuxShell.runShell("/data/acromate_home/script/ipcs_forward");
        		System.out.println("### unix local_forward : "+"/data/acromate_home/script/ipcs_forward");
        	}else{
        		System.out.println("### windows local_forward : "+"/data/acromate_home/script/ipcs_forward");
        	}
	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int portForwardingDelete_New(String deleteStr) {
        int 			nResult 		= 0;
        String 			forwardTemp 	= "";
        StringBuffer 	forwardString 	= new StringBuffer();

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/anchor_forward.conf";		// 테스트
            }else{
            	filePath = "/data/acromate_home/firewall/anchor_forward.conf";
            }
            
    		List 	forwardList = systemConfig.getForward();		// 데이타 조회
			logsql.open(filePath);

			for(int i=0;i<forwardList.size();i++){
				forwardTemp = (String)forwardList.get(i);

				if(!forwardTemp.equals("")){			
					//System.out.println("######## "+i+"번 forwardTemp : "+forwardTemp);
					//System.out.println("######## "+i+"번 deleteStr : "+deleteStr);
					
					if(portCheck_Hybrid(forwardTemp, deleteStr)){
						if(i==forwardList.size()-1){
							forwardString.append(forwardTemp);
						}else{
							forwardString.append(forwardTemp+"\n");
						}
					}
				}
			}
			
			logsql.write("",forwardString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        	// 유닉스 장비이면 실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)){
        		//linuxShell.runShell("/data/acromate_home/script/ipcs_local_forward");
        		linuxShell.runShell("/data/acromate_home/script/ipcs_forward");
        		System.out.println("### unix local_forward : "+"/data/acromate_home/script/ipcs_forward");
        	}else{
        		System.out.println("### windows local_forward : "+"/data/acromate_home/script/ipcs_forward");
        	}

        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int aclFile_New(String strAccessType, String strProtocol, String strIpType, String strIp, String strPortType, String strPort) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			aclTemp		= "", wan = "eth1";
        StringBuffer 	aclString 	= new StringBuffer();
        String			userFilter	= "0";
        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/pf.conf";		// 테스트
            	filePath = "D:/etc/anchor_filter.conf";
            }else{
            	//filePath = "/etc/pf.conf";
            	filePath = "/data/acromate_home/firewall/anchor_filter.conf";
            }
            
    		List 	aclList 	= systemConfig.getFirewall();		// 데이타 조회
			logsql.open(filePath);
			
			System.out.println("******* Insert calList.size() : "+aclList.size());
			if(aclList.size() > 0){
				aclTemp = (String)aclList.get(0);
				if(!aclTemp.equals("")){
					for(int i=0;i<aclList.size();i++){
						aclTemp = (String)aclList.get(i);
						
						if(!aclTemp.equals("")){
							aclString.append(aclTemp+"\n");
						}
						
//						if(aclTemp.length()>=22){
//							if("# User Filtering Rules".equals(aclTemp.substring(0,22))){
//								userFilter = "1";
//							}
//						}						
//						if("0".equals(userFilter)){
//							aclString.append(aclTemp+"\n");
//						}else{
//							if(!aclTemp.equals("")){
//								aclString.append(aclTemp+"\n");
//							}
//						}
					}
				}
			}
			
			// 신규 추가 부분
//			if("1".equals(userFilter)){
				if("any".equals(strProtocol)){
					if("any".equals(strIpType)){
						if("any".equals(strPortType)){
							aclTemp = strAccessType+" in on "+wan+" from any to any";
						}else{
							aclTemp = strAccessType+" in on "+wan+" from any to any port "+strPort;
						}
					}else{
						if("any".equals(strPortType)){
							aclTemp = strAccessType+" in on "+wan+" from "+strIp+" to any";
						}else{
							aclTemp = strAccessType+" in on "+wan+" from "+strIp+" to any port "+strPort;
						}
					}
				}else{
					if("any".equals(strIpType)){
						if("any".equals(strPortType)){
							aclTemp = strAccessType+" in on "+wan+" proto "+strProtocol+" from any to any";
						}else{
							aclTemp = strAccessType+" in on "+wan+" proto "+strProtocol+" from any to any port "+strPort;
						}
					}else{
						if("any".equals(strPortType)){
							aclTemp = strAccessType+" in on "+wan+" proto "+strProtocol+" from "+strIp+" to any";
						}else{
							aclTemp = strAccessType+" in on "+wan+" proto "+strProtocol+" from "+strIp+" to any port "+strPort;
						}
					}
				}
//			}
			
			//rcString.append(aclTemp+"\n\n");					
			aclString.append(aclTemp);

	
			logsql.write("",aclString.toString());			
			logsql.close();                
			
        	nResult = 1;
        	
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	public int aclDelete_New(String deleteStr) {
        int 			nResult 	= 0;
        String 			aclTemp		= "", wan = "eth1";
        StringBuffer 	aclString 	= new StringBuffer();

        try {
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/local_firewall.conf";		// 테스트
            	//filePath = "D:/etc/pf.conf";		// 테스트
            	filePath = "D:/etc/anchor_filter.conf";			// 2012.11.21
            }else{
            	//filePath = "/data/acromate_home/firewall/local_firewall.conf";
            	//filePath = "/etc/pf.conf";
            	filePath = "/data/acromate_home/firewall/anchor_filter.conf";		// 2012.11.21
            }
            
    		List 	calList 	= systemConfig.getFirewall();		// 데이타 조회
			logsql.open(filePath);

			//System.out.println("####### calList.size() : "+calList.size());
			
//			for(int i=0;i<calList.size();i++){
//				aclTemp = (String)calList.get(i);

//				if(!aclTemp.equals("")){
//					if(aclCheck2(aclTemp, deleteStr)){
//						if(i==calList.size()-1){
//							aclString.append(aclTemp);
//						}else{
//							aclString.append(aclTemp+"\n");
//						}
//					}						
//				}	
//			}
			
			System.out.println("calList.size() : "+calList.size());
			for(int i=0;i<calList.size();i++){
				aclTemp = (String)calList.get(i);

				if(aclTemp.length()>=20){			
					if( ("block in on "+wan+" ").equals(aclTemp.substring(0,13+wan.length()))||("pass in on "+wan+" ").equals(aclTemp.substring(0,12+wan.length()))){
						if(aclCheck2(aclTemp, deleteStr)){
							//aclString.append(aclTemp+"\n");
							
							//System.out.println("i : "+i);
							//System.out.println("aclTemp : "+aclTemp);
							
							if(i==calList.size()-1){
								aclString.append(aclTemp);
								
								//System.out.println("end Print : 00");
							}else{
								aclString.append(aclTemp+"\n");
								
								//System.out.println("end Print : 01");
							}
						}else{

						}						
					}else{
						//aclString.append(aclTemp+"\n");
						if(i==calList.size()-1){
							aclString.append(aclTemp);
							
							//System.out.println("end Print : 03");
						}else{
							aclString.append(aclTemp+"\n");
							
							//System.out.println("end Print : 04");
						}
					}
				}else{
					//aclString.append(aclTemp+"\n");
					if(i==calList.size()-1){
							aclString.append(aclTemp);
							
							//System.out.println("end Print : 05");
					}else{
						aclString.append(aclTemp+"\n");
						
						//System.out.println("end Print : 06");
					}
				}
			}
			
			logsql.write("",aclString.toString());			
			logsql.close();                
			
        	nResult = 1;
			
        } catch (Exception e) {
        	
        	e.printStackTrace();
        } finally {
        	
        }
        
        return nResult ;
    }

	// 2012.05.02 신규 DHCP, 방화벽 관련 rc.conf.local 파일 추가,  rc.conf , dhcpd.conf 파일 수정 , dhcpd.sh 부분 삭제 
	public int makeFile_Hybrid_20120502(SystemConfigDTO systemConfigDTO, String loopChk, String goodsName_Type) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        //String 			dhcpTemp	= "";
        StringBuffer 	rcString 	= new StringBuffer();
        //StringBuffer 	rcString 	= new StringBuffer();
        
        // 서버로부터 DataStatement 객체를 할당
        DataStatement 	stmt = null;        
        try {
        	stmt 			= ConnectionManager.allocStatement("SSW");
        	CommonData		commonData	= new CommonData();
        	String 			domainid 	= commonData.getDomain(stmt);			// 도메인ID 조회
        	String 			domain		= "";
        	String			sql			= "";
        	String			hostname	= "";
        	
        	if("".equals(domainid)){
        		domainid 	= systemConfigDTO.getWanId();
        		domain 		= domainid + ".callbox.kt.com";
        		hostname 	= domain;
        	}else{
        		hostname = domainid;
        	}
        	
        	// 고정 IP 주소 인 경우
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/rc.conf";		// 테스트
            	filePath = "D:/etc/rc.conf.local";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }else{
            	//filePath = "/etc/rc.conf";
            	filePath = "/etc/rc.conf.local";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }        	

    		List 				rcList 			= systemConfig.getRcConfigList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				// 게이트웨이
				if(rcTemp.length()>=13){			
					if("defaultrouter".equals(rcTemp.substring(0,13))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+1)+"$"+systemConfigDTO.getWanGateway()+"$";
						rcTemp = rcTemp.replace('$', '"');
					}
				}

				// IP주소, 서비넷마스크
				if(rcTemp.length()>=13){
					// 외부 네트워크
					if("ifconfig_wan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getWanIp()+" netmask "+systemConfigDTO.getWanMask()+"$";
						rcTemp = temp2.replace('$', '"');
					}						
					// 내부 네트워크
					if("ifconfig_lan=".equals(rcTemp.substring(0,13))){
						nTemp = rcTemp.indexOf("=");				
						String temp1 = rcTemp.substring(0, nTemp+1);
						String temp2 = temp1+"$"+"inet "+systemConfigDTO.getLanIp()+" netmask "+systemConfigDTO.getLanMask()+"$";
						rcTemp = temp2.replace('$', '"');						
					}					
				}					
				//rcString.append(rcTemp+"\n");
				if(i==rcList.size()-1){
					rcString.append(rcTemp);
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                

			//////////////////////////////////////////////////////////////////////////////////////////////////////

        	// 2012.05.02 신규(보안관련)  수정 =================================================================
			String 			rcLocalTemp		= "";
			StringBuffer 	dhcpUseString 	= new StringBuffer();
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/rc.conf.local";		// 테스트
            	filePath = "D:/etc/rc.conf";			// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }else{
            	//filePath = "/etc/rc.conf.local";
            	filePath = "/etc/rc.conf";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }        	

    		List 		rcLocalList 	= systemConfig.getDHCPConfigList();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcLocalList.size();i++){
				rcLocalTemp = (String)rcLocalList.get(i);
				
				if(rcLocalTemp.length()>=17){
					if("loopdetect_enable".equals(rcLocalTemp.substring(0,17))){
						nTemp = rcLocalTemp.indexOf("=");
						rcLocalTemp = rcLocalTemp.substring(0, nTemp+1)+"$"+loopChk+"$";
						rcLocalTemp = rcLocalTemp.replace('$', '"');
					}
				}
				
				if(i==rcLocalList.size()-1){
					dhcpUseString.append(rcLocalTemp);
				}else{
					dhcpUseString.append(rcLocalTemp+"\n");
				}
			}
				
			logsql.write("",dhcpUseString.toString());			
			logsql.close();                

			// ===================================================================================================

			
			// 내부 네트워크 환경 -------------------------------------------------
			StringBuffer 	dhcpChkString 	= new StringBuffer();
			if("2".equals(systemConfigDTO.getSelectLan())){
				// DHCP 사용안함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if(!"#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					//logsql.open("D:/etc/dhcpd.sh");
					logsql.open(filePath);
					
					dhcpTemp = "#"+lTemp;
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}else{
				// DHCP 사용함
				String lTemp 	= systemConfig.getDHCP();		// DHCP 사용유형				
				String dhcpTemp = "";
				if("#".equals(lTemp.substring(0,1))){					
	                osType = systemConfig.osChk();
	                if("win".equals(osType)){
	                	filePath = "D:/etc/dhcpd.sh";		// 테스트
	                }else{
	                	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
	                }

					logsql.open(filePath);
					
					dhcpTemp = lTemp.replace("#", "");
					//dhcpTemp = lTemp;
					
					dhcpChkString.append(dhcpTemp+"\n");
					logsql.write("",dhcpChkString.toString());			
					logsql.close();					
				}
			}
			// -----------------------------------------------------------------
			
			
			StringBuffer 	dhcpString 	= new StringBuffer();
			// DHCP 사용함
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/dhcpd.conf";
            }

			List 				dhcpList 		= systemConfig.getLanConfigList();		// 데이타 조회
			String				dhcpStr			= "";
			String				dhcpd_Type		= "1";		// (1: Lan, 2: gw)
			
			logsql.open(filePath);
			
			for(int i=0;i<dhcpList.size();i++){
				dhcpStr = (String)dhcpList.get(i);		
				
				if(dhcpStr.length()>=5){
					if("# lan".equals(dhcpStr.substring(0,5))){
						dhcpd_Type = "1";
					}
				}
				if(dhcpStr.length()>=4){
					if("# gw".equals(dhcpStr.substring(0,4))){
						dhcpd_Type = "2";
					}
				}
				
				if(dhcpStr.length()>=18){
					// 내부 서브넷마스크
					if("option subnet-mask".equals(dhcpStr.substring(0,18))){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option subnet-mask "+systemConfigDTO.getLanMask()+";";
						}
					}
				}
				// 내부 DNS서버
				//if(dhcpStr.length()>=26){
				//	if("option domain-name-servers".equals(dhcpStr.substring(0,26))){
				//		dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanDns()+";";
				//	}
				//}
				
				// 내부 IP주소 갱신 주기
//				if(dhcpStr.length()>=14){
//					if("max-lease-time".equals(dhcpStr.substring(0,14))){
//						dhcpStr = "max-lease-time "+systemConfigDTO.getTimeCycle()+";";
//					}
//				}
				
				if(dhcpStr.length()>=6){
					// 내부 서브넷마스크
					if("subnet".equals(dhcpStr.substring(0,6))){
						if("1".equals(dhcpd_Type)){
							String[]	tempIp 	= systemConfigDTO.getLanIp().split("[.]");
							dhcpStr = "subnet "+tempIp[0]+"."+tempIp[1]+"."+tempIp[2]+".0"+" netmask "+systemConfigDTO.getLanMask()+" {";
						}
					}
					// 내부 IP주소 범위
					if("range".equals(dhcpStr.substring(0,6).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "range "+systemConfigDTO.getStartIp()+" "+systemConfigDTO.getEndIp()+";";	// IP 시작
						}
					}						
				}
				// 내부 IP주소
				if(dhcpStr.length()>=24){
					if("option tftp-server-name".equals(dhcpStr.substring(0,24).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option tftp-server-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
							dhcpStr = dhcpStr.replace('$', '"');
						}
					}
				}
				// 내부 IP주소
				if(dhcpStr.length()>=15){
					if("option routers".equals(dhcpStr.substring(0,15).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option routers "+systemConfigDTO.getLanIp()+";";
						}
					}
				}
				
				// 내부 IP주소 (2011.10.10 추가) ===========================
				if(dhcpStr.length()>=19){
					if("option domain-name ".equals(dhcpStr.substring(0,19))){
						dhcpStr = "option domain-name "+"$"+systemConfigDTO.getLanIp()+"$"+";";
						dhcpStr = dhcpStr.replace('$', '"');
					}
				}
				if(dhcpStr.length()>=27){
					if("option domain-name-servers".equals(dhcpStr.substring(0,27).trim())){
						if("1".equals(dhcpd_Type)){
							dhcpStr = "option domain-name-servers "+systemConfigDTO.getLanIp()+";";
						}
					}
				}
				// =====================================================
				
				//dhcpString.append(dhcpStr+"\n");
				if(i==dhcpList.size()-1){
					dhcpString.append(dhcpStr);
				}else{
					dhcpString.append(dhcpStr+"\n");
				}
			}
			
			logsql.write("",dhcpString.toString());			
			logsql.close();                				
			// -----------------------------------------------------------------
			
			
			// hosts 파일변경    ////////////////////////////////////////////////////////////////////////////////////
			osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/hosts";		// 테스트
            }else{
            	filePath = "/etc/hosts";
            }

    		StringBuffer 	hostsString 	= new StringBuffer();
			logsql.open(filePath);
			
			String 		tempDomain = "";
			String 		tempHosts  = "";
			String 		tempHosts1 = "";
			String 		tempHosts2 = "";
			String 		tempHosts3 = "";
			String 		tempHosts4 = "";
			String[]	tempHostsId;
			
			tempHostsId = hostname.split("[.]");
			tempHosts 	= tempHostsId[0];
			tempDomain	= tempHostsId[1]+"."+tempHostsId[2]+"."+tempHostsId[3];
			
			tempHosts1 = "::1"+"\t"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts1+"\n");
			tempHosts2 = "127.0.0.1"+"\t"+"\t"+"localhost localhost."+tempDomain;
			hostsString.append(tempHosts2+"\n");
			tempHosts3 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+" "+tempHosts;
			hostsString.append(tempHosts3+"\n");
			tempHosts4 = systemConfigDTO.getWanIp()+"\t"+"\t"+hostname+".";
			hostsString.append(tempHosts4+"\n");
			
			logsql.write("",hostsString.toString());			
			logsql.close();
			// ---------------------------------------------------------------------
			//////////////////////////////////////////////////////////////////////////////////////////////////////
			
			
			makeEMSFile_Hybrid(systemConfigDTO, goodsName_Type);			// WAR파일 만들때 확인
			dbIpUpdate_Hybrid(systemConfigDTO);			// WAR파일 만들때 확인
			
        	nResult = 1;
			
        	// 유닉스 장비이면 리브팅  (2012.08.14 주석처리 cmd 에서 reboot 하게 수정)
//        	String osType3 = systemConfig.osChk();
//        	if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
        	
        } catch (Exception e) {
        	// Transaction  Rollback 처리
//        	stmt.endTransaction(false);		// rollback 처리
        	
        	e.printStackTrace();
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (stmt != null ) ConnectionManager.freeStatement(stmt);	        	
        	
        }
        
        return nResult ;
    }

	public int makeFile_BlackIpConfig(String errCount, String selectTime) {
        int 			nResult 	= 0;
        int				nTemp		= 0;
        String 			rcTemp 		= "";
        StringBuffer 	rcString 	= new StringBuffer();
        
        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/jail.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/fail2ban/jail.conf";
            }
            
    		List 	rcList 	= systemConfig.getBlackIPConfig();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<rcList.size();i++){
				rcTemp = (String)rcList.get(i);
				
				if(rcTemp.length()>=16){			
					if("findtime        ".equals(rcTemp.substring(0,16))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+2)+selectTime;
					}
					
					if("maxretry        ".equals(rcTemp.substring(0,16))){
						//System.out.println("문자열 :"+tempStr);				
						nTemp = rcTemp.indexOf("=");
						rcTemp = rcTemp.substring(0, nTemp+2)+errCount;
					}
				}

				//rcString.append(rcTemp+"\n");
				if(i==rcList.size()-1){
					rcString.append(rcTemp);
				}else{
					rcString.append(rcTemp+"\n");
				}
			}
				
			logsql.write("",rcString.toString());			
			logsql.close();                

        	nResult = 1;
			
        } catch (Exception e) {
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }
	
	public int geoIP_acrosswConfig(String geoipType) {
        int 			nResult 		= 0;
        String 			acrossTemp 		= "";
        StringBuffer 	acrossString 	= new StringBuffer();
        
        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }
            
            List 	acrossList 	= systemConfig.getAcrossCfg();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<acrossList.size();i++){
				acrossTemp = (String)acrossList.get(i);
				
				if(acrossTemp.length()>=18){
					if("enableGeoIpChecker".equals(acrossTemp.substring(0,18))){
						acrossTemp = acrossTemp.substring(0, 18)+" = "+geoipType+"		; enable 1, disable 0";
					}
				}
				
				if(i==acrossList.size()-1){
					acrossString.append(acrossTemp);
				}else{
					acrossString.append(acrossTemp+"\n");
				}
			}
				
			logsql.write("",acrossString.toString());			
			logsql.close();                

        	nResult = 1;

        	// 유닉스 장비이면 프로세스 재실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)){
        		linuxShell.runShell("/bin/pkill acrossw");
        		System.out.println("GeoIP Command : /bin/pkill acrossw");
        	}else{
        		System.out.println("GeoIP 기능 적용 명령어 : /bin/pkill acrossw");
        	}

        } catch (Exception e) {
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }
	
	public int qos_acrosswConfig(int qosValues) {
        int 			nResult 		= 0;
        String 			acrossTemp 		= "";
        StringBuffer 	acrossString 	= new StringBuffer();
        
        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }
            
            List 	acrossList 	= systemConfig.getAcrossCfg();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<acrossList.size();i++){
				acrossTemp = (String)acrossList.get(i);
				
				if(acrossTemp.length()>=11){
					if("options.tos".equals(acrossTemp.substring(0,11))){
						acrossTemp = acrossTemp.substring(0, 11)+" = "+qosValues;
					}
				}
				
				if(i==acrossList.size()-1){
					acrossString.append(acrossTemp);
				}else{
					acrossString.append(acrossTemp+"\n");
				}
			}
				
			logsql.write("",acrossString.toString());			
			logsql.close();                

        	nResult = 1;

        	// 유닉스 장비이면 실행
        	osType = systemConfig.osChk();
        	if("uix".equals(osType)){ 
        		linuxShell.runShell("/bin/pkill acrossw");
        		System.out.println("QoS Command : /bin/pkill acrossw");
        	}else{
        		System.out.println("Windows QoS Command : /bin/pkill acrossw");
        	}
        } catch (Exception e) {
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }

	public int qos_acronfrConfig(int qosValues) {
        int 			nResult 		= 0;
        String 			acronfrTemp		= "";
        StringBuffer 	acronfrString 	= new StringBuffer();
        
        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acronfr.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acronfr.cfg";
            }
            
            List 	acronfrList 	= systemConfig.getAcronfrCfg();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<acronfrList.size();i++){
				acronfrTemp = (String)acronfrList.get(i);
				
				if(acronfrTemp.length()>=18){
					if("bindingTosPriority".equals(acronfrTemp.substring(0,18))){
						acronfrTemp = acronfrTemp.substring(0, 18)+" = "+qosValues;
					}
				}
				
				if(i==acronfrList.size()-1){
					acronfrString.append(acronfrTemp);
				}else{
					acronfrString.append(acronfrTemp+"\n");
				}
			}
				
			logsql.write("",acronfrString.toString());			
			logsql.close();                

        	nResult = 1;

        	// 유닉스 장비이면 실행
        	osType = systemConfig.osChk();
        	if("uix".equals(osType)){ 
        		linuxShell.runShell("/bin/pkill acronfr");
        		System.out.println("QoS Command : /bin/pkill acronfr");
        	}else{
        		System.out.println("Windows QoS Command : /bin/pkill acronfr");
        	}
        } catch (Exception e) {
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }

	public int geoPrefix_acrosswConfig(String geoPrefixType) {
        int 			nResult 		= 0;
        String 			acrossTemp2 		= "";
        StringBuffer 	acrossString2 	= new StringBuffer();
        
        try {
        	// 
            osType = systemConfig.osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }
            
            List 	acrossList2 	= systemConfig.getAcrossCfg();		// 데이타 조회
			logsql.open(filePath);
			
			for(int i=0;i<acrossList2.size();i++){
				acrossTemp2 = (String)acrossList2.get(i);
				
				if(acrossTemp2.length()>=22){
					if("enableGeoPrefixChecker".equals(acrossTemp2.substring(0,22))){
						acrossTemp2 = acrossTemp2.substring(0, 22)+" = "+geoPrefixType+"	; enable 1, disable 0";
					}
				}
				
				if(i==acrossList2.size()-1){
					acrossString2.append(acrossTemp2);
				}else{
					acrossString2.append(acrossTemp2+"\n");
				}
			}
				
			logsql.write("",acrossString2.toString());			
			logsql.close();                

        	nResult = 1;

        	// 유닉스 장비이면 프로세스 재실행
        	String osType3 = systemConfig.osChk();
        	if("uix".equals(osType3)){
        		linuxShell.runShell("/bin/pkill acrossw");
        		System.out.println("GeoIP Command : /bin/pkill acrossw");
        	}else{
        		System.out.println("GeoIP 기능 적용 명령어 : /bin/pkill acrossw");
        	}

        } catch (Exception e) {
        	e.printStackTrace();
        } finally {

        	
        }
        
        return nResult ;
    }

}
