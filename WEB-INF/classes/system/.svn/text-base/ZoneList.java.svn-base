package system;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;

import dto.FeatureServiceDTO;
import dto.system.NatNFreeDTO;
import dto.system.NatNFreeZoneDTO;
import dto.system.NatZoneDTO;
import dto.system.NatZoneRouteDTO;

public class ZoneList {
	public List getZoneList(DataStatement stmt) {		
		NatZoneDTO 			natZoneDTO;
        List<NatZoneDTO> 	zoneList 	= new ArrayList<NatZoneDTO>();
        
        String sql = "SELECT ZoneCode, ZoneName, Description FROM table_Zone ";
        sql = sql + "\n Order By ZoneCode ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natZoneDTO = new NatZoneDTO(
                    	Str.CheckNullString(rs.getString("ZoneCode")),                        
                    	Str.CheckNullString(rs.getString("ZoneName")),
                        Str.CheckNullString(rs.getString("Description"))
                    );

                	zoneList.add(natZoneDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zoneList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return zoneList;
    }

	public List getZoneDetail(DataStatement stmt, String zonecode) {		
		NatZoneDTO 			natZoneDTO;
        List<NatZoneDTO> 	zoneList 	= new ArrayList<NatZoneDTO>();
        
        String sql = "SELECT ZoneCode, ZoneName, Description FROM table_Zone ";
        sql = sql + "\n WHere ZoneCode = '"+zonecode+"' ";
        sql = sql + "\n Order By ZoneCode ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natZoneDTO = new NatZoneDTO(
                    	Str.CheckNullString(rs.getString("ZoneCode")),                        
                    	Str.CheckNullString(rs.getString("ZoneName")),
                        Str.CheckNullString(rs.getString("Description"))
                    );

                	zoneList.add(natZoneDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zoneList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return zoneList;
    }
	
	public List getFreeList(DataStatement stmt) {		
		NatNFreeDTO 		natNFreeDTO;
        List<NatNFreeDTO> 	freeList 	= new ArrayList<NatNFreeDTO>();
        
        String sql = "SELECT TrID, TrIP, TrPort, Description, MaxChannel, MinChannel, NormChannel, MaxCall, AlarmCall, CurrentCall, TosValue FROM TABLE_TR ";
        sql = sql + "\n Order By TrID ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natNFreeDTO = new NatNFreeDTO(
                    	Str.CheckNullString(rs.getString("TrID")),                        
                    	Str.CheckNullString(rs.getString("TrIP")),
                    	rs.getInt("TrPort"),
                        Str.CheckNullString(rs.getString("Description")),
                        rs.getInt("MaxChannel"),
                        rs.getInt("MinChannel"),
                        rs.getInt("NormChannel"),
                        rs.getInt("MaxCall"),
                        rs.getInt("AlarmCall"),
                        rs.getInt("CurrentCall"),
                        rs.getInt("TosValue")
                    );

                	freeList.add(natNFreeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return freeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return freeList;
    }

	
	public List getFreeDetail(DataStatement stmt, String trid) {		
		NatNFreeDTO 		natNFreeDTO;
        List<NatNFreeDTO> 	freeList 	= new ArrayList<NatNFreeDTO>();
        
        String sql = "SELECT TrID, TrIP, TrPort, Description, MaxChannel, MinChannel, NormChannel, MaxCall, AlarmCall, CurrentCall, TosValue FROM TABLE_TR ";
        sql = sql + "\n WHere TrID = '"+trid+"' ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natNFreeDTO = new NatNFreeDTO(
                    	Str.CheckNullString(rs.getString("TrID")),                        
                    	Str.CheckNullString(rs.getString("TrIP")),
                    	rs.getInt("TrPort"),
                        Str.CheckNullString(rs.getString("Description")),
                        rs.getInt("MaxChannel"),
                        rs.getInt("MinChannel"),
                        rs.getInt("NormChannel"),
                        rs.getInt("MaxCall"),
                        rs.getInt("AlarmCall"),
                        rs.getInt("CurrentCall"),
                        rs.getInt("TosValue")
                    );

                	freeList.add(natNFreeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return freeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return freeList;
    }
	
	public List getFreeZoneList(DataStatement stmt) {		
		NatNFreeZoneDTO 		natNFreeZoneDTO;
        List<NatNFreeZoneDTO> 	freeZoneList 	= new ArrayList<NatNFreeZoneDTO>();
        
        String sql = "SELECT TrID, ZoneCode, ZoneIP FROM table_TrZone ";
        sql = sql + "\n Order By Trid, ZoneCode ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natNFreeZoneDTO = new NatNFreeZoneDTO(
                    	Str.CheckNullString(rs.getString("TrID")),                        
                    	Str.CheckNullString(rs.getString("ZoneCode")),
                        Str.CheckNullString(rs.getString("ZoneIP"))
                    );

                	freeZoneList.add(natNFreeZoneDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return freeZoneList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return freeZoneList;
    }

	public List getFreeZoneDetail(DataStatement stmt, String trid, String zonecode) {		
		NatNFreeZoneDTO 		natNFreeZoneDTO;
        List<NatNFreeZoneDTO> 	freeZoneList 	= new ArrayList<NatNFreeZoneDTO>();
        
        String sql = "SELECT TrID, ZoneCode, ZoneIP FROM table_TrZone ";
        sql = sql + "\n WHere TrID = '"+trid+"' AND ZoneCode = '"+zonecode+"' ;";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natNFreeZoneDTO = new NatNFreeZoneDTO(
                    	Str.CheckNullString(rs.getString("TrID")),                        
                    	Str.CheckNullString(rs.getString("ZoneCode")),
                        Str.CheckNullString(rs.getString("ZoneIP"))
                    );

                	freeZoneList.add(natNFreeZoneDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return freeZoneList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return freeZoneList;
    }
	
	public List getZoneRouteList(DataStatement stmt) {		
		NatZoneRouteDTO 		natZoneRouteDTO;
        List<NatZoneRouteDTO> 	zoneRouteList 	= new ArrayList<NatZoneRouteDTO>();
        
        String sql = "SELECT InZone, OutZone, ServiceFlag, TrType, TrID FROM table_TrRoute ";
        sql = sql + "\n Order By InZone ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natZoneRouteDTO = new NatZoneRouteDTO(
                    	Str.CheckNullString(rs.getString("InZone")),                        
                    	Str.CheckNullString(rs.getString("OutZone")),
                    	rs.getInt("ServiceFlag"),
                    	rs.getInt("TrType"),
                        Str.CheckNullString(rs.getString("TrID"))
                    );

                	zoneRouteList.add(natZoneRouteDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zoneRouteList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return zoneRouteList;
    }

	public List getZoneRouteDetail(DataStatement stmt, String inzone, String outzone) {		
		NatZoneRouteDTO 		natZoneRouteDTO;
        List<NatZoneRouteDTO> 	zoneRouteList 	= new ArrayList<NatZoneRouteDTO>();
        
        String sql = "SELECT InZone, OutZone, ServiceFlag, TrType, TrID FROM table_TrRoute ";
        sql = sql + "\n WHere InZone = '"+inzone+"' AND OutZone = '"+outzone+"' ;";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	natZoneRouteDTO = new NatZoneRouteDTO(
                    	Str.CheckNullString(rs.getString("InZone")),                        
                    	Str.CheckNullString(rs.getString("OutZone")),
                    	rs.getInt("ServiceFlag"),
                    	rs.getInt("TrType"),
                        Str.CheckNullString(rs.getString("TrID"))
                    );

                	zoneRouteList.add(natZoneRouteDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zoneRouteList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return zoneRouteList;
    }
	
}
