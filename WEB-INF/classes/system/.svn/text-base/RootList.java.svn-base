package system;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;

import dto.CommonCodeDTO;
import dto.FeatureServiceDTO;
import dto.system.RootPrefixDTO;
import dto.system.SIPRegServerDTO;
import dto.system.RouteMonitorDTO;
import dto.system.RouteStateDTO;
import dto.system.DetourDTO;
import dto.system.RootErrBackUpDTO;

public class RootList {
	public List getList(DataStatement stmt) {		
		RootPrefixDTO 			rootPrefixDTO;
        List<RootPrefixDTO> 	rootPrefixList 	= new ArrayList<RootPrefixDTO>();
        
        String sql = "SELECT proxy.endpointid, proxy.indomainname, ";
        sql = sql + "\n proxy.signaladdress, proxy.outFromDomainname, proxy.outToDomainname, ";
        sql = sql + "\n routestate.routecode, routestate.groupid, routestate.stateFlag, routestate.serviceFlag, ";
        sql = sql + "\n routestate.inmaxcall, routestate.outmaxcall, routestate.totalmaxcall, routestate.zonecode "; 
        sql = sql + "\n FROM table_NeighborProxy proxy, table_RouteState routestate ";
        sql = sql + "\n where 1 = 1 and proxy.endpointid = routestate.endpointid ";
        sql = sql + "\n   and routestate.protocol = 2 and proxy.endpointclass = 40 ";
        sql = sql + "\n   and proxy.endpointid <> 'MS' ";
//        sql = sql + "\n Order By proxy.EndpointID ASC offset "+pageNo+" limit "+pageSize ;
        sql = sql + "\n Order By proxy.EndpointID ASC ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	rootPrefixDTO = new RootPrefixDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),                        
                        Str.CheckNullString(rs.getString("indomainname")),
                        Str.CheckNullString(rs.getString("signaladdress")),                                                    
                        Str.CheckNullString(rs.getString("outFromDomainname")),
                        Str.CheckNullString(rs.getString("outToDomainname")),
                        Str.CheckNullString(rs.getString("routecode")),
                        Str.CheckNullString(rs.getString("groupid")),                        
                        rs.getInt("stateFlag"),
                        rs.getInt("serviceFlag"),                        
                        rs.getInt("inmaxcall"),
                        rs.getInt("outmaxcall"),
                        rs.getInt("totalmaxcall"),
                        Str.CheckNullString(rs.getString("zonecode"))
                    );

                	rootPrefixList.add(rootPrefixDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return rootPrefixList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return rootPrefixList;
    }

	public int getCount(DataStatement stmt) {
		int count = 0 ;
		ResultSet rs = null;
		
        String sql = "SELECT count(*) "; 
        sql = sql + "\n FROM table_NeighborProxy proxy, table_RouteState routestate ";
        sql = sql + "\n where 1 = 1 and proxy.endpointid = routestate.endpointid ";
        sql = sql + "\n   and routestate.protocol = 2 and proxy.endpointclass = 40 ";
		
		try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return count;
    }

	
	public List getDetail(DataStatement stmt, String endpointid) {		
		
		RootPrefixDTO 			rootPrefixDTO;
        List<RootPrefixDTO> 	rootPrefixList 	= new ArrayList<RootPrefixDTO>();
        
        String sql = " SELECT  p.EndpointId, p.InViaAddress, p.InViaPort, p.SignalAddress, p.SignalPort, p.OutToDomainname, p.OutFromDomainname, "; 
        sql = sql + "\n 	p.Options, p.UriType, p.UriParam, p.DtmfType, p.AuthMode, p.indomainname, p.Password, p.UserName, ";
        sql = sql + "\n 	r.GroupId, r.ServiceFlag, r.GroupAttach, r.ChannelLimitMode, r.InMaxCall, r.InAlarmCall, r.OutMaxCall, r.OutAlarmCall, ";
        sql = sql + "\n 	r.TotalMaxCall, r.TotalAlarmCall, r.ZoneCode, r.InCutCID, r.InAddCID, r.OutCutCID, r.OutAddCID, "; 
        sql = sql + "\n 	r.InStartPosition, r.InCutPrefix, r.InAddPrefix, r.OutStartPosition, r.OutCutPrefix, r.InAddPrefix, r.OutAddPrefix, ";
        sql = sql + "\n 	r.RouteCode, r.StateFlag, r.maxdetourcount ";
        sql = sql + "\n FROM table_NeighborProxy p, table_RouteState r ";
        sql = sql + "\n where p.endpointid = '"+ endpointid + "' and p.endpointid = r.endpointid ";
        sql = sql + "\n   and r.protocol = 2 and p.endpointclass = 40 ";
    
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	rootPrefixDTO = new RootPrefixDTO(
                    	Str.CheckNullString(rs.getString("EndpointId")),                        
                        Str.CheckNullString(rs.getString("InViaAddress")),
                        rs.getInt("InViaPort"),                                                    
                        Str.CheckNullString(rs.getString("SignalAddress")),
                        rs.getInt("SignalPort"),
                        Str.CheckNullString(rs.getString("OutToDomainname")),
                        Str.CheckNullString(rs.getString("OutFromDomainname")),
                        rs.getInt("Options"),                        
                        rs.getInt("UriType"),
                        Str.CheckNullString(rs.getString("UriParam")),
                        rs.getInt("DtmfType"),
                        rs.getInt("AuthMode"),
                        Str.CheckNullString(rs.getString("indomainname")),                        
                        Str.CheckNullString(rs.getString("Password")),
                        Str.CheckNullString(rs.getString("UserName")),
                        Str.CheckNullString(rs.getString("GroupId")),
                        rs.getInt("ServiceFlag"),
                        rs.getInt("GroupAttach"),
                        rs.getInt("ChannelLimitMode"),
                        rs.getInt("InMaxCall"),
                        rs.getInt("InAlarmCall"),
                        rs.getInt("OutMaxCall"),
                        rs.getInt("OutAlarmCall"),
                        rs.getInt("TotalMaxCall"),
                        rs.getInt("TotalAlarmCall"),
                        Str.CheckNullString(rs.getString("ZoneCode")),
                        rs.getInt("InCutCID"),
                        Str.CheckNullString(rs.getString("InAddCID")),
                        rs.getInt("OutCutCID"),
                        Str.CheckNullString(rs.getString("OutAddCID")),
                        rs.getInt("InStartPosition"),
                        rs.getInt("InCutPrefix"),
                        Str.CheckNullString(rs.getString("InAddPrefix")),
                        rs.getInt("OutStartPosition"),
                        rs.getInt("OutCutPrefix"),
                        Str.CheckNullString(rs.getString("OutAddPrefix")),
                        Str.CheckNullString(rs.getString("RouteCode")),
                        rs.getInt("StateFlag"),
                        rs.getInt("maxdetourcount")
                    );

                	rootPrefixList.add(rootPrefixDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return rootPrefixList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return rootPrefixList;
    
    }
	
	
	public List SIPRegistList(DataStatement stmt) {		
		SIPRegServerDTO 		sipRegServerDTO;
        List<SIPRegServerDTO> 	sipRegServerList 	= new ArrayList<SIPRegServerDTO>();
        
        String sql = " SELECT subid, serverip, serverport, servertransport, userdomain, usernumber, expiretime ";
        sql = sql + "\n FROM table_SIPRegServer ";
        //sql = sql + "\n WHERE subid not in ('Sec_CSCF') ";
        sql = sql + "\n Order By subid ASC ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	sipRegServerDTO = new SIPRegServerDTO(
                    	Str.CheckNullString(rs.getString("subid")),                        
                        Str.CheckNullString(rs.getString("serverip")),
                        rs.getInt("serverport"),
                        rs.getInt("servertransport"),                        
                        Str.CheckNullString(rs.getString("userdomain")),                                                    
                        Str.CheckNullString(rs.getString("usernumber")),
                        rs.getInt("expiretime")
                    );

                	sipRegServerList.add(sipRegServerDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return sipRegServerList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return sipRegServerList;
    }

	public List RouteMonitorList(DataStatement stmt) {		
		RouteMonitorDTO 		routeMonitorDTO;
        List<RouteMonitorDTO> 	routeMonitorList 	= new ArrayList<RouteMonitorDTO>();
        
        String sql = " SELECT endpointid, subid, checkmode, fromnumber, tonumber, messagetype ";
        sql = sql + "\n FROM table_RouteMonitor ";
        sql = sql + "\n WHERE endpointid <> 'MS' ";
        //sql = sql + "\n WHERE endpointid not in ('MS', 'Sec_CSCF') ";
        sql = sql + "\n Order By endpointid, checkmode ASC ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeMonitorDTO = new RouteMonitorDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),                        
                        Str.CheckNullString(rs.getString("subid")),
                        rs.getInt("checkmode"),
                        Str.CheckNullString(rs.getString("fromnumber")),                                                    
                        Str.CheckNullString(rs.getString("tonumber")),
                        rs.getInt("messagetype")
                    );

                	routeMonitorList.add(routeMonitorDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeMonitorList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeMonitorList;
    }
	
	public List getDetailSipRegist(DataStatement stmt, String subid) {
		SIPRegServerDTO 		sipRegServerDTO;
        List<SIPRegServerDTO> 	sipRegServerList 	= new ArrayList<SIPRegServerDTO>();
        
        //String sql = " SELECT subid, serverip, serverport, servertransport, userdomain, usernumber, expiretime, userauthid, userauthpasswd ";
        String sql = " SELECT subid, serverip, serverport, servertransport, userdomain, usernumber, expiretime, userauthid, userauthpasswd, descriptor ";
        sql = sql + "\n FROM table_SIPRegServer ";
        sql = sql + "\n WHERE subid = '" + subid + "' ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	sipRegServerDTO = new SIPRegServerDTO(
                    	Str.CheckNullString(rs.getString("subid")),                        
                        Str.CheckNullString(rs.getString("serverip")),
                        rs.getInt("serverport"),
                        rs.getInt("servertransport"),                        
                        Str.CheckNullString(rs.getString("userdomain")),                                                    
                        Str.CheckNullString(rs.getString("usernumber")),
                        rs.getInt("expiretime"),
                        Str.CheckNullString(rs.getString("userauthid")),
                        Str.CheckNullString(rs.getString("userauthpasswd")),
                        Str.CheckNullString(rs.getString("descriptor"))
                    );

                	sipRegServerList.add(sipRegServerDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return sipRegServerList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return sipRegServerList;
    }

	public List getRouteID(DataStatement stmt) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT endpointid FROM table_RouteState ";
        //sql = sql + "\n Where endpointid <> 'MS' ";
        sql = sql + "\n Where endpointid not in ('MS', 'Sec_CSCF') ";
        sql = sql + "\n Order By endpointid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("endpointid"))
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getSipRegID(DataStatement stmt) {		
		SIPRegServerDTO 		sipRegServerDTO;
        List<SIPRegServerDTO> 	sipList 	= new ArrayList<SIPRegServerDTO>();
        
        String sql = " SELECT subid FROM table_SIPRegServer ";
        sql = sql + "\n Where subid not in ('MS', 'Sec_CSCF') ";
        sql = sql + "\n Order By subid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	sipRegServerDTO = new SIPRegServerDTO(
                    	Str.CheckNullString(rs.getString("subid"))
                    );

                	sipList.add(sipRegServerDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return sipList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return sipList;
    }
	
	public List getDetailRouteMonitor(DataStatement stmt, String endpointid, String checkmode) {
		RouteMonitorDTO 		routeMonitorDTO;
        List<RouteMonitorDTO> 	routeMonitorList 	= new ArrayList<RouteMonitorDTO>();
        
        String sql = " SELECT endpointid, subid, checkmode, fromnumber, tonumber, messagetype ";
        sql = sql + "\n FROM table_routemonitor ";
        sql = sql + "\n WHERE endpointid = '" + endpointid + "' ";
        sql = sql + "\n   AND checkmode  =  " + Integer.parseInt(checkmode) + " ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeMonitorDTO = new RouteMonitorDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),                        
                        Str.CheckNullString(rs.getString("subid")),
                        rs.getInt("checkmode"),
                        Str.CheckNullString(rs.getString("fromnumber")),                                                    
                        Str.CheckNullString(rs.getString("tonumber")),
                        rs.getInt("messagetype")
                    );

                	routeMonitorList.add(routeMonitorDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeMonitorList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeMonitorList;
    }

	public List getRouteGroupID(DataStatement stmt) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT ROUTEGROUPID FROM table_routegroupid ";
        sql = sql + "\n Order By ROUTEGROUPID ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
            	System.out.println("SQL문 : "+sql); 
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("ROUTEGROUPID"))
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getTimingRouteID(DataStatement stmt) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT TimingRouteID FROM table_TimingRouteid ";
        sql = sql + "\n Order By TimingRouteID ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("TimingRouteID"))
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getUserGroupID(DataStatement stmt) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " select groupid from table_SubscriberGroup ";
        sql = sql + "\n Order By groupid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("groupid"))
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getGroupID(DataStatement stmt) {		
		CommonCodeDTO 		commonCodeDTO;
        List<CommonCodeDTO> 	routeList 	= new ArrayList<CommonCodeDTO>();
        
        String sql = " select groupid from table_SubscriberGroup ";
        sql = sql + "\n Order By groupid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	commonCodeDTO = new CommonCodeDTO(
                    	Str.CheckNullString(rs.getString("groupid"))
                    );

                	routeList.add(commonCodeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getDomain(DataStatement stmt) {		
		CommonCodeDTO 		commonCodeDTO;
        List<CommonCodeDTO> 	routeList 	= new ArrayList<CommonCodeDTO>();
        
        String sql = " select domainid from table_domain ";
        //sql = sql + "\n Order By groupid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	commonCodeDTO = new CommonCodeDTO(
                    	Str.CheckNullString(rs.getString("domainid"))
                    );

                	routeList.add(commonCodeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getZone(DataStatement stmt) {		
		CommonCodeDTO 		commonCodeDTO;
        List<CommonCodeDTO> 	routeList 	= new ArrayList<CommonCodeDTO>();
        
        String sql = " select zonecode, zonename from table_Zone ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	commonCodeDTO = new CommonCodeDTO(
                    	Str.CheckNullString(rs.getString("zonecode")),
                    	Str.CheckNullString(rs.getString("zonename"))
                    );

                	routeList.add(commonCodeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }
	
	public List getRouteIDList(DataStatement stmt, String routeId) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT endpointid, protocol FROM table_RouteState ";
        //sql = sql + "\n Where endpointid <> 'MS' ";
        sql = sql + "\n Where endpointid not in ('MS', '" + routeId + "') ";
        sql = sql + "\n Order By endpointid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),
                    	rs.getInt("protocol")
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	
	public int getRoundRouteCount(DataStatement stmt, String routeId) {
		int count = 0 ;
		ResultSet rs = null;
		
        String sql = "SELECT count(*) FROM table_detour "; 
        sql = sql + "\n Where endpointid = '" + routeId + "' ";
		
		try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return count;
    }
	
	public List getRoundRouteIDList(DataStatement stmt, String routeId) {		
		DetourDTO 			detourDTO;
        List<DetourDTO> 	detourList 	= new ArrayList<DetourDTO>();
        
        String sql = " SELECT detourendpointid, detourprotocol FROM table_detour ";
        sql = sql + "\n Where endpointid = '" + routeId + "' ";
        sql = sql + "\n Order By detourindex ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	detourDTO = new DetourDTO(
                    	Str.CheckNullString(rs.getString("detourendpointid")),
                    	rs.getInt("detourprotocol")
                    );

                	detourList.add(detourDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return detourList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return detourList;
    }

	public List getRoundRouteIDList2(DataStatement stmt, String routeId) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT endpointid, protocol FROM table_RouteState ";
        sql = sql + "\n Where ((endpointid not in (SELECT detourendpointid FROM table_detour Where endpointid = '" + routeId + "' )) ";
        sql = sql + "\n   And (endpointid not in ('MS', '" + routeId + "'))) ";
        sql = sql + "\n Order By endpointid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),
                    	rs.getInt("protocol")
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }
	
	public List getRouteID2(DataStatement stmt) {		
		RouteStateDTO 		routeStateDTO;
        List<RouteStateDTO> 	routeList 	= new ArrayList<RouteStateDTO>();
        
        String sql = " SELECT endpointid, protocol FROM table_RouteState ";
        sql = sql + "\n Where endpointid <> 'MS' ";
        sql = sql + "\n Order By endpointid ";
        
        System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	routeStateDTO = new RouteStateDTO(
                        	Str.CheckNullString(rs.getString("endpointid")),
                        	rs.getInt("protocol")
                    );

                	routeList.add(routeStateDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return routeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return routeList;
    }

	public List getSmsRouteList(DataStatement stmt) {		
		RootPrefixDTO 			rootPrefixDTO;
        List<RootPrefixDTO> 	rootPrefixList 	= new ArrayList<RootPrefixDTO>();
        
        String sql = "SELECT proxy.endpointid, proxy.indomainname, ";
        sql = sql + "\n proxy.signaladdress, proxy.outFromDomainname, proxy.outToDomainname, ";
        sql = sql + "\n routestate.routecode, routestate.groupid, routestate.stateFlag, routestate.serviceFlag, ";
        sql = sql + "\n routestate.inmaxcall, routestate.outmaxcall, routestate.totalmaxcall, routestate.zonecode, ";
        sql = sql + "\n (select count(*) from table_routeservice where endpointid = proxy.endpointid and serviceno = 6051) as rcount "; 
        sql = sql + "\n FROM table_NeighborProxy proxy, table_RouteState routestate ";
        sql = sql + "\n where 1 = 1 and proxy.endpointid = routestate.endpointid ";
        sql = sql + "\n   and routestate.protocol = 2 and proxy.endpointclass = 40 ";
        sql = sql + "\n   and proxy.endpointid <> 'MS' ";
        sql = sql + "\n Order By proxy.EndpointID ASC ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	rootPrefixDTO = new RootPrefixDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),                        
                        Str.CheckNullString(rs.getString("indomainname")),
                        Str.CheckNullString(rs.getString("signaladdress")),                                                    
                        Str.CheckNullString(rs.getString("outFromDomainname")),
                        Str.CheckNullString(rs.getString("outToDomainname")),
                        Str.CheckNullString(rs.getString("routecode")),
                        Str.CheckNullString(rs.getString("groupid")),                        
                        rs.getInt("stateFlag"),
                        rs.getInt("serviceFlag"),                        
                        rs.getInt("inmaxcall"),
                        rs.getInt("outmaxcall"),
                        rs.getInt("totalmaxcall"),
                        Str.CheckNullString(rs.getString("zonecode")),
                        rs.getInt("rcount")
                    );

                	rootPrefixList.add(rootPrefixDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return rootPrefixList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return rootPrefixList;
    }

	public List getErrBackUpList(DataStatement stmt) {		
		RootErrBackUpDTO 			rootErrBackUpDTO;
        List<RootErrBackUpDTO> 	rootPrefixList 	= new ArrayList<RootErrBackUpDTO>();
        
        String sql = "SELECT proxy.endpointid, routestate.routecode, ";
        sql = sql + "\n proxy.indomainname, proxy.signaladdress, ";
        sql = sql + "\n (Select count(*) From table_routegroup Where endpointid = proxy.endpointid) as backUpCount, ";
        sql = sql + "\n (Select routeindex From table_routegroup Where endpointid = proxy.endpointid) as routeIndex ";
        sql = sql + "\n FROM table_NeighborProxy proxy, table_RouteState routestate ";
        sql = sql + "\n where 1 = 1 and proxy.endpointid = routestate.endpointid ";
        sql = sql + "\n   and routestate.protocol = 2 and proxy.endpointclass = 40 ";
        sql = sql + "\n   and proxy.endpointid not in('MS', 'Pri_CSCF', 'Sec_CSCF') ";
        sql = sql + "\n Order By proxy.EndpointID ASC ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	rootErrBackUpDTO = new RootErrBackUpDTO(
                    	Str.CheckNullString(rs.getString("endpointid")),                        
                    	Str.CheckNullString(rs.getString("routecode")),
                    	Str.CheckNullString(rs.getString("indomainname")),
                        Str.CheckNullString(rs.getString("signaladdress")),
                        rs.getInt("backUpCount"),
                        rs.getInt("routeIndex")
                    );

                	rootPrefixList.add(rootErrBackUpDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return rootPrefixList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return rootPrefixList;
    }

}
