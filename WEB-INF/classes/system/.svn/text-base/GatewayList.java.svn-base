package system;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;

import dto.system.GatewayDataDTO;

public class GatewayList {
	public List getGatewayList(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	gatewayDataList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = "SELECT a.deviceid as deviceId, a.state as deviceState, a.devicetype as deviceType, ";
        sql = sql + "\n 	b.channelid as channelId, b.serviceflag as serviceFlag, b.stateflag as stateFlag, ";
        sql = sql + "\n 	b.forwardnumber as forwardNumber, c.startprefix as startPrefix ";
        sql = sql + "\n FROM table_device a ";
        sql = sql + "\n LEFT JOIN table_devicechannel b ON a.deviceid = b.deviceid ";
        sql = sql + "\n LEFT OUTER JOIN table_channelnumber c ON b.deviceid = c.deviceid AND b.channelid = c.channelid ";
        sql = sql + "\n ORDER BY a.deviceid, b.channelid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));                        
                	gatewayDataDTO.setDeviceState(Str.CheckNullString(rs.getString("deviceState")));
                	gatewayDataDTO.setDeviceType(Str.CheckNullString(rs.getString("deviceType")));
                	gatewayDataDTO.setChannelId(Str.CheckNullString(rs.getString("channelId")));
                	gatewayDataDTO.setServiceFlag(Str.CheckNullString(rs.getString("serviceFlag")));
                	gatewayDataDTO.setStateFlag(Str.CheckNullString(rs.getString("stateFlag")));
                	gatewayDataDTO.setForwardNumber(Str.CheckNullString(rs.getString("forwardNumber")));
                	gatewayDataDTO.setStartPrefix(Str.CheckNullString(rs.getString("startPrefix")));

                	gatewayDataList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return gatewayDataList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return gatewayDataList;
    }

	public List getDeviceList(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	deviceList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " Select deviceid, state, devicetype From table_device Order By deviceid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO(
		                	Str.CheckNullString(rs.getString("deviceId")),                        
		                	Str.CheckNullString(rs.getString("state")),
		                	Str.CheckNullString(rs.getString("deviceType"))
                	);
                	
                	deviceList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return deviceList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return deviceList;
    }

	public List getChannelList(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	gatewayDataList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = "SELECT a.deviceid as deviceId, a.state as deviceState, a.devicetype as deviceType, ";
        sql = sql + "\n 	b.channelid as channelId, b.serviceflag as serviceFlag, b.stateflag as stateFlag, ";
        sql = sql + "\n 	b.forwardnumber as forwardNumber, c.startprefix as startPrefix ";
        sql = sql + "\n FROM table_device a ";
        sql = sql + "\n LEFT JOIN table_devicechannel b ON a.deviceid = b.deviceid ";
        sql = sql + "\n LEFT OUTER JOIN table_channelnumber c ON b.deviceid = c.deviceid AND b.channelid = c.channelid ";
        sql = sql + "\n WHERE a.state = 0 ";
        sql = sql + "\n ORDER BY a.deviceid, b.channelid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));                        
                	gatewayDataDTO.setDeviceState(Str.CheckNullString(rs.getString("deviceState")));
                	gatewayDataDTO.setDeviceType(Str.CheckNullString(rs.getString("deviceType")));
                	gatewayDataDTO.setChannelId(Str.CheckNullString(rs.getString("channelId")));
                	gatewayDataDTO.setServiceFlag(Str.CheckNullString(rs.getString("serviceFlag")));
                	gatewayDataDTO.setStateFlag(Str.CheckNullString(rs.getString("stateFlag")));
                	gatewayDataDTO.setForwardNumber(Str.CheckNullString(rs.getString("forwardNumber")));
                	gatewayDataDTO.setStartPrefix(Str.CheckNullString(rs.getString("startPrefix")));

                	gatewayDataList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return gatewayDataList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return gatewayDataList;
    }

	public List getDeviceType(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	getDeviceList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " SELECT deviceid, devicetype FROM( ";
        sql = sql + "\n 	SELECT a.deviceid , count(a.deviceid) as aa , a.devicetype FROM table_device a ";
        sql = sql + "\n 	LEFT JOIN table_devicechannel b ON a.deviceid = b.deviceid ";
        sql = sql + "\n 	LEFT OUTER JOIN table_channelnumber c ON b.deviceid = c.deviceid AND b.channelid = c.channelid ";
        sql = sql + "\n 	WHERE a.state = 0 ";
        sql = sql + "\n 	Group By a.deviceid, a.devicetype  ";
        sql = sql + "\n 	ORDER BY a.deviceid ) BB ";
        sql = sql + "\n WHERE 1=1 AND BB.aa < 4 ";
        sql = sql + "\n Group By deviceid, devicetype ";
        sql = sql + "\n ORDER BY deviceid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));                        
                	gatewayDataDTO.setDeviceType(Str.CheckNullString(rs.getString("deviceType")));

                	getDeviceList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return getDeviceList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return getDeviceList;
    }

	public List getE164NumberList(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	getE164List 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " SELECT e164.e164 as e164 ";
        sql = sql + "\n From Table_SipEndpoint ep ";
        sql = sql + "\n 	LEFT JOIN  table_e164Route route ON ep.ENDPOINTID = route.ENDPOINTID and route.routingNumbertype in (1, 2, 5) ";
        sql = sql + "\n 	JOIN  table_e164 e164 ON e164.e164 = route.e164 ";
        sql = sql + "\n WHERE ep.ENDPOINTID not like 'ACRO_MS_%' ";
        sql = sql + "\n   And ep.ENDPOINTID not in (select coalesce(auth_id,'') from NASA_TRUNK_SET) ";
        sql = sql + "\n   And ep.endpointclass = 33 ";
        sql = sql + "\n   And e164.e164 not in (select e164 from table_e164 a, table_channelnumber b Where a.e164 = b.startprefix) ";
        sql = sql + "\n Group By e164.e164 ";
        sql = sql + "\n ORDER BY e164.e164 ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setE164(Str.CheckNullString(rs.getString("e164")));                        

                	getE164List.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return getE164List;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return getE164List;
    }

	public List getChannelDetail(DataStatement stmt, String  deviceId, String channelNo) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	getDetailList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " Select a.deviceid, a.channelid, a.serviceflag, a.forwardnumber, b.startprefix ";
        sql = sql + "\n From table_devicechannel a ";
        sql = sql + "\n LEFT OUTER JOIN table_channelnumber b ON a.deviceid = b.deviceid And a.channelid = b.channelid ";
        sql = sql + "\n Where a.deviceid = '"+deviceId+"' and a.channelid = "+Integer.parseInt(channelNo)+" ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));
                	gatewayDataDTO.setChannelId(Str.CheckNullString(rs.getString("channelid")));
                	gatewayDataDTO.setServiceFlag(Str.CheckNullString(rs.getString("serviceflag")));
                	gatewayDataDTO.setForwardNumber(Str.CheckNullString(rs.getString("forwardnumber")));
                	gatewayDataDTO.setStartPrefix(Str.CheckNullString(rs.getString("startprefix")));

                	getDetailList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return getDetailList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return getDetailList;
    }

	public List getBeforeDevice(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	getDeviceList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " Select deviceid From table_device Where state = 0 Order by deviceid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));                        

                	getDeviceList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return getDeviceList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return getDeviceList;
    }

	public List getAfterDevice(DataStatement stmt) {		
		GatewayDataDTO 			gatewayDataDTO;
        List<GatewayDataDTO> 	getDeviceList 	= new ArrayList<GatewayDataDTO>();
        
        String sql = " Select deviceid From table_device Where state = 1 Order by deviceid ";
        
        //System.out.println("SQL문 : "+sql);        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                while (rs.next()) {
                	gatewayDataDTO = new GatewayDataDTO();
                	gatewayDataDTO.setDeviceId(Str.CheckNullString(rs.getString("deviceId")));                        

                	getDeviceList.add(gatewayDataDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return getDeviceList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return getDeviceList;
    }

}
