package system;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import framework.Shell.LinuxShell;

import com.acromate.driver.db.DataStatement ;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class SystemConfigSet{
	private String osType 	= "";
	private String filePath = "";
	/**
	* WAN, LAN 인터페이스 확인 
	*/	
	public List getNetWorkType() {		
        List	netWorkList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/pf.conf";		// 테스트
            }else{
            	filePath = "/etc/pf.conf";
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	netWorkList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return netWorkList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return netWorkList;
    }
	
	/**
	* 외부 네트워크 환경 
	*/		
	public List getRcConfigList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
//            	filePath = "D:/etc/rc.conf";		// 테스트
            	filePath = "D:/work_jsp/_debugRoot/rc.conf.local.txt";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }else{
            	//filePath = "/etc/rc.conf";
            	filePath = "/etc/rc.conf.local";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }
	public String getWanGatewayIp() {		
		String wanGatewayIp = "";
		BufferedReader reader = null;
        try {
            osType = osChk();
            if("win".equals(osType)){
//            	filePath = "D:/etc/rc.conf";		// 테스트
            	filePath = "D:/work_jsp/_debugRoot/rc.local.txt";
            }else{
            	//filePath = "/etc/rc.conf";
            	filePath = "/etc/rc.local";	
            }        	
            reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	if(strTemp.contains("setfib 0 route add default")){
            		wanGatewayIp = (strTemp=strTemp.trim()).substring(strTemp.lastIndexOf("default")+ 7).trim();
            		System.out.println("Wan Gateway = "+wanGatewayIp);
            		break;
            	}
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
            	if(reader!=null) reader.close();
            } catch (Exception e) {}
        }
        return wanGatewayIp;
    }

	/**
	* 내부 네트워크 환경 
	*/		
	public List getLanConfigList() {		
        List	lanList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/dhcpd.conf";
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String lanTemp;
            while ((lanTemp = reader.readLine()) != null) {
            	lanList.add(lanTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return lanList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return lanList;
    }
	
	/**
	* DNS 가져오기 
	*/		
	public String getDNS() {		
        String returnDNS = "";
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/resolv.conf";		// 테스트
            }else{
            	filePath = "/etc/resolv.conf";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	if("nameserver".equals(strTemp.substring(0,10))){
            		returnDNS = strTemp.substring(10, strTemp.length()).trim();
            		reader.close();
            		return returnDNS;
            	}
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnDNS;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return returnDNS;
    }

	/**
	* DNS List 가져오기 
	*/	
	public List getDNSList() {		
		List	dnsList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/resolv.conf";		// 테스트
            }else{
            	filePath = "/etc/resolv.conf";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String dnsTemp;
            while ((dnsTemp = reader.readLine()) != null) {
            	dnsList.add(dnsTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dnsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return dnsList;
    }
	
	/**
	* DHCP 사용유무 
	*/		
	public String getDHCP() {		
        String returnDHCP = "";
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dhcpd.sh";		// 테스트
            }else{
            	filePath = "/usr/local/etc/rc.d/dhcpd.sh";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            returnDHCP = reader.readLine();
            reader.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnDHCP;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return returnDHCP;
    }

	/**
	* OS가 Windows 인지 Unix 인지 체크 
	*/		
	public String osChk() {		
		String returnOS = "";

		java.util.Properties p = System.getProperties();
		String osType 	= (String)p.getProperty("os.name");
        
        if(osType==null)osType="";
        osType = osType.toLowerCase();
        
        if(osType.indexOf("win")==-1){
        	return returnOS = "uix";
        }else{
        	return returnOS = "win";
        }
    }
	
	/**
	* across.cfg 가져오기 
	*/	
	public List getAcrossCfg() {		
		List	acroList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrossw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrossw.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	acroList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acroList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acroList;
    }

	/**
	* ems.cfg 가져오기 
	*/	
	public List getEmsCfg() {		
		List	emsList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/ems.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ems/cfg/ems.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String emsTemp;
            while ((emsTemp = reader.readLine()) != null) {
            	//emsList.add(emsTemp.trim());
            	emsList.add(emsTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return emsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return emsList;
    }

	/**
	* EMS.jnlp 가져오기 
	*/	
	public List getEms2Cfg() {		
		List	ems2List = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/EMS.jnlp";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ems/web/EMS.jnlp";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String ems2Temp;
            while ((ems2Temp = reader.readLine()) != null) {
            	//ems2List.add(ems2Temp.trim());
            	ems2List.add(ems2Temp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ems2List;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return ems2List;
    }

	/**
	* index.html 가져오기 
	*/	
	public List getIndexHtml() {		
		List	indexList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/index.html";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ems/web/index.html";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String indexTemp;
            while ((indexTemp = reader.readLine()) != null) {
            	//indexList.add(indexTemp.trim());
            	indexList.add(indexTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return indexList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return indexList;
    }

	/**
	* dbconnection.properties 가져오기 
	*/	
	public List getDBconnec() {		
		List	dbconnectList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/dbconnection.properties";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ems/web/client/dbconnection.properties";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String dbconnectTemp;
            while ((dbconnectTemp = reader.readLine()) != null) {
            	//dbconnectList.add(dbconnectTemp.trim());
            	dbconnectList.add(dbconnectTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dbconnectList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return dbconnectList;
    }

	/**
	* acroems 가져오기 
	*/	
	public List getAcroems() {		
		List	acroemsList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acroems";		// 테스트
            }else{
            	filePath = "/usr/local/etc/rc.d/acroems";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String acroemsTemp;
            while ((acroemsTemp = reader.readLine()) != null) {
            	//acroemsList.add(acroemsTemp.trim());
            	acroemsList.add(acroemsTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acroemsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acroemsList;
    }

	/**
	* acrobk.cfg 가져오기 
	*/	
	public List getAcrobkIni() {		
		List	acrobkList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrobk.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/acrobk/cfg/acrobk.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String acrobkTemp;
            while ((acrobkTemp = reader.readLine()) != null) {
            	//acrobkList.add(acrobkTemp.trim());
            	acrobkList.add(acrobkTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acrobkList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acrobkList;
    }

	/**
	* acrobk.cfg 가져오기 
	*/	
	public List getAcrorcIni() {		
		List	acrorcList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acrorc.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/acrorc/cfg/acrorc.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String acrorcTemp;
            while ((acrorcTemp = reader.readLine()) != null) {
            	//acrorcList.add(acrorcTemp.trim());
            	acrorcList.add(acrorcTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acrorcList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acrorcList;
    }

	/**
	* acroms.cfg 가져오기 
	*/	
	public List getAcromsIni() {		
		List	acromsList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acroms.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/acroms/cfg/acroms.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String acromsTemp;
            while ((acromsTemp = reader.readLine()) != null) {
            	//acromsList.add(acromsTemp.trim());
            	acromsList.add(acromsTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acromsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acromsList;
    }
	
	/**
	* hosts 가져오기 
	*/	
	public List getHosts() {		
		List	hostsList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/hosts";		// 테스트
            }else{
            	filePath = "/etc/hosts";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	hostsList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return hostsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return hostsList;
    }

	/**
	* 시스템 정보 가져오기 
	*/		
	public List getSystemInfoList() {		
        List	systemInfoList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/hd.st";		// 테스트
            }else{
            	filePath = "/data/acromate_home/status/hd.st";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	systemInfoList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
//            System.out.println(e.getMessage());
        	systemInfoList.clear();
            String[] lines = runShellScript("/bin/df -k").split("\n");
            if(lines.length==0)
            	System.out.println(e.getMessage());
            else
	            for(String line : lines)
	            	systemInfoList.add(line.trim());
            return systemInfoList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return systemInfoList;
    }
	/**
	* emx.txt 가져오기 
	*/	
	public List getEmsInit() {		
		List	acroList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "c:/ems.txt";		// 테스트
            }else{
            	filePath = "/usr/local/tomcat5.5/webapps/bizportal/ems.txt";
            	filePath = "/usr/local/apache-tomcat-7.0/webapps/bizportal/ems.txt";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	acroList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acroList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acroList;
    }
	/**
	* emx.txt 가져오기 
	*/	
	public List getSswInit() {		
		List	acroList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "c:/ssw.txt";		
            }else{
            	filePath = "/usr/local/tomcat5.5/webapps/bizportal/ssw.txt";
            	filePath = "/usr/local/apache-tomcat-7.0/webapps/bizportal/ssw.txt";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	acroList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acroList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acroList;
    }
	
	/**
	* IP Phone 정보 
	*/		
	public List getIpPhoneList() {		
        List	ipphoneList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ipphone.st";		// 테스트
            }else{
            	filePath = "/data/acromate_home/status/ipphone.st";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	ipphoneList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ipphoneList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return ipphoneList;
    }
	
	/**
	* Moimstone Mac 정보 
	*/		
	public List getMacMoimstoneList() {		
        List	moimstoneList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/moimstone.cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/moimstone.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	moimstoneList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return moimstoneList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return moimstoneList;
    }

	/**
	* Ims Moimstone Mac 정보 
	*/		
	public List getMacImsMoimstoneList() {		
        List	moimstoneList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/moimstone_ims.cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/moimstone_ims.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	moimstoneList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return moimstoneList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return moimstoneList;
    }

	/**
	* JUNGWOO Mac 정보 
	*/		
	public List getMacJungWooList() {		
        List	jungwooList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/jungwoo.cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/jungwoo.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	jungwooList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return jungwooList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return jungwooList;
    }

	/**
	* DASAN Mac 정보 
	*/		
	public List getMacDasanList() {		
        List	dasanList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/dasan.cfg";		// 테스트
            }else{
            	filePath = "/tftpboot/dasan.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	dasanList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dasanList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return dasanList;
    }
	
	/**
	* DDNS 환경 파일 
	*/		
	public List getDdnsConfigList() {		
        List	ddnsList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acro_ipphone_info.txt";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ddns/info/acro_ipphone_info";
            }
            
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	ddnsList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ddnsList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return ddnsList;
    }
	
	/**
	* CallBox 장비 시간 
	*/		
	public List getCallBoxTime() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/uptime.st";		// 테스트
            }else{
            	filePath = "/data/acromate_home/status/uptime.st";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            configList.clear();
            String[] lines = runShellScript("/usr/bin/uptime").split("\n");
            if(lines.length==0)
            	System.out.println(e.getMessage());
            else
	            for(String line : lines)
	            	configList.add(line.trim());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* CallBox ether 정보 
	*/		
	public List getCallBoxEther() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/link2.st";		// 테스트
            }else{
            	filePath = "/data/acromate_home/status/link.st";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
//            System.out.println(e.getMessage());
        	configList.clear();
            String[] lines = runShellScript("/sbin/ifconfig -a").split("\n");
            if(lines.length==0)
            	System.out.println(e.getMessage());
            else
	            for(String line : lines)
	            	configList.add(line.trim());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* SNMP 환경 
	*/		
	public List getAcroSnmpList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acrosnmp.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrosnmp.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* ACROMAN 환경 
	*/		
	public List getAcroManList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acroman.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acroman.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* FTP 백업서버 환경 
	*/		
	public List getFTPConfigList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ipcs_backup_ftp";		// 테스트
            }else{
            	filePath = "/data/acromate_home/script/ipcs_backup_ftp";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* SNMP 에서 버젼 읽어오기 
	*/		
	public String getSystemVersion() {		
        List	configList 	= new ArrayList();
        String	tmpVer		= "";
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acrosnmp.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrosnmp.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
            int 	nTemp 		= 0;
            int		configCount	= configList.size();
            String 	tempStr		= "";
            for(int i=0;i<configCount;i++){
            	tempStr = (String)configList.get(i);
            	
            	if(tempStr.length()>=14){
            		if("cpeFwVersion =".equals(tempStr.substring(0,14))){
            			nTemp 	= tempStr.indexOf("=");
            			tmpVer 	= tempStr.substring(nTemp+1, tempStr.length()).trim();
            		}
            	}
            	
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return tmpVer;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return tmpVer;
    }

	/**
	* SNMP 에서 제품명 읽어오기 
	*/		
	public String getGoodsName() {		
        List	configList 	= new ArrayList();
        String	tmpVer		= "";
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acrosnmp.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acrosnmp.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
            int 	nTemp 		= 0;
            int		configCount	= configList.size();
            String 	tempStr		= "";
            for(int i=0;i<configCount;i++){
            	tempStr = (String)configList.get(i);
            	
            	if(tempStr.length()>=14){
            		if("cpeModelName =".equals(tempStr.substring(0,14))){
            			nTemp 	= tempStr.indexOf("=");
            			tmpVer 	= tempStr.substring(nTemp+1, tempStr.length()).trim();
            		}
            	}
            	
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return tmpVer;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return tmpVer;
    }

	/**
	* 리모트 모니터링 프로세스 확인 
	*/		
	public List getMonitoringList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/rpcapd";		// 테스트
            }else{
            	filePath = "/tmp/rpcapd";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* 신규장비 Gateway 환경 
	*/		
	public List getGatewayConfigList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/acrogw.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/acroua/cfg/acrogw.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* 신규 forward 파일 
	*/
	public List getForward() {		
        List	forwardList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/anchor_forward.conf";		// 테스트
            }else{
            	filePath = "/data/acromate_home/firewall/anchor_forward.conf";
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	forwardList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return forwardList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return forwardList;
    }

	/**
	* 신규 firewall 파일 
	*/
	public List getFirewall() {		
        List	firewallList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/local_firewall.conf";		// 테스트
            	//filePath = "D:/etc/pf.conf";
            	filePath = "D:/etc/anchor_filter.conf";			// 2012.11.21
            }else{
            	//filePath = "/data/acromate_home/firewall/local_firewall.conf";
            	//filePath = "/etc/pf.conf";
            	filePath = "/data/acromate_home/firewall/anchor_filter.conf";		// 2012.11.21
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	firewallList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return firewallList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return firewallList;
    }

	/**
	* tlsrb DHCP 사용유무 체크 (2012.05.02) 
	*/		
	public List getDHCPConfigList() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/rc.conf.local";		// 테스트
            	filePath = "D:/etc/rc.conf";			// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }else{
            	//filePath = "/etc/rc.conf.local";
            	filePath = "/etc/rc.conf";				// 2012.11.09 (3.1.3 버젼부터 파일  바뀜)
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* qualityServices 리스트 
	*/	
	public List getQosList() {		
        List	netWorkList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	//filePath = "D:/etc/local_QoS.conf";		// 테스트
            	filePath = "D:/etc/anchor_QoS.conf";		// 테스트
            }else{
            	//filePath = "/data/acromate_home/firewall/local_QoS.conf";
            	filePath = "/data/acromate_home/firewall/anchor_QoS.conf";
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	netWorkList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return netWorkList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return netWorkList;
    }

	/**
	* 신규 Black IP 리스트 파일 
	*/
	public List getBlackIP() {		
        List	firewallList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/black_ip_status.st";		// 테스트
            }else{
            	filePath = "/data/acromate_home/status/black_ip_status.st";
            }
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	firewallList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return firewallList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return firewallList;
    }

	/**
	* 신규 Black IP 환경 설정  
	*/		
	public List getBlackIPConfig() {		
        List	configList = new ArrayList();
        
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/jail.conf";		// 테스트
            }else{
            	filePath = "/usr/local/etc/fail2ban/jail.conf";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	configList.add(strTemp.trim());
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return configList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return configList;
    }

	/**
	* acronfr.cfg 가져오기 
	*/	
	public List getAcronfrCfg() {		
		List	acronfrList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/ip/acronfr.cfg";		// 테스트
            }else{
            	filePath = "/data/acromate_home/ssw/cfg/acronfr.cfg";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	acronfrList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return acronfrList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return acronfrList;
    }

	/**
	* phone_set.log 가져오기 
	*/	
	public List getAutoPhoneLog() {		
		List	autoPhoneLogList = new ArrayList();
        try {
            osType = osChk();
            if("win".equals(osType)){
            	filePath = "D:/etc/phone_set.log";		// 테스트
            }else{
            	filePath = "/tmp/phone_set.log";
            }        	
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String strTemp;
            while ((strTemp = reader.readLine()) != null) {
            	//acroList.add(strTemp.trim());
            	autoPhoneLogList.add(strTemp);
            }
            reader.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return autoPhoneLogList;
        } finally {
            try {
            } catch (Exception e) {}
        }
        return autoPhoneLogList;
    }
	
	/**
	 * hc-add : 171205 
	 */
	public String runShellScript(String cmd){
		System.out.println("biz.SystemConfigSet.runShell..command : "+cmd);
		String result = "";
		LinuxShell linuxShell=new LinuxShell();
		try{
		 	//cmd = "/usr/bin/uptime";
		 	linuxShell.runShell(cmd);
		 	result = linuxShell.getStrResult();
		}catch(Exception ex){
			System.out.println("biz.SystemConfigSet.runShell.err : "+result);
		}
		System.out.println("biz.SystemConfigSet.runShell..result : "+result);
		return result;
	}
}
