package system;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;
import acromate.ConnectionManager;

public class QualityServices {
	public String getSignalQosType() {		
		DataStatement 	stmt 		= null;
		String 			returnVal 	= "";

    	// 서버로부터 DataStatement 객체를 할당
		stmt = ConnectionManager.allocStatement("SSW");

		ResultSet rs = null;		
        try {
	        String sql = " Select valueinfo From table_updateenv Where envname = 'signal' And keyname = 'qostype' ";
	        System.out.println("SQL문 : "+sql);
	        
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                if (rs.next()) returnVal = rs.getString(1);
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)  rs.close();
                
              //할당받은 DataStatement 객체는 반납
                if (stmt != null ) ConnectionManager.freeStatement(stmt);
            } catch (Exception e) {}
        }
        return returnVal;
    }

	public int setSignalQosType(String qosType) {		
        int returnVal 	= 0;
        int tmpCount 	= 0;
        
        DataStatement 	stmt 	= null;
        ResultSet 		rs 		= null;
        
        try {
	    	// 서버로부터 DataStatement 객체를 할당
        	stmt = ConnectionManager.allocStatement("SSW");
        	stmt.stxTransaction();

	        String sql = " Select count(*) From table_updateenv Where envname = 'signal' And keyname = 'qostype' ";
	        System.out.println("SQL문 : "+sql);        
	        
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                if (rs.next()) tmpCount = rs.getInt(1);
                rs.close();
                
                if(tmpCount > 0){
        			sql  = "\n UPDATE table_updateenv Set valueinfo = '" + qosType + "'  " ;
            		sql += "\n  Where envname = 'signal' And keyname = 'qostype' ";
            		stmt.executeUpdate(sql);
            		returnVal = 1;
                }else{
        			sql  = " INSERT INTO table_updateenv (envname, keyname, valueinfo, etc) VALUES ('signal', 'qostype', '"+ qosType +"', NULL)" ;
            		stmt.executeUpdate(sql);
            		returnVal = 1;
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");
            
            stmt.endTransaction(true);			// commit 처리
            
        } catch (Exception e) {
        	stmt.endTransaction(false);			// rollback 처리
        	
        	System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)  rs.close();
                
                //할당받은 DataStatement 객체는 반납
                if (stmt != null ){
                	ConnectionManager.freeStatement(stmt);
                }
            } catch (Exception e) {}
        }
        return returnVal;
    }
	
	public String getMediaQosType() {		
		DataStatement 	stmt 		= null;
		String 			returnVal 	= "";
        
		// 서버로부터 DataStatement 객체를 할당
		stmt = ConnectionManager.allocStatement("SSW");
		
        ResultSet rs = null;
        try {
            String sql = " Select valueinfo From table_updateenv Where envname = 'media' And keyname = 'qostype' ";            
            System.out.println("SQL문 : "+sql);        

        	if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                if (rs.next()) returnVal = rs.getString(1);
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)  rs.close();
                
                //할당받은 DataStatement 객체는 반납
                if (stmt != null ) ConnectionManager.freeStatement(stmt);
            } catch (Exception e) {}
        }
        return returnVal;
    }

	public int setMediaQosType(String qosType) {		
        int returnVal 	= 0;
        int tmpCount 	= 0;
        
        DataStatement 	stmt 	= null;
        ResultSet 		rs 		= null;
        
        try {
	    	// 서버로부터 DataStatement 객체를 할당
        	stmt = ConnectionManager.allocStatement("SSW");
        	stmt.stxTransaction();

            String sql = " Select count(*) From table_updateenv Where envname = 'media' And keyname = 'qostype' ";
            System.out.println("SQL문 : "+sql);        

        	if (stmt != null) {
                rs = stmt.executeQuery(sql);
                
                if (rs.next()) tmpCount = rs.getInt(1);
                rs.close();
                
                if(tmpCount > 0){
        			sql  = "\n UPDATE table_updateenv Set valueinfo = '" + qosType + "'  " ;
            		sql += "\n  Where envname = 'media' And keyname = 'qostype' ";
              
            		returnVal = stmt.executeUpdate(sql);
                }else{
        			sql  = " INSERT INTO table_updateenv (envname, keyname, valueinfo, etc) VALUES ('media', 'qostype', '"+ qosType +"', NULL)" ;
              
            		returnVal = stmt.executeUpdate(sql);
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");
        	
        	stmt.endTransaction(true);			// commit 처리
        	
        } catch (Exception e) {
        	stmt.endTransaction(false);			// rollback 처리
        	
            System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)  rs.close();
                
                //할당받은 DataStatement 객체는 반납
                if (stmt != null ){
                	ConnectionManager.freeStatement(stmt);
                }
            } catch (Exception e) {}
        }
        return returnVal;
    }
}
