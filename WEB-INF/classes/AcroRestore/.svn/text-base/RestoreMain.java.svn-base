package AcroRestore;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import framework.File.FileManager;
import framework.Shell.LinuxShell;

public class RestoreMain {
	private String localPath="";
	private String restorePath="/data/acromate_home/acroBackup/restore/";
	//private String restorePath="c:/backup/";
	public String DbRestore(String fileName){
		String strResult="";
		RestoreFtp			restoreFtp			=	new RestoreFtp();			//ftp로 선택된 파일 가지고 옴
		RestoreUnZip		restoreUnZip		=	new RestoreUnZip();			//ftp에서 받아온 파일 압축해제
		Restore 			restore				=	new Restore();				//압축해제 한 파일에서 db관련 파일을 복원d
		FileManager			fileManager				=	new FileManager();

		try{
			restoreFtp.Execut(restorePath,fileName);
		}catch(Exception e){
			strResult="ftp error";
			return strResult; 
		}
		String scrFileFullName=restorePath+fileName;
		String outPutDir=restorePath+"db";
		LinuxShell linuxShell=new LinuxShell();
		String strCmdtarxf = "tar -xvf "+scrFileFullName+" -C /";
		linuxShell.runShell(strCmdtarxf);
		String strCmdtardel = "rm "+scrFileFullName;
		linuxShell.runShell(strCmdtarxf);
		linuxShell.runShell("mv /data/acromate_home/acroBackup/backup/Db/*.* /data/acromate_home/acroBackup/restore/db/");
		/*
		if(restoreUnZip.Execut(scrFileFullName, outPutDir)==0){
			strResult="DbRestore unzip error";
			return strResult;
		}
		*/
		ArrayList fileNameList=new ArrayList();
		String filePath = "/data/acromate_home/acroBackup/restore/db/";
		File f = new File(filePath); 
		File [] files = f.listFiles(); //파일의 리스트를 대입
		for ( int i = 0; i < files.length; i++ ) {
			if ( files[i].isFile()){ 
				String temp=null;
				try {
					temp = new String(files[i].getName().getBytes("ISO8859-1"), "euc-kr");
					fileNameList.add(temp);
					System.out.println("fileName:"+temp);
				} catch (UnsupportedEncodingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
			}
		}
		for(int i=0;i<fileNameList.size();i++){
			String tempfileName=(String)fileNameList.get(i);
			String tempUser="";
			if(tempfileName == null){
				continue;
			}
			String strTemp = tempfileName.replace("AcroBackUp", "");
			if(tempfileName.equals(strTemp)){
				continue;
			}
			strTemp = tempfileName.replace("AcroBackUp_SSW", "");
			if(!tempfileName.equals(strTemp)){
				tempUser="AcroBackUp_SSW";
			}else{
				tempUser="AcroBackUp_EMS";
			}
			System.out.println("tempUser:"+tempUser);
			try {
				restore.Execut(tempUser,"/data/acromate_home/acroBackup/restore/db/"+tempfileName);
			} catch (Exception e) {
				System.out.println("RestoreMain==="+e);
				strResult="DbRestore DB insert or delete error";
				return strResult;
			}
		}
		linuxShell.runShell("rm /data/acromate_home/acroBackup/restore/db/*.*");
		/*
		for(int i=0;i<restoreUnZip.getArrayList().size();i++){
			String tempfileName=(String)restoreUnZip.getArrayList().get(i);
			String tempUser="";
			if(tempfileName.indexOf("AcroBackUp_SSW")>0){
				tempUser="AcroBackUp_SSW";
			}else{
				tempUser="AcroBackUp_EMS";
			}
			try {
				System.out.println(tempUser+"==="+tempfileName);
				restore.Execut(tempUser,tempfileName);
			} catch (Exception e) {
				strResult="DbRestore DB insert or delete error";
				return strResult;
			}
		}
		*
		*/
		/*
		for(int i=0;i<restoreUnZip.getArrayList().size();i++){
			String tempfileName=(String)restoreUnZip.getArrayList().get(i);
			String tempUser="AcroBackUp_EMS";
			if(tempfileName.indexOf("AcroBackUp_SSW")!=-1){
				tempUser="AcroBackUp_SSW";
			}else{
				tempUser="AcroBackUp_EMS";
			}
			try {
				System.out.println(tempUser+"==="+tempfileName);
				restore.Execut(tempUser,tempfileName);
			} catch (Exception e) {
				strResult="DbRestore DB insert or delete error";
				return strResult;
			}
		}
		*/
		/*
		for(int i=0;i<restoreUnZip.getArrayList().size();i++){
			String tempfileName=(String)restoreUnZip.getArrayList().get(i);
			fileManager.delete(tempfileName);
		}
		*/
		return strResult;
	}
	public String ConfRestore(String fileName){
		String strResult="";
		RestoreFtp			restoreFtp			=	new RestoreFtp();			//ftp로 선택된 파일 가지고 옴
		RestoreUnZip		restoreUnZip		=	new RestoreUnZip();			//ftp에서 받아온 파일 압축해제
		RestoreConfigFile	restoreConfigFile	=	new RestoreConfigFile();	//압축해제 한 파일에서 confing 관련 파일 복원
		LinuxShell linuxShell=new LinuxShell();
		try{
			restoreFtp.Execut(restorePath,fileName);
		}catch(Exception e){
			strResult="ftp error";
			return strResult; 
		}
		/*
		
		String scrFileFullName=restorePath+fileName;
		String outPutDir=restorePath+"conf";
		if(restoreUnZip.Execut(scrFileFullName,outPutDir)==0){
			strResult="ConfRestore unzip error";
			return strResult;
		}
		try {
			restoreConfigFile.Execut();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			strResult="restroe Confing File error";
			return strResult;
		}
		
		*/
		return strResult;
	}
	public String Execut(String confFileName,String dbFileName){
		String strResult="";
		RestoreMain restoreMain	=new RestoreMain();
		System.out.println(confFileName+"  "+dbFileName);
		/*
		String check=restoreMain.ConfRestore(confFileName);
		if(!"".equals(check)){
			strResult="ConfRestore error:"+check;
			
			return strResult; 
		}
		*/
		String check=restoreMain.DbRestore(dbFileName);
		if(!"".equals(check)){
			strResult="Db error:"+check;
			return strResult; 
		}

		LinuxShell linuxShell=new LinuxShell();
		String cmdShell="rm "+restorePath+dbFileName;
		linuxShell.runShell(cmdShell);
		return strResult;
	}
	public static void main(String args[]){
		if(args.length==2){
			RestoreMain restoreMain=new RestoreMain();
			restoreMain.Execut(args[0], args[1]);
		}else{
			RestoreMain restoreMain=new RestoreMain();
			restoreMain.Execut("etc.zip", "20091008143551184Db.zip");
		}
	}
}
