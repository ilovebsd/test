package AcroRestore;

import java.util.ArrayList;

import framework.config.Config;
import framework.config.ConfigFactory;
import framework.exception.PropNotFoundException;
import framework.ftp.FtpClientEx;
import framework.sql.AjaxRunner;
import framework.systeminfo.SystemInfo;
import framework.tray.Tray;

public class RestoreFtp {
	public 		FtpClientEx		ftpClient			=	new FtpClientEx();
	private 	ArrayList		backupFileList		=	new ArrayList();
	public 		Config 			conf				= 	null;
	public 		String 			ip					=	"121.156.125.122";
	public 		String 			id					=	"callbox";
	public 		String 			password			=	"callbox0816";
	public 		int 			port				=	21;
	public void getBackupConfigList(String keysName) throws PropNotFoundException{
		Config conf = null;
		if(SystemInfo.isLinux()==1){
			conf	=	ConfigFactory.getInstance().getConfiguration("/data/acromate_home/acroBackup/callbox.properties");
		}else{
			conf	=	ConfigFactory.getInstance().getConfiguration("backupWinQuery.properties");			
		}
		ip=conf.getString("AcroFtp.ip");		
		id=conf.getString("AcroFtp.id");		
		password=conf.getString("AcroFtp.pw");		
		port=conf.getInt("AcroFtp.port");
		System.out.println("id:"+id);
	}
	public RestoreFtp(){
		try {
			getBackupConfigList("AcroFtp");
		} catch (PropNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public void setIp(String ip){
		this.ip=ip;
	}
	public void setPort(int port){
		this.port=port;
		
	}
	public void setPassword(String password){
		this.password=password;
		
	}
	public void setId(String id){
		this.id=id;
	}
	public void getdomainName(){
		AjaxRunner 	ajxRun		=	new AjaxRunner("AcroBackUp_SSW");
		Tray rsTray=ajxRun.select("select domainid from table_domain");
		String domainid="ipcs";
		if(rsTray!=null){
			for(int i=0;i<rsTray.getRowCount();i++){
				domainid=rsTray.getString("domainid",i);
				int nidex=domainid.indexOf('.');
				String temp="no id";
				if(nidex!=-1)
					temp=domainid.substring(0, nidex);
				if(temp!=null) {
					id=temp;
					password=temp+"0816";
				}
			}
		}
	}
	public ArrayList getBackupFileList(String findName) throws Exception{
		ArrayList tmepbackupFileList=ftpClient.getLs();
		backupFileList.clear();
		if(tmepbackupFileList!=null){
			for(int i=0;i<tmepbackupFileList.size();i++){
				String strTemp=(String)tmepbackupFileList.get(i);
				if(strTemp!=null && strTemp.indexOf(findName)!=-1){
					backupFileList.add(strTemp);					
				}
			}
		}
		return backupFileList;
		
	}
	public int connect(){
		int nReturn=0;
		getdomainName();
		ftpClient.setServerIP(ip);
		ftpClient.setLoginId(id);
		ftpClient.setLoginPW(password);
		ftpClient.setServerport(port);
		if(ftpClient.login())
			nReturn=1;
		return nReturn;
	}
	public ArrayList executGetBackupFileList() throws Exception{
		connect();
		getBackupFileList(".zip");
		ftpClient.disconnect();
		return backupFileList;
		
	}
	public int Execut(String localDir,String downFileName) throws Exception{
		int nReturn=0;
		connect();
		ftpClient.homeCd();
		ftpClient.downloadFile(localDir, downFileName);
		ftpClient.disconnect();
		return nReturn;
	}
}
