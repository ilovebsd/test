package waf;

import java.io.Serializable;
import java.util.*;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionBindingListener;

//import acromate.common.util.LanguageMode;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;

import dto.CallForwardListDTO;
import dto.E164InfoDTO;
import dto.SubscriberInfoDTO;
/**
 *	사용자 세션 정보를 저장하기 위한 Data Model object<p>
 *	HttpSessionBindingListener를 구현했는데, HttpSession에 저장될때 SessionManager 객체를 얻어
 *	HttpSession을 저장한다. 그리고, HttpSession이 invalidate될때 SessionManager 객체에서 HttpSession을
 *	제거한다.
 * 
 */
public class BaseEntity implements Serializable, HttpSessionBindingListener  {
	
	/** 사용자 ID */
	protected String userId;
	/** 사용자 IP */
	protected String userIp="";
	
	/**	사용자 세션 정보 Collection */
	protected HashMap datas;
	protected HashMap stmt;
	protected HashMap scDTO;
	protected HashMap e164DTO;
	protected HashMap cflDTO;
	protected HashMap list;
	protected HashMap langType;
	
	/**
	 *	Constructor
	 *	
	 *	@param	userId	사용자 ID
	 */
	public BaseEntity(String userId) {
		this.userId = userId;
		datas = new HashMap();	
		stmt = new HashMap();	
		scDTO = new HashMap();	
		e164DTO = new HashMap();		
		langType = new HashMap();			
	}
	public BaseEntity(String userId, String userIp) {
		this.userId = userId;
		this.userIp = Str.CheckNullString(userIp);
		datas = new HashMap();	
		stmt = new HashMap();	
		scDTO = new HashMap();	
		e164DTO = new HashMap();		
		langType = new HashMap();			
	}

	/**
	 *	사용자 userId를 반환하는 getter method
	 *
	 *	@return		사용자 userId
	 */
	public String getUserId() {
		return this.userId;
	}
	/**
	 *	사용자 userId를 반환하는 getter method
	 *
	 *	@return		사용자 userIp
	 */
	public String getUserIp() {
		return this.userIp;
	}

	/**
	 *	사용자 세션 정보를 저장하는 setter method
	 *
	 *	@param	key		key
	 *	@param	value	value
	 */
	public void setAttribute(String key, String value) {
		datas.put(key,value);
	}
	
	public void setAttribute(String key, DataStatement statement) {
		stmt.put(key,statement);
	}
	
	public void setAttribute(String key, SubscriberInfoDTO scDTO) {
		this.scDTO.put(key,scDTO);
	}
	
	public void setAttribute(String key, E164InfoDTO e164DTO) {
		this.e164DTO.put(key,e164DTO);
	}
	
//	public void setAttribute(String key, LanguageMode lang) {
//		this.langType.put(key,lang);
//	}
	
	

	/**
	 *	사용자 세션 정보를 반환하는 getter method
	 *
	 *	@param	key	세션 정보 key
	 *	@return		세션 정보 값
	 */
	public String getStrAttribute(String key) {
		return (String)datas.get(key);
	}
	
	public DataStatement getStmtAttribute(String key) {
		return (DataStatement)stmt.get(key);
	}
	
	public SubscriberInfoDTO getScDtoAttribute(String key) {
		return (SubscriberInfoDTO)scDTO.get(key);
	}
	
	public E164InfoDTO getE164InfoDtoAttribute(String key) {
		return (E164InfoDTO)e164DTO.get(key);
	}
	
//	public LanguageMode getLangAttribute(String key) {
//		return (LanguageMode)langType.get(key);
//	}
	

	/**
	 *	사용자에게 할당된 role id값을 저장하는 method
	 *
	 *	@param	key		key
	 *	@param	value	value
	 */
	public void setObject(String key, Object value) {
		datas.put(key,value);
	}

	/**
	 *	사용자에게 저장된 role id 정보를 반환하는 getter method
	 *
	 *	@param	key	key
	 *	@return		role id
	 */
	public Object getObject(String key) {
		return datas.get(key);
	}

	
	/**
	 *	사용자 세션 정보 리스트를 스트링으로 반환한다.
	 *
	 *	@return	사용자 세션 정보 리스트
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("BaseEntity [ userId=").append(userId);
		//sb.append(", userIp=").append(userIp);
		sb.append(", datas=").append(datas);
		sb.append(" ]");

		return sb.toString();
	}

	/**
	 *	HttpSession에 이 객체가 저장될때 호출되는 call back method<p>
	 *	SessionManager 객체를 얻어 Client의 HttpSession객체를 저장한다.
	 *	
	 *	@param	event	javax.servlet.http.HttpSesisonBindingEvent
	 */
	public void valueBound(HttpSessionBindingEvent event) {
		HttpSession hs = event.getSession();
		SessionManager manager = SessionManager.getInstance();
		manager.addHttpSession(hs);
		System.out.println("Session ID: " + hs.getId()+ " is binding");
	}

	/**
	 *	HttpSession이 invalidate() 될때 호출되는 call back method<p>
	 *	SessionManager 객체를 얻어 Client의 HttpSession 객체를 삭제한다.
	 *
	 *	@param	event	javax.servlet.http.HttpSessionBindingEvent
	 */
	public void valueUnbound(HttpSessionBindingEvent event) {
		HttpSession hs = event.getSession();
		SessionManager manager = SessionManager.getInstance();
		manager.removeHttpSession(hs.getId());
		System.out.println("Session ID: " + hs.getId()+ " is unBinding");
	}
	
}
