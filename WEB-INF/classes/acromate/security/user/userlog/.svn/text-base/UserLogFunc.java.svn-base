package acromate.security.user.userlog ;

import acromate.ConnectionManager ;
import acromate.WebUtil;
import acromate.security.login.LoginBean ;
import webuser.ServerLogin;

import java.io.FileWriter ;
import java.io.FilenameFilter;
import java.io.File ;
import java.util.StringTokenizer ;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet ;
import java.sql.Statement;

import com.acromate.driver.db.DataStatement;

public class UserLogFunc
{
    /*******************운영자 사용권한 페이지별 코드 정의**************************/
    /****** 구버젼( 추후 삭제할 예정 ) */
    //1. ELEMENT 구성관리
    public static final char ELEMENT_SSWCONFIG_SSWCONFIG = 'a'; //시스템 CONFIG 관리
    public static final char ELEMENT_SWMANAGE_SWMANAGE = 'b'; //소프트웨어버젼관리
    public static final char ELEMENT_STATUS_SWCHANGE = 'c'; //소프트웨어 변경관리
    public static final char ELEMENT_STATUS_ALLLOG = 'd'; //전체로그감시
    public static final char ELEMENT_STATUS_ALARMLOG = 'e'; //장애로그감시
    public static final char ELEMENT_STATUS_FAULTLOG = 'f'; //경보로그감시
    public static final char ELEMENT_STATUS_STATUSLOG = 'g'; //상태로그감시
    public static final char ELEMENT_STATUS_STATUSFILELOG = 'h'; //상태로그관리

    public static final char ELEMENT_STATE_SYSTEMMONITOR = 'i'; //시스템상태관리
    public static final char ELEMENT_STATE_CURRENTCALLSTATE = 'j'; //시스템 CALL 상태관리
    public static final char ELEMENT_STATE_ACTIVATOR = 'k'; //시스템 절체관리
    public static final char ELEMENT_STATE_ROUTESTATE = 'l'; //루트상태관리
    public static final char ELEMENT_PROVISION_SUBSCRIBER_E164 = 'm'; //번호별 가입자 관리
    public static final char ELEMENT_PROVISION_SUBSCRIBER_GROUP = 'n'; //그룹별 가입자 관리
    public static final char ELEMENT_PROVISION_SIPDOMAIN = 'o'; //도메인관리

    public static final char ELEMENT_PROVISION_NEIGHBORPROXY = 'p'; //SIP프락시관리
    public static final char ELEMENT_PROVISION_SIPTGW = 'q'; //SIPTGW(고정형)관리
    public static final char ELEMENT_PROVISION_SIPTGW_REGISTER = 'r'; //SIPTGW(등록형)관리
    public static final char ELEMENT_PROVISION_NEIGHBORGK = 's'; //H323 GK관
    public static final char ELEMENT_PROVISION_H323TGW = 't'; //H323 TGW관리
    public static final char ELEMENT_PROVISION_NEIGHBORSSW = 'u'; //SoftSwitch SIP-T관리

    public static final char ELEMENT_PROVISION_IPPBX = 'v'; //가입자장치등록관리
    public static final char ELEMENT_PROVISION_SIPENDPOINT = 'w'; //단말등록관리
    public static final char ELEMENT_PROVISION_IPPBX_SDP_CONFIG = 'x'; //IP PBX SDP설정
    public static final char ELEMENT_PROVISION_H323ENDPOINT = 'y'; //H323단말관리

    public static final char ELEMENT_SIGNALINGNO7_SG = 'z'; //Signal Gateway관리
    public static final char ELEMENT_SIGNALINGNO7_OPC = 'A'; //OPC/DPC관리
    public static final char ELEMENT_SIGNALINGNO7_CIC = 'B'; //CIC관리

    public static final char ELEMENT_SIGNALINGNO7_MGCPTGWDOMAIN = 'C'; //MGCP도메인관리
    public static final char ELEMENT_SIGNALINGNO7_MGCPTGWENDPOINT = 'D'; //MGCP회선관리

    public static final char ELEMENT_SIGNALINGNO7_MEGACOTGWDOMAIN = 'E'; //MEGACO도메인관리
    public static final char ELEMENT_SIGNALINGNO7_MEGACOTGWENDPOINT = 'F'; //MEGACO회선관리

    public static final char ELEMENT_SIGNALINGNO7_PSTN = 'G'; //PSTN루트관리
    public static final char ELEMENT_SIGNALINGNO7_PSTNCIC_CHANNELGROUP = 'H'; //PSTN루트/CIC관리

    public static final char ELEMENT_ROUTING_ROUTEGROUP = 'I'; //루트그룹관리
    public static final char ELEMENT_ROUTING_TIMEROUTEGROUP = 'J'; //시간분배루트그룹관리
    public static final char ELEMENT_ROUTING_PREFIXTABLE = 'K'; //번호정책별 라우팅관리
    public static final char ELEMENT_ROUTING_LOCALPREFIX = 'L'; //자국번호정책관리
    public static final char ELEMENT_ROUTING_SPECIALNUMBER = 'M'; //특번정책관리

    public static final char ELEMENT_SERVICE_SPECIALSERVICENUMBER = 'N'; //SPECIAL서비스관리
    public static final char ELEMENT_SERVICE_BLOCKGROUP = 'O'; //제한그룹관리
    public static final char ELEMENT_PROVISION_MCUGROUP = 'P'; //부가서비스 루트관리

    public static final char ELEMENT_SERVICE_GROUPSERVICEMANAGER = 'Q'; //그룹별 부가서비스관리
    public static final char ELEMENT_SERVICE_ROOTSERVICEMANAGER = 'R'; //루트별 부가서비스관리
    public static final char ELEMENT_SERVICE_SERVICEMANAGER = 'S'; //전화번호별부가서비스관리
    public static final char ELEMENT_SERVICE_IPPBXSERVICEMANAGER = 'T'; //IPPBX별부가서비스관리
    public static final char ELEMENT_SERVICE_MCUMENTCODE = 'U'; //MCU멘트코드관리
    public static final char ELEMENT_SERVICE_COMMONSHORTCUT = 'V'; //공통단축번호관리

    public static final char ELEMENT_DATAINPUT_H323 = 'W'; //H323단말
    public static final char ELEMENT_DATAINPUT_SIP = 'X'; //SIP단말
    public static final char ELEMENT_DATAINPUT_PSTN = 'Y'; //PSTN
    public static final char ELEMENT_DATAINPUT_PASERTED = 'Z'; //P-ASERTED

    //public static final char ELEMENT_SERVICE_MCUGROUP = 'O'; //MCU그룹단말관리
    //public static final char ELEMENT_SERVICE_DIGITMAPSET = 'Z'; //미정
    //public static final char ELEMENT_SIGNALINGNO7_SG_CIC = 'Z'; //미정
    //public static final char ELEMENT_SIGNALINGNO7_PSTN_CIC = 'Z'; //미정
    //public static final char ELEMENT_SUBSCRIBER_ROUTING_ROUTINGPATHSUBID = 'Z'; //미정
    //public static final char ELEMENT_SERVICE_CHARGE_SERVICERATIO = 'g'; //미정
    //public static final char ELEMENT_SERVICE_CHARGE_CHARGE = 'g'; //미정
    //public static final char ELEMENT_SERVICE_LCOID = 'g'; //미정

    //2. STATUS 장애관리
    public static final char STATUS_ALARMSET_CRITICALVALUE = 'a'; //장애임계치설정
    public static final char STATUS_ALARMMONITOR_ALARMMONITOR = 'b'; //장애감시화면
    public static final char STATUS_ALARMLOG_ALARMLOG = 'c'; //장애로그
    public static final char STATUS_ALARMLOG_FAULTLOG = 'd'; //경보로그
    public static final char STATUS_MONITOR_E164TRACE = 'e'; //E164 TRACE
    public static final char STATUS_MONITOR_CALLTRACE = 'f'; //호 TRACE
    public static final char STATUS_MONITOR_ENDPOINTTRACE = 'g'; //단말 TRACE
    public static final char STATUS_MONITOR_CURRENTCALLLIST = 'h'; //현재호목록
    public static final char STATUS_MONITOR_LONGTIMECALLLOG = 'i'; //장시간호로그
    public static final char STATUS_SS7_SIGNALINGMONITOR = 'j'; //SS7신호처리모니터

    public static final char STATUS_LOG_CALLTRACE = 'k'; //호감시추적

    //3. PERFORMANCE 성능관리
    public static final char PERFORMANCE_STAT_SET_SET = 'a'; //장시간호설정
    public static final char PERFORMANCE_STAT_CALL_ALL_LOCAL = 'b'; //호유형별통계
    public static final char PERFORMANCE_STAT_CALL_ALL_SERVICETYPE = 'c'; //서비스유형별통계
    public static final char PERFORMANCE_STAT_CALL_PEAK_PEAK = 'd'; //피크통계
    public static final char PERFORMANCE_STAT_CALL_ROUTE_CALLERROUTE = 'e'; //발신루트별통계
    public static final char PERFORMANCE_STAT_CALL_ROUTE_CALLEEROUTE = 'f'; //착신루트별통계
    public static final char PERFORMANCE_STAT_OVERLOAD_OVERLOAD = 'g'; //과부하통계
    public static final char PERFORMANCE_SYSTEM_CPUMEM_SYSTEM = 'h'; //cpumem통계
    public static final char PERFORMANCE_SYSTEM_DISK_DISK = 'i'; //DISK 통계
    public static final char PERFORMANCE_SYSTEM_PROCESS_PROCESS = 'j'; //프로세스통계
    public static final char PERFORMANCE_STAT_OVERLOAD_OVERLOADLEVEL = 'k'; //장애등급별 통계
    public static final char PERFORMANCE_STAT_OVERLOAD_OVERLOADCODE = 'l'; //장애코드별통계
    public static final char PERFORMANCE_STAT_LONGTIME_LONGTIME = 'm'; //장시간호통계
    public static final char PERFORMANCE_CDRMANAGE_CDRMANAGE_CDRMANAGE = 'n'; //CDR관리

    //4. EMSCONFIG EMS 설정
    public static final char EMSCONFIG_EMSELEMENT_SYSGROUP = 'a'; // 호처리장치 그룹관리
    public static final char EMSCONFIG_EMSCONFIG_INFO = 's'; // EMS설정
    public static final char EMSCONFIG_EMSCONFIG_ACTIVATE = 't'; //EMS 액티브변경
    public static final char EMSCONFIG_USER_USERACCOUNT = 'b'; //관리자관리
    public static final char EMSCONFIG_USER_USERLEVEL = 'c'; //관리자 등급별 권한관리
    public static final char EMSCONFIG_USER_LOG_OPERATIONLOG = 'd'; //실시간운용로그감시
    public static final char EMSCONFIG_USER_USERHISTORY = 'e'; //전체운용이력관리
    public static final char EMSCONFIG_USER_USERLOGFILE = 'f'; //로컬운용로그 보기
    public static final char EMSCONFIG_OVERFLOWSERVICE = 'g'; //과부하시서비스제한
    public static final char EMSCONFIG_PROCESSCYCLE_DBCYCLE = 'h'; //데이터베이스백업주기
    public static final char EMSCONFIG_PROCESSCYCLE_LOGDELCYCLE = 'i'; //로그삭제주기
    public static final char EMSCONFIG_PROCESSCYCLE_SYSTEMCYCLE = 'j'; //시스템성능데이터수집주기
    public static final char EMSCONFIG_PROCESSCYCLE_CSVCYCLE = 'k'; //호통계수집주기
    public static final char EMSCONFIG_PROCESSCYCLE_PROCESSBYMACHINE_CYCLEMACHINE = 'l'; //장치별주기설정
    public static final char EMSCONFIG_VERSIONMANAGE_VERSIONMANAGE = 'm'; //버젼관리
    public static final char EMSCONFIG_CODEMANAGE_CODEMANAGE = 'n'; //코드관리
    public static final char EMSCONFIG_ADDITIONSERVICE_ADDITIONSERVICE = 'o'; //부가서비스관리
    public static final char EMSCONFIG_STATUS_FAULTSOUND = 'p'; //장애음설정
    public static final char EMSCONFIG_STATUS_SET_ALARMMESSAGE = 'q'; //로그설정
    public static final char EMSCONFIG_PASSWORDCHECK = 'r'; // 주요작업 패스워드관리
    public static final char EMSCONFIG_PROCESSCYCLE_IPPBXCYCLE = 's'; //가입자장치관리주기

    //신버젼 06.09.06
    /**************************** 1. 시스템관리 ********************************/
    // 1.1 장애감시
    public static final char SSW_ALARM_MONITOR = 'a'; // 장애감시화면
    public static final char SSW_ALARM_CRITICALVALUE = 'b'; // 장애임계치 설정
    // 1.2 상태관리
    public static final char SSW_STATUS_SYSTEMMONITOR = 'c'; // 시스템 자원
    public static final char SSW_STATUS_CURRENTCALLSTATE = 'd'; // 현재호
    // 1.3 환경설정
    public static final char SSW_CONFIG_SSWCONFIG = 'e'; // SSWCONFIG
    public static final char SSW_CONFIG_SWMANAGE = 'f'; // 소프트웨어 버젼관리
    public static final char SSW_CONFIG_SWCHANGE = 'g'; // 소프트웨어 변경
    public static final char SSW_CONFIG_ACTIVATOR = 'h'; // SSW 절체
    // 1.4 로그
    public static final char SSW_LOG_STATUS = 'i'; // 상태로그
    public static final char SSW_LOG_ALARM = 'j'; // 장애로그
    public static final char SSW_LOG_FAULT = 'k'; // 경보로그
    // 1.5 실시간 로그감시
    public static final char SSW_MONITOR_ALL = 'l'; // 전체로그
    public static final char SSW_MONITOR_ALARM = 'm'; // 장애로그
    public static final char SSW_MONITOR_FAULT = 'n'; // 경보로그
    public static final char SSW_MONITOR_STATUS = 'o'; // 상태로그
    // 1.6 호 감시/추적
    public static final char SSW_TRACE_E164 = 'p'; // E164 TRACE
    public static final char SSW_TRACE_CALL = 'q'; // 호 TRACE
    public static final char SSW_TRACE_ENDPOINT = 'r'; // 단말 TRACE
    public static final char SSW_TRACE_CURRENTCALLLIST = 's'; // 현재 호 목록
    public static final char SSW_TRACE_LONGTIMECALLLOG = 't'; // 장시간 호 로그

    /******************************** 2. 구성관리 ******************************/
    // 2.1 가입자장치 등록관리
    public static final char ELEMENT_IPPBX_IPPBX = 'a'; // 가입자 장치
    public static final char ELEMENT_IPPBX_SIPENDPOINT = 'b'; // 단말
    public static final char ELEMENT_IPPBX_DEFAULT_SDPCONFIG = 'c'; // IPPBX SDP
    // 2.2 연동장치 등록관리
    public static final char ELEMENT_SIP_NEIGHBORPROXY = 'd'; // SIP PROXY
    public static final char ELEMENT_SIP_SIPTGW = 'e'; // 고정형 SIP TGW
    public static final char ELEMENT_SIP_SIPTGW_REGISTER = 'f'; // 등록형 SIP TGW
    // 2.3 일반관리
    public static final char ELEMENT_SUBSCRIBER_E164 = 'g'; // 번호별 가입자
    public static final char ELEMENT_SUBSCRIBER_GROUP = 'h'; // 그룹별 가입자
    public static final char ELEMENT_SUBSCRIBER_SIPDOMAIN = 'i'; // 도메인
    // 2.4 라우팅관리
    public static final char ELEMENT_ROUTING_ROUTE_ROUTEGROUP = 'j'; // 루트그룹
    public static final char ELEMENT_ROUTING_ROUTE_TIMEROUTEGROUP = 'k'; // 시간분배루트그룹
    public static final char ELEMENT_ROUTING_POLICY_PREFIXTABLE = 'l'; // 번호정책별 라우팅
    public static final char ELEMENT_ROUTING_POLICY_LOCALPREFIX = 'm'; // 자국번호 정책
    public static final char ELEMENT_ROUTING_POLICY_SPECIALNUMBER = 'n'; // 특번정책
    // 2.5 중계장치 관리
    public static final char ELEMENT_ROUTESTATE_ROUTEMONITOR = 'o';  // RELAY 장비상태
    public static final char ELEMENT_ROUTESTATE_SIPREGSERVER = 'p';  // RELAY 장비와 PROXY간 통신상태

    /****************************** 3. 부가서비스 ******************************/
    // 3.1 서비스환경설정관리
    public static final char SERVICE_CONFIG_SPECIALSERVICENUMBER = 'a'; // SPECIAL서비스
    public static final char SERVICE_CONFIG_BLOCKGROUP = 'b'; // 제한그룹
    public static final char SERVICE_CONFIG_MCUGROUP = 'c'; // 부가서비스 루트
    // 3.2 서비스 설정관리
    public static final char SERVICE_SERVICE_GROUPSERVICEMANAGER = 'd'; // 그룹별 부가서비스
    public static final char SERVICE_SERVICE_ROOTSERVICEMANAGER = 'e'; // 루트별 부가서비스
    public static final char SERVICE_SERVICE_IPPBXSERVICEMANAGER = 'f'; // IPPBX별 부가서비스
    public static final char SERVICE_SERVICE_SERVICEMANAGER = 'g'; // 전화번호별 부가서비스
    public static final char SERVICE_SERVICE_MCUMENTCODE = 'h'; // MCU멘트 코드
    public static final char SERVICE_SERVICE_COMMONSHORTCUT = 'i'; // 공통단축번호

    /**************************** 4. 통계관리 **********************************/
    // 6.1 통계관리
    public static final char STATISTICS_SET_LONGTIMECALL = 'a'; // 장시간 호 설정

    /**************************** 5. EMS관리 ***********************************/
    // 7.1 EMS 시스템관리
    public static final char EMS_EMS_INFO = 'a'; // EMS 정보
    public static final char EMS_EMS_ACTIVATE = 'b'; // EMS 절체
    // 7.2 보안관리
    public static final char EMS_SECURITY_USERACCOUNT = 'c'; // 운용자관리
    public static final char EMS_SECURITY_USERLEVEL = 'd'; // 운용자 등급별 권한관리
    public static final char EMS_SECURITY_LOG_USERHISTORY = 'e'; // 운용로그
    public static final char EMS_SECURITY_LOG_USERMONITOR = 'f'; // 실시간 운용로그
    public static final char EMS_SECURITY_LOG_USERLOGFILE = 'g'; // 운용자PC운용로그
    // 7.3 과부하관리
    public static final char EMS_OVERFLOWSERVICE_OVERFLOWSERVICE = 'h'; // 과부하시 서비스제한
    // 7.4 배치프로세스 관리
    public static final char EMS_PROCESSCYCLE_EMS_DBCYCLE = 'i'; // 데이터베이스 백업주기
    public static final char EMS_PROCESSCYCLE_EMS_LOGDELCYCLE = 'j'; // 로그삭제주기
    public static final char EMS_PROCESSCYCLE_EMS_SYSTEMCYCLE = 'k'; // 시스템성능데이터 수집주기
    public static final char EMS_PROCESSCYCLE_EMS_CSVCYCLE = 'l'; // 호통계 수집주기
    public static final char EMS_PROCESSCYCLE_EMS_IPPBXCYCLE = 'm'; // 가입자장치 주기
    public static final char EMS_PROCESSCYCLE_SSW_MGTCYCLE = 'n'; // 장비별 주기
    // 7.5 기타설정
    public static final char EMS_ETC_VERSIONMANAGE = 'o'; // 버젼관리
    public static final char EMS_ETC_CODEMANAGE = 'p'; // 코드관리
    public static final char EMS_ETC_ADDITIONSERVICE = 'q'; // 부가서비스 환경설정
    public static final char EMS_ETC_FAULTSOUND = 'r'; // 장애음설정
    public static final char EMS_ETC_ALARMMESSAGE = 's'; // 장애코드 등급설정
    public static final char EMS_ETC_PASSWORDCHECK = 't'; // 주요작업 패스워드 설정
    // 7.6 외부연동관리
    public static final char EMS_LINK_SNMPSESSION = 'u'; // SNMP 세션관리
    public static final char EMS_LINK_LINKACCOUNT = 'v'; // 가입자서버 연동계정관리
    // 7.6 호처리장치 그룹관리
    public static final char EMS_SYSGROUP_SYSGROUP = 'w'; // 호처리장치 그룹


    /********** 운영자 작업로그를 위한 정의 - 카테고리 정의 **********/
    //구버젼(삭제예정)
    public static final int ELEMENT = 1; // 구성관리
    public static final int STATUS = 2; // 장애관리
    public static final int PERFORMANCE = 3; // 성능관리
    public static final int EMSCONFIG = 4; // EMS 관리

    //신버젼(06.09.05)
    public static final int MENU_SSW = 1; // 시스템관리
    public static final int MENU_ELEMENT = 2; // 구성관리
    public static final int MENU_SERVICE = 3; // 부가서비스
    public static final int MENU_STATISTICS = 4; // 성능관리
    public static final int MENU_EMSMANAGE = 5; // EMS 관리

    // 작업명령 TYPE 정의
    public static final int INSERT = 1;
    public static final int DELETE = 2;
    public static final int UPDATE = 3;
    public static final int USEROUT = 4;
    public static final int LOGIN = 5;
    public static final int LOGOUT = 6;
    public static final int FAULT_ACK = 7;
    public static final int FAULT_CLEAR = 8;
    public static final int RUN_PROCESS = 9;
    public static final int BLOCK = 10;
    public static final int UNBLOCK = 11;
    public static final int RESET = 12;
    public static final int SERVICE = 13;
    public static final int UNSERVICE = 14;
    public static final int UNLOCK = 15;
    public static final int FAIL = 16;
    public static final int RUNSSW = 17;
    public static final int KILLSSW = 18;
    public static final int RECOVERDB = 19;
    public static final int CHANGEPROCESS = 20;
    public static final int RECOVERPROCESS = 21;
    public static final int ACTIVATESSW = 22;
    public static final int ACTIVATEEMS = 27;
    public static final int KILLPROCESS_PERMANENT = 23;
    public static final int RUNPROCESS_PERMANAENT = 24;
    public static final int UNREGISTER = 28;

    // 운용로그파일만들기
    public static final String operation_log_path = "/logs";

    private static boolean bDebug = false;

    //사용자 세션 정보
    public LoginBean lbean = null;
    
    public UserLogFunc() {}
    
    public UserLogFunc(LoginBean lbean) {
        this.lbean = lbean;
    }

    // operation메세지를 만든다.
//    public boolean makeOperationMessage(String strSSWID, int nCategori, String strSubject, String strTarget, int nAction) {
//        /**MESSAGE 형식
//         * {|0|(MESSAGE TYPE)|(MESSAGE)|} 형식이다.
//         * 가장 앞자리는 편의상 비워놓았으며 DEFAULT 0 이다.
//         * 위 형식은 OPERATION, INFOMATION메세지일 경우이며
//         * ALARM, FAULT메세지는 3번째자리 MESSAGE에서 분기한다.
//         * ALARM, FAULT메세지 형식
//         * {|0|(MESSAGE TYPE)|(ALARM_LEVEL)|(ALARM_TYPE)|(ALARM_CODE)|(ALARM_NAME)|(ALARM_MESSAGE)|}
//         * 추가 분류는 추후에 한다.
//         * OPERATION MESSAGE 메세지 형식
//         * {|0|(MESSAGE TYPE)|(SSWID)|(CATEGORI)|(SUBJECT)|(ELEMENT)|(ACTION)|}
//         * 추가 분류는 추후에 한다.
//         */
//    	System.out.println("====makeOperationMessage====");
//        String strTime = WebUtil.ConvertMillisecondtoDateString_old(System.currentTimeMillis());
//        String strOperationMessage = "{|0|" + WebUtil.OPERATION + "|";
//        strOperationMessage = strOperationMessage + " [ 작업시간 : " + strTime + " ]  [ 접속IP : " + lbean.getUserIP() + " ]  [ 관리자 ID : " + lbean.getUserName() + " ] \n ";
//        String strCategori = "";
//        String strAction = "";
//
//        if (nCategori == UserLogFunc.MENU_SSW) {
//            strCategori = "시스템관리";
//        } else if (nCategori == UserLogFunc.MENU_ELEMENT) {
//            strCategori = "구성관리";
//        } else if (nCategori == UserLogFunc.MENU_SERVICE) {
//            strCategori = "부가서비스";
//        } else if (nCategori == UserLogFunc.MENU_STATISTICS) {
//            strCategori = "통계관리";
//        } else if (nCategori == UserLogFunc.MENU_EMSMANAGE) {
//            strCategori = "EMS 관리";
//        }
//
//        if (nAction == UserLogFunc.FAIL) {
//            strAction = "작업에 실패하셨습니다.";
//        } else if (nAction == UserLogFunc.INSERT) {
//            strAction = "입력하셨습니다.";
//        } else if (nAction == UserLogFunc.DELETE) {
//            strAction = "삭제하셨습니다.";
//        } else if (nAction == UserLogFunc.UPDATE) {
//            strAction = "수정하셨습니다.";
//        } else if (nAction == UserLogFunc.USEROUT) {
//            strAction = "강제종료하셨습니다.";
//        } else if (nAction == UserLogFunc.LOGIN) {
//            strAction = "로그인하셨습니다.";
//        } else if (nAction == UserLogFunc.LOGOUT) {
//            strAction = "로그아웃하였습니다.";
//        } else if (nAction == UserLogFunc.FAULT_ACK) {
//            strAction = "장애를 인식하셨습니다.";
//        } else if (nAction == UserLogFunc.FAULT_CLEAR) {
//            strAction = "장애를 해제하셨습니다.";
//        } else if (nAction == UserLogFunc.RUN_PROCESS) {
//            strAction = "프로세스를 실행하셨습니다.";
//        } else if (nAction == UserLogFunc.BLOCK) {
//            strAction = "블록하셨습니다.";
//        } else if (nAction == UserLogFunc.UNBLOCK) {
//            strAction = "언블록하셨습니다.";
//        } else if (nAction == UserLogFunc.RESET) {
//            strAction = "RESET 하셨습니다.";
//        } else if (nAction == UserLogFunc.SERVICE) {
//            strAction = "서비스 하셨습니다.";
//        } else if (nAction == UserLogFunc.UNSERVICE) {
//            strAction = "미서비스 하셨습니다.";
//        } else if (nAction == UserLogFunc.UNLOCK) {
//            strAction = "해제 하셨습니다.";
//        }
//        //else if(nAction == UserLogFunc.RUNSSW) strAction = "소프트스위치를 실행하셨습니다.";
//        else if (nAction == UserLogFunc.RUNSSW) {
//            strAction = "SSW를 실행하셨습니다.";
//        } else if (nAction == UserLogFunc.KILLSSW) {
//            strAction = "SSW를 중지하셨습니다.";
//        } else if (nAction == UserLogFunc.RECOVERDB) {
//            strAction = "데이터베이스를 복구하셨습니다.";
//        } else if (nAction == UserLogFunc.CHANGEPROCESS) {
//            strAction = "프로세스를 변경하셨습니다.";
//        } else if (nAction == UserLogFunc.RECOVERPROCESS) {
//            strAction = "프로세스를 복구하셨습니다.";
//        } else if (nAction == UserLogFunc.ACTIVATEEMS) {
//            strAction = "EMS 액티브를 변경하셨습니다..";
//        } else if (nAction == UserLogFunc.ACTIVATESSW) {
//            strAction = "SSW를 절체하셨습니다.";
//        } else if (nAction == UserLogFunc.KILLPROCESS_PERMANENT) {
//            strAction = "해당 프로세스를 종료하셨습니다.";
//        } else if (nAction == UserLogFunc.RUNPROCESS_PERMANAENT) {
//            strAction = "해당 프로세스를 실행하셨습니다.";
//        } else if (nAction == UserLogFunc.UNREGISTER) {
//            strAction = "해당 TGW를 등록해지하셨습니다.";
//        }
//
//        if ("--".equals(strSSWID) == true) {
//            strOperationMessage = strOperationMessage + " " + strAction + "\n}";
//        } else {
//            strOperationMessage = strOperationMessage + " 시스템그룹 " + strSSWID + " / ";
//            strOperationMessage = strOperationMessage + strCategori + " / ";
//            strOperationMessage = strOperationMessage + strSubject + " / 에서" + " \n";
//            strOperationMessage = strOperationMessage + "  " + strTarget + "을 " + strAction + " \n}";
//        }
//        // db에 로그이력 남김
//        insertDBUserLog(lbean.getUserName(), strSSWID, nCategori, strSubject,nAction, strTarget, lbean.getUserIP());
//        // 로그파일 만들기
//        makeUserCommandLog(strOperationMessage);
//        // 서버로 메세지 전송
//        ServerLogin.getServerLogin().sendMessage(strOperationMessage);
////        MainFrame.getMainFrame().sendMessage(strOperationMessage);
//        return true;
//    }
//
//    public static void send_alarm_Level_Change(String strCode, String strLevel) {
//        // |83|Code|Level| 장애등급 변경코드이다.
//        String Message = "{|83|" + strCode + "|" + strLevel + "|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_alarm_criticalValue_Change() {
//        // |82|CriticalValueChange|| 장애임계치 변경코드이다.
//        String Message = "{|82|CriticalValueChange|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_processcycle_change(String strCycleID) {
//        // |80|CycleID|| 프로세스주기 변경코드이다.
//        String Message = "{|80|" + strCycleID + "|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_processcycle_run(String strCycleID) {
//        // |81|CycleID|| 프로세스주기  실행코드이다.
//        String Message = "{|81|" + strCycleID + "|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_machineagent_run(String strCycleID, String SysGroupID, String MachineID) {
//        // |84|CycleID|SysgroupID|MachineID| 프로세스주기  실행코드이다.
//        String Message = "{|84|" + strCycleID + "|" + SysGroupID + "|" + MachineID + "|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_machineagent_recover(String SysGroupID,String MachineID) {
//        // |85|SysgroupID|MachineID| 디비복구코드이다.
//        String Message = "{|85|" + SysGroupID + "|" + MachineID + "|}";
//        //해당 프로세스 실행변경 명령을 서버에 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public static void send_forced_logout(String strUserName) {
//        // |99|Userid|UserIP| 강제종료코드이다.
//        String Message = "{|99|" + strUserName + "|}";
//        //강제종료명령을 해당 클라이언트에게 내린다
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    public void send_emschange() {
//        // |99|Userid|| EMS 변경코드이다.
//        String Message = "{|60|" + lbean.getUserName() + "|}";
//        //EMS 가 변경되었음을 알린다.
//        ServerLogin.getServerLogin().sendMessage(Message);
//    }
//
//    //강제 종료 명령을 받았을때 로그아웃을 하고 종료
//    public void forced_logout() {
//        selflogoutDBUpdate();
//    }
//
//    //강제 종료 명령을 받았을때 로그아웃을 하고 종료
//    public void otherClient_login_logout() {
//        selflogoutDBUpdate();
//    }

    // 로그아웃
    public boolean logout() {
//        JOptionPane.showMessageDialog(null, " 성공적으로 로그아웃되었습니다.", "성공", JOptionPane.PLAIN_MESSAGE);
    	System.out.println("성공적으로 로그아웃되었습니다.");
        selflogoutDBUpdate();
        return true;
    }

//    public void disconnect_logout() {
//        //selflogoutDBUpdate () ;
//        if ((ServerLogin.getServerLogin() != null) &&
//            (ServerLogin.getServerLogin().bOnUsing == true)) {
//        	System.out.println("서버 혹은 데이터베이스와의 연결이 끊어졌습니다. 다시 접속에 주십시요.");
////            JOptionPane.showMessageDialog(null, " 서버 혹은 데이터베이스와의 연결이 끊어졌습니다. 다시 접속에 주십시요.", "성공", JOptionPane.PLAIN_MESSAGE);
//        }
//    }

    // 로그아웃시 디비업데이트
    public void selflogoutDBUpdate() {
        logoutDBUpdate(lbean.getUserName());
    }

    // 로그아웃시 디비업데이트
    public static void logoutDBUpdate(String UserID) {
        Statement statement = null;
        try {
            statement = ConnectionManager.allocStatementDirect("EMS");
            //statement.stxTransaction();
            String queryString = "";
            queryString = "Update TABLE_STATUSACCOUNT set  ONLOGIN = 0 ";
            queryString += " where USERNAME='" + UserID + "'";
            int nResult = 0;
            nResult = statement.executeUpdate(queryString);
            if (nResult < 1) {
            	System.out.println("로그아웃에 실패하였습니다.");
            }else
            	System.out.println("성공적으로 로그아웃되었습니다.");
            
            //statement.endTransaction(true);
        } catch (Exception e) {
        	System.out.println(e.getMessage());
//            JOptionPane.showMessageDialog(null, e.getMessage(),  "경고", JOptionPane.ERROR_MESSAGE);
        } finally {
            ConnectionManager.closeStatementDirect(statement);
        }
    }

    // 운영로그를 디비로 넣는 함수
    public void insertDBUserLog(String strUserID, String strSSWID,int nCategori,String strSubject, int nAction,String strElement, String strIP) {
    	insertDBUserLog2(strUserID, strSSWID, nCategori, strSubject, nAction, strElement, strIP);
    	if(1==1) return ;
    	
        String strSysGroupID = strSSWID;
        if ((strSysGroupID == null) || ("".equals(strSysGroupID))) {
            strSysGroupID = "---";
        }

        DataStatement statement2 = null;
        try {
            statement2 = ConnectionManager.allocStatement("EMS");
            statement2.stxTransaction();
            String queryString = "";
            queryString = "INSERT INTO TABLE_OPERATIONHISTORY (CHECKTIME, MANAGERID, SYSGROUPID, CATEGORI, SUBJECT, ELEMENT, ACTIONDML, IPADDRESS) ";
            queryString += "VALUES ( SYSDATE, '" + strUserID + "', '" + strSysGroupID;
            queryString += "'," + nCategori + ",'" + strSubject + "','" + strElement + "'," + nAction + ",'" + strIP + "')";
            int nResult = 0;
            nResult = statement2.executeUpdate(queryString);
            statement2.endTransaction(true);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            ConnectionManager.freeStatement(statement2);
        }
    }
    public void insertDBUserLog2(String strUserID, String strSSWID,int nCategori,String strSubject, int nAction,String strElement, String strIP) {
        String strSysGroupID = strSSWID;
        if ((strSysGroupID == null) || ("".equals(strSysGroupID))) {
            strSysGroupID = "---";
        }

        Statement stmt3 = null;
        try {
        	stmt3 = ConnectionManager.allocStatementDirect("EMS");
    		
            String queryString = "";
            queryString = "INSERT INTO TABLE_OPERATIONHISTORY (CHECKTIME, MANAGERID, SYSGROUPID, CATEGORI, SUBJECT, ELEMENT, ACTIONDML, IPADDRESS) ";
            queryString += "VALUES ( SYSDATE, '" + strUserID + "', '" + strSysGroupID;
            queryString += "'," + nCategori + ",'" + strSubject + "','" + strElement + "'," + nAction + ",'" + strIP + "')";
            int nResult = 0;
            nResult = stmt3.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        	 ConnectionManager.closeStatementDirect(stmt3);
        }
    }

    // 해당 페이지의 명령수행 권한을 조회
    public boolean hasCommandCode(int nCategori, char code) {
        if (Integer.parseInt(lbean.getUserLevel()) == 1)return true;
        else if (Integer.parseInt(lbean.getUserLevel()) == 3)return false;
        boolean bValue = false;
        String Categori_Code_List = "";
        try {
            if (nCategori == UserLogFunc.MENU_SSW) {
                Categori_Code_List = lbean.getSsw();
            } else if (nCategori == UserLogFunc.MENU_ELEMENT) {
                Categori_Code_List = lbean.getElement();
            } else if (nCategori == UserLogFunc.MENU_SERVICE) {
                Categori_Code_List = lbean.getService();
            } else if (nCategori == UserLogFunc.MENU_STATISTICS) {
                Categori_Code_List = lbean.getPerformance();
            } else if (nCategori == UserLogFunc.MENU_EMSMANAGE) {
                //Categori_Code_List = lbean.getEMSManage () ;
                return false;
            } else return false;

            if ((Categori_Code_List == null) ||
                ("".equals(Categori_Code_List.trim()) == true)) {
                return false;
            }
            if (Categori_Code_List.indexOf(code) > -1) {
                bValue = true;
            } else {
                bValue = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return bValue;
    }

    public static void makeUserCommandLog(String log) {
        try {
            //절대경로구하기
            String file_path = System.getProperty("user.dir") + operation_log_path;
            if (bDebug) System.out.println("파싱하기전 메세지는 = " + log);

            // 메세지 파싱
            StringTokenizer tokenHeader = new StringTokenizer(log, "{}");
            int mCount = tokenHeader.countTokens();
            String[] mBody = new String[mCount];
            for (int i = 0; i < mCount; i++) {
                mBody[i] = tokenHeader.nextToken();

                StringTokenizer tokenData = new StringTokenizer(mBody[i], "|");
                tokenData.nextToken();
                tokenData.nextToken();
                String strLog = tokenData.nextToken();
                // 파일이름은 해당 날짜로 한다.
                String filename = WebUtil.ConvertMillisecondtoDateString_YYYYMMDD(System.currentTimeMillis());

                // 폴더가 없으면 만든다.
                File fl = new File(file_path);
                fl.mkdir();
                if(11==1){
	                File[] subfiles = fl.listFiles(new FilenameFilter() {
						public boolean accept(File arg0, String arg1) {
							if( arg0.getName().indexOf("bizportal_")==0 )
								return true;
							return false;
						}
					});
	                long size = fl.length() /1024/*kb*/ /1024/*Mb*/;
                }
                fl = null;
                fl = new File(file_path + "/bizportal_" + filename + ".log");
                FileWriter fw = new FileWriter(fl, true);
                fw.write(strLog + "\n");
                fw.flush();
                fw.close();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /** 주요커맨드 비밀번호 설정여부 리턴*/
    public boolean isSetPWD(String strCommandName) {
        Statement statement = null;
        ResultSet rs = null;
        int nUseFlag = 0;
        boolean isUseFlag = false;
        try {
            statement = ConnectionManager.allocStatementDirect("EMS");
            String queryString = "";
            queryString = "SELECT USEFLAG FROM TABLE_PASSWORDCHECK WHERE COMMANDNAME = '" + strCommandName + "'";
            rs = statement.executeQuery(queryString);
            if (rs.next()) {
                nUseFlag = rs.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception e1) {}
            ConnectionManager.closeStatementDirect(statement);
        }
        if (nUseFlag == 1) {
            isUseFlag = true;
        } else {
            isUseFlag = false;
        }
        return isUseFlag;
    }

    /** 액티브 변경이후 액티브정보 다시 읽기*/
    public void getServerInfo() {
        resetBeanConnectionData();
        Statement statement = null;
        ResultSet rs = null;
        try {
            statement = ConnectionManager.allocStatementDirect("EMS");
            String strQuery = "SELECT COMM_IP, DBUSERNAME, DBPASSWORD, DBDRIVERCLASS, PROCESSSTATUS, PROCESSID FROM TABLE_SYSTEM_HARDWARE WHERE SYSGROUPID='01' AND PROCESSTYPE='EMS'";
            rs = statement.executeQuery(strQuery);
            while (rs.next()) {
                if (rs.getInt(5) == 1) {
                    lbean.setActive_host(rs.getString(1));
                    lbean.setActive_dbname(rs.getString(2));
                    lbean.setActive_dbpwd(rs.getString(3));
                    lbean.setActive_dbclass(rs.getString(4));
                    lbean.setActive_hostname(rs.getString(6));
                } else if (rs.getInt(5) == 0) {
                    lbean.setStandby_host(rs.getString(1));
                    lbean.setStandby_dbname(rs.getString(2));
                    lbean.setStandby_dbpwd(rs.getString(3));
                    lbean.setStandby_dbclass(rs.getString(4));
                    lbean.setStandby_hostname(rs.getString(6));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception e1) {}
            ConnectionManager.closeStatementDirect(statement);
        }
    }

    public void resetBeanConnectionData() {
        lbean.setActive_hostname("");
        lbean.setActive_host("");
        lbean.setActive_dbname("");
        lbean.setActive_dbpwd("");
        lbean.setActive_dbclass("");
        lbean.setStandby_hostname("");
        lbean.setStandby_host("");
        lbean.setStandby_dbname("");
        lbean.setStandby_dbpwd("");
        lbean.setStandby_dbclass("");
    }

    public void resetActiveDBConnection() {
        /** 액티브 서버의 디비 접속으로 변경*/
        ConnectionManager.getInstance().resetDBManager(lbean.getActive_host(), lbean.getStandby_host());
    }

    public static String userlevelToString(int nLevel){
        String returnString = "";
        switch(nLevel){
        case 1 : returnString = "Admin";
            break;
        case 2 : returnString = "Normal";
            break;
        case 3 : returnString = "Guest";
            break;
        case 99 : returnString = "UserSetting";
            break;
        default : returnString = "UnKnown";
            break;
        }
        return returnString;
    }
}
