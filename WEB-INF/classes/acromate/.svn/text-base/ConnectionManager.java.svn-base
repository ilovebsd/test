package acromate ;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;

import com.acromate.data.code.NetworkConst;
import com.acromate.driver.core.IDataObject;
import com.acromate.driver.db.DataStatement;
import com.acromate.driver.db.IDataStatement;
import com.acromate.driver.net.IPacket;
import com.acromate.driver.net.IPacketHandler;
import com.acromate.driver.net.Packet;
import com.acromate.lang.l;
import com.acromate.session.SessionClient;
import com.acromate.session.SessionClientList;
import com.acromate.session.UserSessionClient;
import com.acromate.util.Str;

import webuser.ServerLogin;

public class ConnectionManager implements IPacketHandler
{
    private static ConnectionManager instance;
    public static SessionClientList sessionClientList = new SessionClientList();
    public static IGetSelectedNode selectedNode;
    public static UserSessionClient userSessionClient;
    public static String systemPath = "" ;
    public Properties properties;
    static String currentSysGroupName;
    static String currentSysGroupID;
    private static String strUserName = "";
    private static String strHost = "";
    private static String strHostSecond = "";

    //condor-20061228
    private static String strPassword = "";

    private static String strProcessList = "";
    private static Hashtable hSvcType = new Hashtable() ;  // ServiceType 에 대한 clusterID
    private static Hashtable hClusterID = new Hashtable() ;  // clusterID 에 대한 ServiceType

    //로그인시 생성자 2(웹 로그인시)
    //사용자 아이디로 registerDataSub()를 해야 DB Handle이 가능하다.
    public ConnectionManager(Properties properties) {
        initDataStub();
        instance = this;
        strHost = (String) properties.get("ems.server.ip");
        strHostSecond = strHost;
        makeDataStub(properties);
        this.properties = properties ;
    }

    //로직 내부에서 DB연결 재설정시 생성자
    //registerDataSub()내장
    public ConnectionManager(String strHostName, String strHostSecondName) {
        initDataStub();
        instance = this;
        strHost = strHostName;
        strHostSecond = strHostSecondName;
        makeDataStub(null);
        String ip = registerDataSub(strUserName, strPassword);
    }

    public static ConnectionManager getInstance() {
        return instance;
    }

   //DataStub 객체를 생성한다. registerClient 는 하지 않는다.
    public void makeDataStub(Properties prop) {
        try {
            initDataStub();
            userSessionClient = new UserSessionClient();
            int port = 1099;
            if (prop == null) prop = properties;
            if (prop !=null) {
                int tempPort = Str.CheckNullInt(prop.getProperty("ems.server.port"));
                if (tempPort != 0 && tempPort != 1099) port = tempPort ;
            }
            if(userSessionClient.getRemoteDataObject(strHost, port) == 0) {
                userSessionClient.registerHandler(this);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void connectOpposite() {}

    public void releaseOpposite() {}

    //그룹아이디 변경시(그룹이름과 그룹아이디 모두 저장)		  // Hashtable 에 ServiceType 입력
    public static synchronized boolean setSysGroupID(String strSysGroupName, String strSysGroupID) {
        if(strSysGroupID.equals(currentSysGroupID)) return true;
        if (!strSysGroupID.equals(l.x("SYSTEM 선택","Select System"))) {
                SessionClient sessionClient = sessionClientList.getSessionClient(strSysGroupID);
                String strClusterList = sessionClient.getGroupScript( "LIST" );

                String clusterId = "", serviceType = "", script = "";
                StringTokenizer clusters = new StringTokenizer(strClusterList);

                boolean firstGroup = true;
                hClusterID.clear();
                hSvcType.clear();
                while(clusters.hasMoreTokens()) {
                        clusterId = clusters.nextToken(",");
                        if (!clusterId.startsWith("(")) continue;
                        script = Str.cover(clusterId) + ".serviceType";
                        serviceType = sessionClient.getGroupScript( script );
                        hClusterID.put( Str.uncover(clusterId) , serviceType );
                        hSvcType.put( serviceType , Str.uncover(clusterId) );
                }
                if (!Str.uncover(strSysGroupID).trim().equals("01")) hSvcType.put( "ems" , "ems" );
        }
        currentSysGroupID = strSysGroupID;
        currentSysGroupName = strSysGroupName;
        return true;
    }

    // 모든 리소스 script 리턴
    public static synchronized String getRootScript( String param) {
        String script = userSessionClient.getRootScript( param );
        return script ;
    }

    //그룹아이디 리턴
    public static synchronized String getSysGroupID() {
        return currentSysGroupID;
    }

    //사용자 아이디 리턴
    public static synchronized String getUserID() {
        return strUserName;
    }

    /** 액티브 변경시 액티브 서버의 DB 접속으로 변경하기 위한 함수, 호스트는 바뀌나 사용자는 바뀌지 않는다.*/
    public  void resetDBManager(String strActiveHost, String strStandbyHost) {
        strHost = strActiveHost;
        strHostSecond = strStandbyHost;
        forcibleLogoutManager(strUserName);
        makeDataStub(properties);
        String userSessionID = registerDataSub(strUserName, strPassword);
        System.out.println("#### userSessionID:"+userSessionID);
    }

    public  void resetDBManager() {
        makeDataStub(properties);
        String userSessionID = registerDataSub(strUserName, strPassword);
        System.out.println("#### ip:"+userSessionID);
    }

    /** RegisterClient를 실행하여 DataStub 초기화 */
    public synchronized String registerDataSub(String UserName, String Password) {
        strUserName = UserName;
        strPassword = Password;

        String userSessionID = userSessionClient.login(UserName, Password);

        String groupid = "";
        String groupname = "";
        if(userSessionID.length() > 5) { // sessionID 가 정상이면
            userSessionClient.register();
            String groupList = "";
            try {
                groupList = userSessionClient.getGroup();
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("getGroup:"+e.toString());
                groupList ="01,TEST";
            }

            StringTokenizer groups = new StringTokenizer(groupList);
            groupid = "";
            groupname = "";
            sessionClientList.clear();
            userSessionClient.removeAll();
            while (groups.hasMoreTokens()) {
                groupid = groups.nextToken(",");
                groupname = groups.nextToken(",");

                SessionClient sessionClient = new SessionClient();
                sessionClient.getRemoteDataObject(userSessionClient.getRemoteAddress(),userSessionClient.getRemotePort());
                boolean bResult = sessionClient.register(userSessionID,groupid);
                if (bResult == false ) System.out.println("registerGroupId Error:"+groupid);
                else sessionClientList.addSessionClient(groupid, sessionClient);
                userSessionClient.appendTail(sessionClient);
            }
            try {
                setSysGroupID(groupname, groupid);
                  // Hashtable 에 ServiceType 입력, EMS서버에 그룹 지정
            } catch(Exception e) {
                System.out.println("registerGroupId:"+e.toString());
            }
        }
        return userSessionID;
    }

    //로직 내부에서 DB연결 재설정시 생성자
    //registerDataSub()내장
    public static synchronized boolean forcibleLogoutManager(String userID) {
        int res = userSessionClient.forciblyLogoutClient(userID);
        if ( res < 0) return false;
        else return true;
    }

    /** 서버로부터 받는 그룹리스트 String으로 리턴 */
    public static synchronized String getGroup() {
        return userSessionClient.getGroup();
    }

    /** 데이터서터브 객체 리턴 */
    public static SessionClient getSessionClient(String sysGroupID) {
        return sessionClientList.getSessionClient(sysGroupID);
    }

    public static UserSessionClient getSessionClient() {
        return userSessionClient;
    }

    /** DataStub 객체는 오직 하나만 유지되어야 하며 사용이 종료된 DataStub 객체는 Release 하여야 한다.*/
    public static synchronized void initDataStub() {
        if(userSessionClient != null) {
            try { userSessionClient.logout(); }
            catch (Exception e){ e.printStackTrace();}
            userSessionClient = null;
        }
    }

    //####################### DB Handling ##########################//

    /** 할당받은 DataStatement 객체는 반납한다. */
    public static synchronized void freeStatement(DataStatement statement) {
        if (statement.getSystemPath() == null){
            userSessionClient.freeStatementEMS(statement);
        }
        else{
            SessionClient sessionClient = sessionClientList.getSessionClientByPath(statement.getSystemPath());
            if (sessionClient == null) sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            if (sessionClient != null) sessionClient.freeStatement(statement);
        }
    }

    /** 서버로부터 DataStatement 객체를 할당받는다. */
    public static synchronized DataStatement allocStatement( String script , int options ) {

        if (options != IDataObject.OPTIONS_DB_TYPE_BASIC){
            return userSessionClient.allocStatementEMS(options);
        }
        if ( script.equals("") ) return null ;
        SessionClient sessionClient = sessionClientList.getSessionClientByPath(script);
        if (sessionClient == null) sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
        return sessionClient.allocStatement(script);
    }

    /** 서버로부터 DataStatement 객체를 할당받는다. */
    public static synchronized DataStatement allocStatement(String SYSTEMID) {
        String script = "";
        if (SYSTEMID.equals("SSW")) {
            script = Str.cover((String)hSvcType.get("ssw")) + ".active" ;       // (ClusterID).active
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            return sessionClient.allocStatement(script);
        } else if (SYSTEMID.equals("EMS") || SYSTEMID.equals("EMS01")||SYSTEMID.equals("EMS02")) {
            return userSessionClient.allocStatementEMS(IDataObject.OPTIONS_DB_TYPE_BASIC);
        }
        else if (SYSTEMID.equals("SSW01")||SYSTEMID.equals("SSW02")) {
            script = Str.cover((String) hSvcType.get("ssw")) + SYSTEMID; // (ClusterID).(SSW01), (ClusterID).(SSW02)
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            return sessionClient.allocStatement(script);
        }
        else return null ;
    }
    
    public static synchronized Statement allocStatementDirect(String SYSTEMID) {//hc-add : 180405 : EMS DB
    	String db_name = SYSTEMID.toLowerCase();
    	String host = ServerLogin.getServerLogin().lbean.getActive_host();
		Connection conn = null;
		Statement stmt = null;
		try{
			Class.forName("org.postgresql.Driver");
			conn = DriverManager.getConnection("jdbc:postgresql://"+host+":39999/"+db_name, db_name, db_name+"123" );
			stmt = conn.createStatement();
		}catch(Exception ex){
			try{
				if(stmt!=null) stmt.close();
				if(conn!=null) conn.close();
			}catch(Exception e){}
			stmt = null; conn = null;
			ex.printStackTrace();
//			throw new Exception("Direct DB Connection Err!!");
		}
		return stmt;
    }

    //###################### WinMenu 관련 #########################//

    /** 서버로부터 DataStatement 객체를 할당받는다. */
    public static synchronized IDataStatement allocStatementEMS( int options ) {
        return userSessionClient.allocStatement(options);
    }

    public static synchronized void freeStatement(IDataStatement dataStatement) {
        userSessionClient.freeStatementEMS(dataStatement);
    }
    
    public static synchronized void closeStatementDirect(Statement statement) {//hc-add : 180405 : EMS DB
    	try{
    		Connection conn = statement.getConnection();
			if(statement!=null) statement.close();
			if(conn!=null) conn.close();
		}catch(Exception e){}
    }

    //################ 1.REQUEST #############//

    /** EMS Active서버에 Request (인자없음) */
    public static String reqPacketEms(int requestCode){
        String strReturn = "false";
        Packet packet =  null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(Str.cover((String)hSvcType.get("ems")) + ".active" , (byte) requestCode);
            if (packet == null) return strReturn;
            strReturn = packet.getString();
        }catch(Exception e){}
        return strReturn;
    }

    /** EMS Active서버에 Request (인자 문자배열 String[]) */
    public static String reqPacketEms(int requestCode, String... args){
        String strReturn = "false";
        Packet packet = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(Str.cover((String)hSvcType.get("ems")) + ".active" , (byte)requestCode, args);
            if (packet == null) return strReturn;
            strReturn = packet.getString();
        }catch(Exception e){}
        return strReturn;
    }

    /** SSW Active 서버에 Request (인자없음) */
    public static String reqPacketSsw(int requestCode){
        return reqPacketSsw(selectedNode.getSelectedNode().getSystemPath() ,requestCode);
    }
    public static String reqPacketSsw(String systemPath,int requestCode ){
        String strReturn = "false";
        Packet packet =  null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(systemPath, (byte) requestCode);
            if (packet == null) return strReturn;
            strReturn = packet.getString();
        }catch(Exception e){}
        return strReturn;
    }

    /** SSW Active 서버에 Request (인자 문자배열 String[]) */
    public static String reqPacketSsw(int requestCode, String... args){
        return reqPacketSsw(selectedNode.getSelectedNode().getSystemPath() ,requestCode, args);
    }
    public static String reqPacketSsw(String systemPath, int requestCode, String... args){
        String strReturn = "false";
        Packet packet = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(systemPath, (byte)requestCode, args);
            if (packet == null) return strReturn;
            strReturn = packet.getString();
        }catch(Exception e){}
        return strReturn;
    }

    //################ 2.COMMAND #############//

    /** EMS Active 서버에 Command (인자없음) */
    public static int cmdPacketEms(int requestCode){
        int nReturn = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            nReturn = sessionClient.cmdPacket(Str.cover((String)hSvcType.get("ems")) + ".active" , (byte) requestCode);
        }catch(Exception e){}
        return nReturn;
    }

    /** EMS Active 서버에 Command (인자 문자배열 Obejct[]) */
    public static int cmdPacketEms(int requestCode, String... args){
        int nReturn = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            nReturn = sessionClient.cmdPacket(Str.cover((String)hSvcType.get("ems")) + ".active" , (byte) requestCode, args);
        }catch(Exception e){}
        return nReturn;
    }

    /** SSW Active 서버에 Command (인자없음) */
    public static int cmdPacketSsw(int requestCode){
        int nReturn = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            nReturn = sessionClient.cmdPacket(selectedNode.getSelectedNode().getSystemPath() , (byte) requestCode);
        }catch(Exception e){}
        return nReturn;
    }

    /** SSW Active 서버에 Command (인자 문자배열 String[]) */
    public static int cmdPacketSsw(int requestCode, String... args){
        int nReturn = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            nReturn = sessionClient.cmdPacket(selectedNode.getSelectedNode().getSystemPath() , (byte) requestCode, args);
        }catch(Exception e){}
        return nReturn;
    }

    /** 지정 서버에 Request (인자 문자배열 Obejct[]) (EMS01, SSW02 등)*/
    public static int reqPacket(String MachineID, int requestCode, String... args) {
        int nReturn = -1;
        Packet resType = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            resType = sessionClient.reqPacket(MachineID, (byte) requestCode, args);
        }catch(Exception e){}
        if (resType == null) {
            System.out.println("##########RES resType--[null]");
        }else{
            nReturn = 1;
            int b = resType.getCommand();
            System.out.println("##########RES command--["+b+"]");
            b = resType.getDetail();
            System.out.println("##########RES detail--["+b+"]");
        }
        return nReturn;
    }

    /** 지정 서버에 Command (인자 문자배열 Obejct[]) (EMS01, SSW02 등)*/
    public static int cmdPacket(String MachineID, int requestCode, String... args){
        int nReturn = -1;

        try {
            if(requestCode == NetworkConst.COMMAND_EMS_ACTIVATE) {
                if(args[0].equals("true")) {
                    SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
                    nReturn = sessionClient.cmdPacket(MachineID, (byte) requestCode, args);
                    return nReturn;
                }
            }
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            nReturn = sessionClient.cmdPacket(MachineID, (byte) requestCode, args);
        } catch(Exception e) {
        }

        return nReturn;
    }

    //################ 3.형식 지정 COMMAND #############//

    /** DDOS IP Table (WhiteList, DenyList) 를 업데이트 한다. */

    public static int updateDdosTable ( int reqType , String systemPath, String script) {
        int nReturn = -1;
        Packet packet = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket( systemPath,  (byte)reqType, script ) ;
            if (packet == null) return -1 ;

            //nReturn = packet.getInt();
            nReturn = 0;
        }catch(Exception e){}
        return nReturn;
    }

    /** 지정한 SSW의 Config 를 업데이트 한다. */
    public static int updateSswConfig (String MachineID, String section, String member, String value) {
    	String clusterId = selectedNode.getSelectedNode().getSystemPath();
        clusterId = clusterId.substring(0,clusterId.indexOf("."));
        return updateSswConfig(clusterId, MachineID, section, member, value);
    }
    public static int updateSswConfig (String clusterId, String MachineID, String section, String member, String value) {
        int nReturn = -1;
        Packet packet = null;
        try{
        	  if(clusterId.indexOf("(")==-1) clusterId = Str.cover(clusterId.trim());
              SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);//updateConfig
              packet = sessionClient.reqPacket(clusterId + Str.cover(MachineID),
                                                                   (byte)NetworkConst.REQUEST_UPDATE_EMS_CONFIG,
                                                                   (short)1,
                                                                   (short)0,
                                                                   section,member," "," ",value);
            if (packet == null) return -1;
            nReturn = packet.getInt();
        }catch(Exception e){}
        return nReturn;
    }

    /** 지정한 SSW의 Config 를 업데이트 한다. */
    public static int updateConfig (String path, String section, String member, String value) {
        int nReturn = -1;
        Packet packet = null;
        try{
            //packet = dataStub_active.reqPacket(Str.cover((String)hSvcType.get("ssw")) + MachineID,
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
              packet = sessionClient.reqPacket(path,
                                                                   (byte)NetworkConst.REQUEST_UPDATE_EMS_CONFIG,
                                                                   (short)1,
                                                                   (short)0,
                                                                   section,member," "," ",value);
            if (packet == null) return -1;
            nReturn = packet.getInt();
        }catch(Exception e){}
        return nReturn;
    }

    public static int refreshSswConfigSection (String MachineID, String section ) {
        int nReturn = -1;
        Packet packet = null;
        try{
              String clusterId = selectedNode.getSelectedNode().getSystemPath();
              clusterId = clusterId.substring(0,clusterId.indexOf("."));
              SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
              packet = sessionClient.reqPacket(clusterId + Str.cover(MachineID),
                                                                   (byte)NetworkConst.REQUEST_CONFIG_DETAIL,
                                                                   section);
            if (packet == null) return -1;
            nReturn = packet.getInt();
        }catch(Exception e){}
        return nReturn;
    }

    public static int refreshConfigSection (String path, String section ) {
        int nReturn = -1;
        Packet packet = null;
        try{
              String clusterId = selectedNode.getSelectedNode().getSystemPath();
              clusterId = clusterId.substring(0,clusterId.indexOf("."));
              SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
              packet = sessionClient.reqPacket(path,
                                                                   (byte)NetworkConst.REQUEST_CONFIG_DETAIL,
                                                                   section);
            if (packet == null) return -1;
            nReturn = packet.getInt();
        }catch(Exception e){}
        return nReturn;
    }

    /** 액티브 SSW의 CIC 업데이트 */
    public static int updateCicState(String[] cicParam){
        if(cicParam.length != 7) return -1;
        int nReturn = -1;
        Packet packet = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(selectedNode.getSelectedNode().getSystemPath() ,(byte)NetworkConst.REQUEST_UPDATE_CIC_STATE,WebUtil.stringToshort(cicParam[0]),WebUtil.stringToshort(cicParam[1]),WebUtil.stringToshort(cicParam[2]),WebUtil.stringToshort(cicParam[3]),WebUtil.stringToshort(cicParam[4]),WebUtil.stringToshort(cicParam[5]),cicParam[6]);
            if (packet == null) return -1;
            nReturn = packet.getInt();
            String strReturn = packet.getString();
        }catch(Exception e){}
        return nReturn;
    }

    /** 액티브 SSW의 Call Drop */
    public static int callDrop(String dropCall) {
        return callDrop(dropCall,selectedNode.getSelectedNode().getSystemPath());
    }
    public static int callDrop(String dropCall, String systemPath ) {
        if("".equals(dropCall)) return -1;
        int nReturn = -1;
        Packet packet = null;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(systemPath,(byte)NetworkConst.REQUEST_DROP_CALL,dropCall);
            if (packet == null) return -1;
            nReturn = packet.getInt();
        }catch(Exception e){}
        return nReturn;
    }

    /** 액티브 SSW의 UnRegister Endpoint */
    public static int unregisterEndpoint(String endpointid, short endpointtype, short forceType, String contactid, String path){
        // falseType ==> 0 : 진행중인 호 있으면 Deregi 실패.
        if ("".equals(endpointid))return -1;
        int nReturn = -1;
        Packet packet = null;
        try {
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(path ,(byte) NetworkConst.REQUEST_UNREGISTER_ENDPOINT, endpointid, (short)endpointtype, contactid );
            if (packet == null)return -1;
            nReturn = packet.getInt();
            //String strReturn = packet.getString();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }

    /** 액티브 SSW의 UnRegister Endpoint */
    public static int reAuthEndpoint(String endpointid, short endpointtype, short forceType, String contactid ){
        // falseType ==> 0 : 진행중인 호 있으면 Deregi 실패.
        if ("".equals(endpointid))return -1;
        int nReturn = -1;
        Packet packet = null;
        try {
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(selectedNode.getSelectedNode().getSystemPath() ,(byte) NetworkConst.REQUEST_REAUTH_ENDPOINT, endpointid, (short)endpointtype, contactid );
            if (packet == null)return -1;
            nReturn = packet.getInt();
            //String strReturn = packet.getString();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }

    /** 액티브 SSW의 audit Endpoint */
    public static int auditEndpoint(String endpointid, short endpointtype, String contactid){
        if ("".equals(endpointid))return -1;
        int nReturn = -1;
        Packet packet = null;
        try {
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(selectedNode.getSelectedNode().getSystemPath() ,(byte) NetworkConst.REQUEST_AUDIT_ENDPOINT, endpointid, (short)endpointtype, contactid);
            if (packet == null)return -1;
            nReturn = packet.getInt();
            //String strReturn = packet.getString();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }

    public static int updateEndpoint(short endpoint_class, short update_type, String endpointid, String domain_id, String path){
        int nReturn = -1;
        Packet packet = null;
        try {
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(path  ,(byte) NetworkConst.REQUEST_UPDATE_ENDPOINT, (short)endpoint_class, (short)update_type, endpointid, domain_id);
            if (packet == null)return -1;
            nReturn = packet.getInt();
            //String strReturn = packet.getString();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }

    /** 액티브 SSW의 Update Endpoint */
    public static void updateImsHssE164(DataStatement statement, String strE164 ) throws Exception {
      String queryString = "SELECT ep.endpointid, ep.RegHost FROM table_e164Route route join table_sipendpoint ep on ep.endpointid  = route.endpointid WHERE route.e164 = '" + strE164 + "' and route.routingNumberType = 1 ";
      ResultSet rs = statement.executeQuery(queryString);
      while (rs.next() ) {
          System.out.println(queryString) ;
          String endpointId = Str.CheckNullString( rs.getString(1) ) ;
          String regHost = Str.CheckNullString( rs.getString(2) ) ;
          if (regHost.length() > 0) {
              int nPacketResult = updateEndpoint((short)33,(short)2,endpointId,statement.getString(),selectedNode.getSelectedNode().getSystemPath()) ;
              System.out.println("updateImsHssE164 result ==>:"+nPacketResult+"  str endpointId ID ==>:" + endpointId ) ;
          }
        }
      rs.close() ;

//          String endpointId = "0701001000@test.acromate.com:5060" ;
//          int nPacketResult = updateEndpoint((short)33,(short)2,endpointId,statement.getString());
//          System.out.println("updateImsHssE164 result ==>:"+nPacketResult+"  str endpointId ID ==>:" + endpointId );

    }


    /** 액티브 SSW의 Module Load/Unload */
    public static int updateLoadModule( String strHwD, short load_type, String module_name, short module_version, String directory_name, String file_name, String function_name, String ex_function){
    /*
    typedef struct
    {  short				load_type ;			// load( 1 ), unload( 2 )
        char				module_name[128] ;
        char				directory_name[256] ;
        char				file_name[128] ;
        char				function_name[128] ;
    } EMSModuleHandle ; */
        int nReturn = -1;
        Packet packet = null;
        try {
            String clusterId = selectedNode.getSelectedNode().getSystemPath();
            clusterId = clusterId.substring(0,clusterId.indexOf("."));
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket(clusterId + Str.cover(strHwD), (byte) NetworkConst.REQUEST_LOAD_MODULE, (short)load_type, module_name, module_version ,directory_name, file_name, function_name, ex_function);
            if (packet == null)return -1;
            nReturn = packet.getInt();
            //String strReturn = packet.getString();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }


    /** 액티브 프로세스 관리  stop (re)start */
    public static int manageProcess(String hardwareScript, short manage_type, String process_name){
        int nReturn = -1;
        Packet packet = null;
//char				process_name[80] ;
//short				manage_type ;		/* restart( 1 ), stop( 2 ) */
        try {
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            packet = sessionClient.reqPacket( hardwareScript ,(byte) NetworkConst.REQUEST_PROCESS_MANAGE, process_name, (short)manage_type );
            if (packet == null)return -1;
            nReturn = packet.getInt();
        } catch (Exception e) { e.printStackTrace(); }
        return nReturn;
    }

    //################ 4.RESOURCE #############//


    /** RegisterClient를 실행하여 DataStub 초기화 */
    public static ArrayList getGroupList() {
        String groupid = "";
        String groupname = "";
        String groupList = "";
        ArrayList list = new ArrayList() ;
        String[] strTemp = new String[4];
        try {
            groupList = userSessionClient.getGroup();
        } catch(Exception e) {
            e.printStackTrace();
            groupList ="01,01";
        }

        StringTokenizer groups = new StringTokenizer(groupList);
        while (groups.hasMoreTokens()) {
                groupid = groups.nextToken(",");
                groupname = groups.nextToken(",");
                strTemp = new String[] { groupid, groupname };
                list.add(strTemp) ;
        }
        return list;
    }

    /** 가져올 자원, 가져올자원상세, 가져올 장비를 받아 해당 리소스를 리턴 */
    public static String getRecourceSSW(String clusterID, String detailTarget, String MachineID){
        String result = "false";
        String script = Str.cover(clusterID) + Str.cover(MachineID)+"."+ detailTarget ;

        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            result = sessionClient.getGroupScript(script);
        }catch(Exception e){
            System.out.println(e.toString());
        }
        return result;
    }

    /** 가져올 자원, 가져올자원상세, 가져올 장비를 받아 해당 리소스를 리턴 */
    public static String getObjectScript(String systemId, String param){
        String result = "";
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            result = sessionClient.getParam(systemId, param);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    /** 가져올 자원, 가져올자원상세, 가져올 장비를 받아 해당 리소스를 리턴 */
    public static String getObjectScript(String param){
        String result = "";
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            result = sessionClient.getGroupScript(param);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

// Call Method ----------------------------------------------------------------
    public static String callScriptCallMethod(String method, Object... argument) {
        String result = "";

        try{
            result = userSessionClient.callScriptCallMethod(method, argument) ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String getEmsServiceLevel() {
        String result = "";
        try{
            result = userSessionClient.callScriptCallMethod("getEmsServiceLevel") ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String getMessageTypeList(String grupID) {
        String result = "";
        try{
            result = (String) userSessionClient.callScriptCallMethod("getMessageTypeList", grupID ) ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String getMessageList(String key, String strIdx) {
        String result = "";
        try{
            result = (String) userSessionClient.callScriptCallMethod("getMessageList", key, strIdx ) ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String getEmsServerTime() {
        String result = "" ;
        try {
            result = (String) userSessionClient.callScriptCallMethod("getEmsServerTime" ) ;
        } catch(Exception e) {
            e.printStackTrace() ;
        }
        return result ;
    }

    public static String getEmsDBConnectonCount() {
        String result = "" ;
        try {
            result = (String) userSessionClient.callScriptCallMethod("getEmsDBConnectionCount" ) ;
        } catch(Exception e) {
            e.printStackTrace() ;
        }
        return result ;
    }

    public static String getEmsNetworkChannel(String sysGroupID) {
        String result = "" ;
        try {
            result = (String) userSessionClient.callScriptCallMethod("getEmsNetworkChannel" , sysGroupID) ;
        } catch(Exception e) {
            e.printStackTrace() ;
        }
        return result ;
    }

    public static String getRackList(String script) {
        String result = "";
        try{
            result = (String) userSessionClient.callScriptCallMethod("getRackList", script ) ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String getSystemObject(String systemPath, String systemObject) {
        String result = "";
        try{
            result = (String) userSessionClient.callScriptCallMethod("getSystemObject", systemPath, systemObject ) ;
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    /** 가져올 자원, 가져올자원상세, 가져올 장비를 받아 해당 리소스를 리턴 */
    public static int setObjectScript(String field, String value){
        int result = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            result = sessionClient.setGroupScript(field, value);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static int setObjectScript(String systemId, String field, String value){
        int result = -1;
        try{
            SessionClient sessionClient = sessionClientList.getSessionClient(currentSysGroupID);
            result = sessionClient.setParam(systemId, field , value);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    /** 가져올 자원, 가져올자원상세, 가져올 장비를 받아 해당 리소스를 리턴 */
    public static int setRootScript(String field, String value){
        int result = -1;
        try{
            result = userSessionClient.setRootScript(field, value);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    public static String rootCallMethod(String path, String method , Object... argument){
        String result = "";
        try{
            result = userSessionClient.callScriptCallMethod( "callMethod", path, method , argument);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }
    public static String shapeCallMethod(String path, String method , Object... argument){
        String result = "";
        try{
            result = userSessionClient.callScriptCallMethod( "shapeCallMethod", path, method , argument);
        }catch(Exception e){
            e.printStackTrace();
        }
        return result;
    }

    //패킷 핸들링(구체화되지 않음)
    public void responseHandler(IPacket iPacket) {
    }
    //Deprecated
    public static synchronized Connection getSswConnection() {
        System.out.println("Error :: getSswConnection is Deprecated");
        return null;
    }
    //Deprecated
    public static synchronized Connection getEmsConnection() {
        System.out.println("Error :: getEmsConnection is Deprecated");
        return null;
    }

}
