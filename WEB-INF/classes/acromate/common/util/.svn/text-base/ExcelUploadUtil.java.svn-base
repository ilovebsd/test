package	acromate.common.util;

/**
 * 엑셀 데이터 조회 관련 Utility Class
 */

import java.io.File; 
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;

import jxl.*;

public class ExcelUploadUtil {
 
	HashMap hmv = null;
    HashMap hmcols = null;
	int breaki = 0;
	private String[] sheetnames = null;

    /*
     * init - 파일내용을 닮기 위한 데이타 초기
     *
     */	
    private void init() throws Exception {
		try{
            hmv = new HashMap();
		    hmcols = new HashMap();
		} catch(Exception e) {
			e.printStackTrace();
            throw new Exception(e.toString());
		}
	}

    /*
     * ExcelUploadUtil - 생성자
     *
     * @param   File          조회 리스트를 생성할 Excel 파일명
     */	
	public ExcelUploadUtil(File ecfile, int selrow, int selcol) throws Exception {
        try {
			init();
			Workbook workbook = Workbook.getWorkbook(ecfile); 
		    this.sheetnames = workbook.getSheetNames();

		    for(int i=0; i<this.sheetnames.length; i++){
                Sheet sheet = workbook.getSheet(this.sheetnames[i]);
                if( selrow > 0 )
		            setColsNames( sheet , selrow);
			    hmv.put(this.sheetnames[i], getColRowValue(sheet,selrow,selcol) );
		    }
		} catch(Exception e) {
			e.printStackTrace();
            throw new Exception("ExcelUploadUtil : " + e.toString());
		}
	}

    /*
     * XlsToArrayList - Excel의 내용을 ArrayList로 반환 하는 Utility
     *
     * @param   String          조회 리스트를 생성할 Excel 파일명
     * @return  ArrayList       Excel Data ArrayList 
     */	
	public static ArrayList getExcelList(String fileName){
		
        ArrayList aryXLS = new ArrayList();
	    try {
			Workbook workbook = Workbook.getWorkbook(new File(fileName)); 
			Sheet sheet = workbook.getSheet(0);	

			int rows = sheet.getRows();    //RowCount Size..
	        int cols = sheet.getColumns(); //ColumnCount Size..
	        
  			String lenStr = "";
  			System.out.println("########### Excel Row Count : "+rows);
  			
  			for (int r = 0 ;r < rows ; r++) {	      
	            Entity  oRow = new Entity();
	            aryXLS.add(oRow);

	            for(int c=0 ;c < cols ; c++) {
	                Cell cell = sheet.getCell(c, r);
	                								                
/*
	                if (cell.getType().equals(CellType.NUMBER)) {
	                	oRow.setValue(c, cell.getContents());
	                } else if (cell.getType().equals(CellType.LABEL)) {
	                	oRow.setValue(c, cell.getContents());
	                } else if (cell.getType().equals(CellType.EMPTY)) {
	                	//oRow.setValue(c, cell.getContents());
	                } else if (cell.getType().equals(CellType.BOOLEAN)) {
	                } else if (cell.getType().equals(CellType.ERROR)) {
	                }
*/
 	                if (cell.getType().equals(CellType.NUMBER)) {
	                	oRow.setValue("col" + c, cell.getContents());
	                } else if (cell.getType().equals(CellType.LABEL)) {
	                	oRow.setValue("col" + c, cell.getContents());
					} else if (cell.getType().equals(CellType.DATE)) {
					    boolean isDate = false, isTime = false;
					    String retVal = null;
                        if (cell.getContents().indexOf("-") >= 0 || cell.getContents().indexOf("/") >= 0) isDate = true;
                        if (cell.getContents().indexOf(":") >= 0) isTime = true;

					    java.util.Date dval =  ((DateCell) cell).getDate();
                        
                        if (isDate) {
                            SimpleDateFormat formatter = new SimpleDateFormat ("yyyyMMdd");
                            retVal = formatter.format(dval);
                        } else if (isTime) {
                            retVal = cell.getContents();
                        } else {
                            retVal = cell.getContents();
                        }
                        
    					oRow.setValue("col" + c, retVal);

	                } else if (cell.getType().equals(CellType.EMPTY)) {
					} else if (cell.getType().equals(CellType.BOOLEAN)) {
	                } else if (cell.getType().equals(CellType.ERROR)) {
	                }
 	                
	            }
	        }
	    } catch(Exception e) {
			System.out.println("error:"+e.toString());
	    }
	    return aryXLS;
	}	  

    /*
     * getExcelListSheet - Excel의 특정 Sheet 내용을 ArrayList로 반환 하는 Utility
     *
     * @param   String          조회 리스트를 생성할 Excel 파일명
     * @param   int             Excel Sheet 번호
     * @return  ArrayList       Excel Data ArrayList 
     */	
	public static ArrayList getExcelListSheet(String fileName, int i){
	  	ArrayList aryXLS = new ArrayList();

	    try {
			Workbook workbook = Workbook.getWorkbook(new File(fileName)); 
			Sheet sheet = workbook.getSheet(i);	
			
			int rows = sheet.getRows();    //RowCount Size..
	        int cols = sheet.getColumns(); //ColumnCount Size..
	        
	        for (int r = 0 ;r < rows ; r++) {
	            Entity  oRow = new Entity();
	            aryXLS.add(oRow);
	            
	            for(int c=0 ;c < cols ; c++) {
	                Cell cell = sheet.getCell(c, r);
	                
	                if (cell.getType().equals(CellType.NUMBER)) {
	                	oRow.setValue("col" + c, cell.getContents());	                                     
	                } else if (cell.getType().equals(CellType.LABEL)) {
	                	oRow.setValue("col" + c, cell.getContents());
	                } else if (cell.getType().equals(CellType.EMPTY)) {
	                	oRow.setValue("col" + c, cell.getContents());
	                } else if (cell.getType().equals(CellType.BOOLEAN)) {
	                } else if (cell.getType().equals(CellType.ERROR)) { 
	                }
	            }
	        }
	    } catch(Exception e) {
			System.out.println("error:"+e.toString());	    	
	    }

		return aryXLS;
	}

    /*
     * getExcelListSheet - Excel의 특정 Sheet 내용을 ArrayList로 반환 하는 Utility
     *
     * @param   String          조회 리스트를 생성할 Excel 파일명
     * @param   int             Excel 파일내용중 필요한 sheet
     * @return  String[][]      Excel Data 다중배열 
     */		  
	public static String[][] getExcelStrsListSheet(String fileName, int i) throws Exception{
	  	String[][] oRowvalue = null;

	    try {
			Workbook workbook = Workbook.getWorkbook(new File(fileName)); 
			Sheet sheet = workbook.getSheet(i);	

			int rows = sheet.getRows();    //RowCount Size..
	        int cols = sheet.getColumns(); //ColumnCount Size..
	        oRowvalue = new String[rows][cols];

	        for (int r = 0 ;r < rows ; r++) {
	            for(int c=0 ;c < cols ; c++) {
	                Cell cell = sheet.getCell(c, r);        
	                if (cell.getType().equals(CellType.NUMBER)) {
	                	oRowvalue[r][c] = cell.getContents();                     
	                } else if (cell.getType().equals(CellType.LABEL)) {
	                	oRowvalue[r][c] = cell.getContents();
	                } else if (cell.getType().equals(CellType.EMPTY)) {
	                	oRowvalue[r][c] = cell.getContents();
	                } else if (cell.getType().equals(CellType.DATE_FORMULA)) { 
	                	oRowvalue[r][c] = cell.getContents();
	                } else if (cell.getType().equals(CellType.NUMBER_FORMULA)) {
	                	oRowvalue[r][c] = cell.getContents();
	                } else if (cell.getType().equals(CellType.STRING_FORMULA)) {
	                	oRowvalue[r][c] = cell.getContents();
	                } else if (cell.getType().equals(CellType.BOOLEAN)) {
	                } else if (cell.getType().equals(CellType.ERROR)) {
	                }
	            }
	        }
	    } catch(Exception e) {
	        e.printStackTrace();
	        throw new Exception("ExcelUploadUtil:getEHListSheet() Error = "+e.toString());
	    }

		return oRowvalue;
	}	  	  

    /*
     * setColsNames - sheet에 타이틀 제목을 hash에 저장
     *
     * @param   Sheet          대상 sheet
     */	
	public void setColsNames(Sheet sheet, int selrow) throws Exception {
        hmcols.put(sheet.getName(), getColsNames(sheet,1) );
	}

    /*
     * getColsNames - sheet에 타이틀 제목을 hash에 저장
     *
     * @param   Sheet          대상 sheet
     */	
    public String[] getColsNames(Sheet sheet, int selrow) throws Exception {
        String[] strcols = new String[sheet.getColumns()];
		Cell[] cell = sheet.getRow(selrow);
        for(int ci =0; ci<cell.length; ci++){
			if(cell[ci].getType().equals(CellType.EMPTY)){
			    breaki = ci+1;
				break;
			}
            strcols[ci] = cell[ci].getContents();
		}
		return strcols;
	}
    
    /*
     * getColsNamesValue - sheet에 타이틀 제목을 가져옮
     *
     * @param   hkey          대상 sheet 이름
     */	
    public String[] getColsNamesValue(String hkey) throws Exception {
        return (String[]) hmcols.get(hkey);
	}

    /*
     * getColRowValue - sheet에 타이틀 내용을 가져옮
     *
     * @param   Sheet          대상 sheet 이름
     * @param   rowstart       대상 시작 row
     * @return  strscolrow     sheet 내용을 닮고 있는 다중배열
     */	
    public String[][] getColRowValue( Sheet sheet , int rowstart,int selcol) throws Exception {
        String[][] strscolrow = new String[sheet.getRows()-rowstart][sheet.getColumns()-selcol];
        try{
            for(int ri = rowstart; ri < sheet.getRows(); ri++){
			
			    Cell[] cell = sheet.getRow(ri);
			    if( cell[1] == null || cell[1].equals("") )
				    continue;
	            for( int cri =selcol; cri< cell.length; cri++){
			        if(cri == breaki)
				        break;
				    if (cell[cri].getType().equals(CellType.NUMBER)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = StringUtil.replace(cell[cri].getContents(),",","");                     
	                } else if (cell[cri].getType().equals(CellType.LABEL)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = cell[cri].getContents();
	                } else if (cell[cri].getType().equals(CellType.EMPTY)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = cell[cri].getContents();
	                }else if (cell[cri].getType().equals(CellType.DATE_FORMULA)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = cell[cri].getContents();
	                }else if (cell[cri].getType().equals(CellType.NUMBER_FORMULA)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = StringUtil.replace(cell[cri].getContents(),",","");
	                }else if (cell[cri].getType().equals(CellType.STRING_FORMULA)) {
	               	    strscolrow[ri-rowstart][cri-selcol] = cell[cri].getContents();
	                } else if (cell[cri].getType().equals(CellType.BOOLEAN)) {
	                } else if (cell[cri].getType().equals(CellType.ERROR)) {
	               }
			    }
            }
		}catch(Exception e){
			e.printStackTrace();
			throw new Exception("getColRowValue : "+e.toString());
		}

		return strscolrow;
	}

    /*
     * getHashValueSheet - sheet에 타이틀 내용을 가져옮
     *
     * @param   sheetname      대상 sheet 이름
     * @return  strscolrow     sheet 내용을 닮고 있는 다중배열
     */	
    public String[][] getHashValueSheet(String sheetname) {
        return (String[][])hmv.get(sheetname);
	}

    /*
     * getSheetNamesValue - sheet이름을 가져옮
     *
     * @return  sheetnames     sheet 이름 
     */	
    public String[] getSheetNamesValue() throws Exception {
	    return this.sheetnames;
	}
}
