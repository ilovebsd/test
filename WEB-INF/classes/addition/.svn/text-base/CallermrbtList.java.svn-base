package addition;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import acromate.common.util.Str;
import acromate.common.util.StringUtil;
import com.acromate.driver.db.DataStatement;

import dto.CallermrbtDTO;

public class CallermrbtList {
	/*
	 * 리스트 조회
	 */
	public List getList(DataStatement stmt, String e164) {
		CallermrbtDTO callermrbtDTO;
        List<CallermrbtDTO> callermrbtList = new ArrayList<CallermrbtDTO>();
        
        String sql = "\n SELECT e164, callere164, filename, description, repeatno, ";
        sql = sql +  "\n        (SELECT max(name) AS name" ;
        sql = sql +  "\n           FROM table_addrbook " ;
        sql = sql +  "\n          WHERE ownerid   = e164 " ;
        sql = sql +  "\n            AND keynumber = callere164) AS callername " ;
        sql = sql +  "\n   FROM table_callermrbt " ;
        sql = sql +  "\n  WHERE e164 = '" + e164 + "' ";
        sql = sql +  "\n  ORDER BY e164, callere164 ";;        
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	callermrbtDTO = new CallermrbtDTO();
                	
                	callermrbtDTO.setE164(Str.CheckNullString(rs.getString("e164")));
                	callermrbtDTO.setCallerE164(Str.CheckNullString(rs.getString("callere164")));
                	callermrbtDTO.setFileName(Str.CheckNullString(rs.getString("filename")));
                	callermrbtDTO.setDescription(Str.CheckNullString(rs.getString("description")));
                	callermrbtDTO.setRepeatNo(rs.getInt("repeatno"));
                	callermrbtDTO.setCallerName(Str.CheckNullString(rs.getString("callername")));

                	callermrbtList.add(callermrbtDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return callermrbtList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return callermrbtList;
    }
	
	/*
	 * 존재여부 체크
	 */
	public int getCount(DataStatement stmt, String e164, String callere164) {
		int count = 0 ;
        String sql = "\n SELECT count(e164) "; 
        sql = sql +  "\n   FROM table_callermrbt ";
        sql = sql +  "\n  WHERE e164       = '" + e164       + "' ";
        sql = sql +  "\n    AND callere164 = '" + callere164 + "' ";

        ResultSet rs = null;

        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return count;
    }


}
