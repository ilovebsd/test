package business;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet ;
import java.sql.Statement;
import java.util.ArrayList ;
import java.util.List ;

import acromate.ConnectionManager;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;
import dto.ZipCodeDTO;
import webuser.ServerLogin;

public class ZipCode {
	public List getData(DataStatement stmt) {		
		ZipCodeDTO 		zipCodeDTO;
        List<ZipCodeDTO> 	zipCodeList 	= new ArrayList<ZipCodeDTO>();
        
        String sql = "Select codetitlecd, codeitemcd, codeitemdesc From TABLE_CODEITEM Where codetitlecd = '11' Order By codeitemcd";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                    zipCodeDTO = new ZipCodeDTO(
                    	Str.CheckNullString(rs.getString("codeitemcd")),
                        Str.CheckNullString(rs.getString("codeitemdesc"))
                    );

                    zipCodeList.add(zipCodeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zipCodeList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return zipCodeList;
    }
	
	public List getData() {		
		
		ResultSet rs = null ;

		ZipCodeDTO 		zipCodeDTO;
        List<ZipCodeDTO> 	zipCodeList 	= new ArrayList<ZipCodeDTO>();
        
        String sql = "Select codetitlecd, codeitemcd, codeitemdesc From TABLE_CODEITEM Where codetitlecd = '11' Order By codeitemcd";
        System.out.println("SQL문 : "+sql);
        
        Statement stmt = ConnectionManager.allocStatementDirect("EMS");
        
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                    zipCodeDTO = new ZipCodeDTO(
                    	Str.CheckNullString(rs.getString("codeitemcd")),
                        Str.CheckNullString(rs.getString("codeitemdesc"))
                    );

                    zipCodeList.add(zipCodeDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
//            return zipCodeList;
        } finally {
            if(rs != null) try{rs.close();}catch(Exception sqle){}
            if(stmt != null) ConnectionManager.closeStatementDirect(stmt);
        }
        return zipCodeList;
    }

}
