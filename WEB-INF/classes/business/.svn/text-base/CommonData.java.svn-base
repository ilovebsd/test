package business;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import acromate.common.util.Str;

import com.acromate.driver.db.DataStatement;

import dto.ZipCodeDTO;
import dto.organization.DeptListDTO;
import dto.organization.PositionDTO;
import dto.UserE164DTO;

import acromate.ConnectionManager;
	
public class CommonData {
    /**
     * 가입자 그룹
     * @param stmt      		DataStatement
     */				
	public String getGroupID(DataStatement stmt) {
		String groupID = "" ;        
		String sql = "select groupid from table_SubscriberGroup"; 
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) groupID = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return groupID;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return groupID;
    }

    /**
     * 도메인 조회
     * @param stmt      		DataStatement
     */				
	public String getDomain(DataStatement stmt) {
		String domainID = "" ;        
		String sql = "select domainid from table_domain"; 
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) domainID = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return domainID;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return domainID;
    }

    /**
     * 망관리 조회
     * @param stmt      		DataStatement
     */				
	public String getZone(DataStatement stmt) {
		String zoneCode = "" ;        
		String sql = "select zonecode from table_Zone ";
		sql = sql + " where zonename = 'WAN'";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) zoneCode = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return zoneCode;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return zoneCode;
    }

    /**
     * 번호정책 조회
     * @param stmt      		DataStatement
     */				
	public String getPrefixTableID(DataStatement stmt) {
		String prefixID = "" ;        
		String sql = "select prefixtableid from table_PrefixTableID ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) prefixID = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return prefixID;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return prefixID;
    }

    /**
     * 부서명 조회
     * @param stmt      		DataStatement
     */					
	public List getDeptList(DataStatement stmt) {		
		DeptListDTO 		deptListDTO;
        List<DeptListDTO> 	deptList 	= new ArrayList<DeptListDTO>();
        
        String sql = "Select deptid, deptname, parentid From table_dept Where deptid <> parentid order by deptid";
        
        //System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	deptListDTO = new DeptListDTO(
                		rs.getInt("deptid"),
                        Str.CheckNullString(rs.getString("deptname")),
                        rs.getInt("parentid")
                    );

                	deptList.add(deptListDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return deptList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return deptList;
    }	

    /**
     * 직급명 조회
     * @param stmt      		DataStatement
     */					
	public List getPositionList(DataStatement stmt) {		
		PositionDTO 		positionDTO;
        List<PositionDTO> 	positionList 	= new ArrayList<PositionDTO>();
        
        String sql = "Select positionid, positionname From table_position Order By ranking";
        
        //System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	positionDTO = new PositionDTO(
                		rs.getInt("positionid"),
                        Str.CheckNullString(rs.getString("positionname"))
                    );

                	positionList.add(positionDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return positionList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return positionList;
    }

    /**
     * 부서명 조회
     * @param id      			Integer
     * @param stmt      		DataStatement
     */				
	public String deptName(DataStatement stmt, String id) {
		String 		dName = "" ;        
		String[]	tempStr = id.split("[|]");
		String 		deptId		= tempStr[0];		
		
		String sql = "select deptname From table_dept Where deptid = " + deptId+";"; 
		
		//System.out.println("부서명 SQL : "+sql);
        
		ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) dName = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dName;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return dName;
    }

    /**
     * 사용자 조회
     * @param stmt      		DataStatement
     */					
	public List getUserList(DataStatement stmt) {		
		UserE164DTO 		userE164DTO;
        List<UserE164DTO> 	userE164List 	= new ArrayList<UserE164DTO>();
        
        String sql = "Select phonenum, name From table_subscriber where loginlevel = 1 Order By name";
        
        //System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	userE164DTO = new UserE164DTO(
                		Str.CheckNullString(rs.getString("phonenum")),
                        Str.CheckNullString(rs.getString("name"))
                    );

                	userE164List.add(userE164DTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return userE164List;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return userE164List;
    }
	
    /**
     * 부서대표번호 조회
     * @param id      			Integer
     * @param stmt      		DataStatement
     */				
	public Integer deptNumber(DataStatement stmt) {
		int	nCount = 0 ;        
		
		String sql = "Select count(*) ";
		sql = sql + " FROM  table_localprefix a LEFT OUTER JOIN table_KeyNumberID b  ON a.endpointid = b.KEYNUMBERID ";
		sql = sql + " Where 1 = 1 and a.prefixtype = 4 ";
		
		//System.out.println("부서명 SQL : "+sql);
        
		ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) nCount = rs.getInt(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return nCount;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return nCount;
    }

	//단말 일괄등록시 부서입력을 위한 기존 DB와의 실효성 검사 부분		by JSPark20101108
	/**
     * 부서ID 조회
     * @param name     			String
     * @param stmt      		DataStatement
     */				
	public int deptID(DataStatement stmt, String name) {
		int 	dID = 0;  
		
		String sql = "select deptID From table_dept Where deptName = '"+name+"'"; 
		
		System.out.println("부서명 SQL : "+sql);
        
		ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) dID = rs.getInt(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dID;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return dID;
    }

	/**
     * 대표번호 조회
     * @param name     			String
     * @param stmt      		DataStatement
     */				
	public int keyNumberID(DataStatement stmt) {
		int	nResult = 0;  
		
		String sql = "select count(*) From table_keynumberID"; 
		
		System.out.println("대표번호 SQL : "+sql);
        
		ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) nResult = rs.getInt(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return nResult;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return nResult;
    }
	
	/**
     * 음성안내번호 조회
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public int chkPrefixtable(DataStatement stmt, ArrayList arrE164List) {		
        int nResult = 0;
        ArrayList<String> prefixTableList = new ArrayList<String>();
        
        String sql = "Select startPrefix From table_prefixtable";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	prefixTableList.add(rs.getString("startPrefix"));
                }
                rs.close();
               
                for(int i=0; i < prefixTableList.size(); i++){
                	String strStratPrefix = (String)prefixTableList.get(i);
                	if(arrE164List.contains(strStratPrefix)){
                		nResult++;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return nResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return nResult;
    }
	
    /**
     * DDNS 버젼 조회
     * @param stmt      		DataStatement
     */				
	public String getSoftWareVersion(DataStatement stmt) {
		String returnVal = "";
		
        String sql = "Select version From table_version Where moudlename = 'ddns' ";
        //System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next())
                	returnVal = Str.CheckNullString(rs.getString(1));
                
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");                        
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return returnVal;
    }

    /**
     * 부서명 조회2
     * @param id      			Integer
     * @param stmt      		DataStatement
     */				
	public String deptName2(String id) {
		String 		dName = "" ;        
		String[]	tempStr = id.split("[|]");
		String 		deptId		= tempStr[0];		
		
		//서버로부터 DataStatement 객체를 할당
		DataStatement 	stmt 		= ConnectionManager.allocStatement("SSW");
		
		String sql = "select deptname From table_dept Where deptid = " + deptId+";"; 
		
		//System.out.println("부서명 SQL : "+sql);
        
		ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) dName = rs.getString(1); 
                rs.close();
                
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return dName;
        } finally {
            try {
                if (rs != null) rs.close();
            	//할당받은 DataStatement 객체는 반납
            	if (stmt != null ) ConnectionManager.freeStatement(stmt);
            } catch (Exception e) {}
        }
        return dName;
    }

    /**
     * DDNS URL(IP) 조회
     * @param stmt      		DataStatement
     */				
	public String getDdnsUrl(DataStatement stmt) {
		String returnVal = "";
		
        String sql = "select valueinfo from table_updateenv where envname = 'ddnsserver'";
        //System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next())
                	returnVal = Str.CheckNullString(rs.getString(1));
                
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");                        
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return returnVal;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return returnVal;
    }

	/**
     * 일괄등록 관련 table_e164 테이블에서 E164 중복체크
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public String chkE164Table(DataStatement stmt, ArrayList arrE164List) {		
		String strResult = "";
        ArrayList<String> E164TableList = new ArrayList<String>();
        
        String sql = " Select e164 From table_e164 ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	E164TableList.add(rs.getString("e164"));
                }
                rs.close();
               
                for(int i=0; i < E164TableList.size(); i++){
                	String strE164 = (String)E164TableList.get(i);
                	if(arrE164List.contains(strE164)){
                		strResult = strE164;
                		break;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return strResult;
    }

	/**
     * 일괄등록 관련 table_keynumberid 테이블에서 부서대표번호 중복체크
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public String chkKeynumberIDTable(DataStatement stmt, ArrayList arrE164List) {		
		String strResult = "";
        ArrayList<String> keynumberIDTableList = new ArrayList<String>();
        
        String sql = " Select keynumberid From table_keynumberid ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	keynumberIDTableList.add(rs.getString("keynumberid"));
                }
                rs.close();
               
                for(int i=0; i < keynumberIDTableList.size(); i++){
                	String strKeynumberID = (String)keynumberIDTableList.get(i);
                	if(arrE164List.contains(strKeynumberID)){
                		strResult = strKeynumberID;
                		break;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return strResult;
    }

	/**
     * 일괄등록 관련 table_prefixtable 테이블에서 부서대표번호 중복체크
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public String chkPrefixtable2(DataStatement stmt, ArrayList arrE164List) {		
		String strResult = "";
        ArrayList<String> prefixTableList = new ArrayList<String>();
        
        String sql = " Select startprefix From table_prefixtable ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	prefixTableList.add(rs.getString("startprefix"));
                }
                rs.close();
               
                for(int i=0; i < prefixTableList.size(); i++){
                	String strStartprefix = (String)prefixTableList.get(i);
                	if(arrE164List.contains(strStartprefix)){
                		strResult = strStartprefix;
                		break;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return strResult;
    }

	/**
     * 일괄등록 관련 table_e164 테이블에서 내선번호 중복체크
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public String chkE164Extension(DataStatement stmt, ArrayList arrExtenNumList) {		
		String strResult = "";
        ArrayList<String> e164ExtensionList = new ArrayList<String>();
        
        String sql = " Select extensionnumber From table_e164 ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	e164ExtensionList.add(rs.getString("extensionnumber"));
                }
                rs.close();
               
                for(int i=0; i < e164ExtensionList.size(); i++){
                	String strE164Extension = (String)e164ExtensionList.get(i);
                	if(arrExtenNumList.contains(strE164Extension)){
                		strResult = strE164Extension;
                		break;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return strResult;
    }

	/**
     * 일괄등록 관련 table_e164 테이블에서 내선번호 중복체크
     * @param name     			String
     * @param stmt      		DataStatement
     */		
	public String chkLocalprefixExtension(DataStatement stmt, ArrayList arrExtenNumList) {		
		String strResult = "";
        ArrayList<String> localprefixExtensionList = new ArrayList<String>();
        
        String sql = " Select startprefix From table_localprefix where prefixtype = 2 ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);               
                while (rs.next()) {
                	localprefixExtensionList.add(rs.getString("startprefix"));
                }
                rs.close();
               
                for(int i=0; i < localprefixExtensionList.size(); i++){
                	String strTemp = (String)localprefixExtensionList.get(i);
                	String strLocalprefixExtension = strTemp.substring(2, strTemp.length());
                	//System.out.println("########## SpecialNumber Check : "+strLocalprefixExtension);
                	
                	if(arrExtenNumList.contains(strLocalprefixExtension)){
                		strResult = strLocalprefixExtension;
                		break;
                	}
                }
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strResult;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return strResult;
    }

}
