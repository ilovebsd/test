package business;

import java.sql.ResultSet ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;
import com.sun.org.apache.xerces.internal.parsers.DOMParser;

import java.io.*;
import java.net.*;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

import java.io.FileInputStream;
import org.jdom.Document;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.xpath.XPath;
import org.jdom.output.XMLOutputter;
import org.jdom.Element;
import org.xml.sax.InputSource;

import business.Tcp_Ip;

import acromate.ConnectionManager;
import dto.SmsSendDTO;
import acromate.common.util.*;
import dto.SmsReceiveDTO;

public class SmsSend {
	public String sendSMS(String smsMessage, String smsStr, String smsSendNo, String smsDate, String smsSendNoCount) {
        String smsResult = "";
		try {
			StringBuilder xml= new StringBuilder();
			String xml2	= "";
			
			URL url = new URL("http://rcs.xroshot.com/catalogs/MAS/recommended/0");
			URLConnection con = url.openConnection();
			
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
			String tmp;
			
			while( (tmp = br.readLine()) != null){
				tmp+="\n";
				xml.append(tmp);
			}

			xml2	= xml.toString();
			System.out.println("############# XML2 : "+xml2);
			
			// XML 파싱
			SAXBuilder parser = new SAXBuilder();
			Document doc = parser.build(new InputSource(new StringReader(xml2)));
			
			XMLOutputter outp = new XMLOutputter();
			
			Element root = doc.getRootElement();
			List nameedChildren = root.getChildren("Resource");
			Element test = (Element)nameedChildren.get(0);
			
//			System.out.println("############### category : "+test.getChildText("Category"));
//			System.out.println("############### resourceID : "+test.getChildText("ResourceID"));
//			System.out.println("############### address : "+test.getChildText("Address"));
//			System.out.println("############### port : "+test.getChildText("Port"));
//			System.out.println("############### SMS Message2 : "+smsMessage);
			
			Tcp_Ip tcpIp = new Tcp_Ip();
			String resultValue = tcpIp.sendSMS(test.getChildText("Address"), 80, smsMessage, smsStr, smsSendNo, smsDate, smsSendNoCount);
			
			System.out.println("############### SMS 처리결과2 : "+resultValue);
			if(!"".equals(resultValue)) smsResult = resultValue;
			
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return smsResult;
        } finally {

        }
        return smsResult;
    }
	
    private static String getValueByXpath(Document doc, String path) throws JDOMException {
        XPath xPath = XPath.newInstance(path);
        return xPath.valueOf(doc);
    }
    

    public boolean smsReceiveData(String smsMessage, String smsStr, String smsSendNo, String smsDate, String smsSendNoCount, String smsSendTime){
    	boolean 		returnVal 	= false;
    	DataStatement 	statement 	= null;
    	
    	try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
	        String		strTime		= smsSendTime.substring(0, 8);

	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();

	    	
	    	String[] 	addrStr 	= StringUtil.getParser(smsStr, "");
//	    	String 		keyNumber 	= "";
//	    	List 		smsList 	= new ArrayList();

	    	if(addrStr != null){
	    		for(int i=0; i < addrStr.length; i++){
			        String[]	varTmp;
			        String		number1 = "";
			        String		number2 = "";
			        
			        varTmp 		= StringUtil.getParser(addrStr[i], "|");
		        	number1		= varTmp[0];
		        	number2		= varTmp[3];
		
		        	
			    	int maxIndex = getMaxIndex(statement, number1, strTime);	    	
			    	sql = " Insert into Table_SmsSend(SendNumber, VirtualNumber, SendIndex, SendTime, "; 
					sql = sql + " ReceiveNumber, ReserveType, ReserveTime, SendType, SmsType, Content) ";
					sql = sql + " values('" + number1 + "', '" + smsSendNo + "', "+ (maxIndex + 1) +", '" + smsSendTime + "', ";
					if("".equals(smsDate)){
						sql = sql + " '" + number2 + "', 1, '" + smsDate + "', 1, 1, '" + smsMessage + "') ";
					}else{
						sql = sql + " '" + number2 + "', 2, '" + smsDate + "', 1, 1, '" + smsMessage + "') ";
					}
					nResult = statement.executeUpdate(sql);
	    		}
	    	}
	    	
            statement.endTransaction(true);			// commit 처리
	        returnVal = true;
	        
        } catch (Exception e) {
        	statement.endTransaction(false);		// rollback 처리
            e.printStackTrace();
            returnVal = false;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return returnVal;        
    }

	public int getMaxIndex(DataStatement stmt, String e164, String strDate) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(SendIndex),0) " ;
		sql = sql +  "\n   FROM Table_SmsSend ";
		sql = sql +  "\n  WHERE SendNumber = '" + e164 + "' AND substr(SendTime, 0, 9) = '" + strDate+ "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }

	public List getSmsSendList(DataStatement stmt, String fromday, String today, String e164) {
		SmsSendDTO 			smsSendDTO;
        List<SmsSendDTO> 	smsSendDList = new ArrayList<SmsSendDTO>();
        String sql = "\n Select sendnumber, virtualnumber, sendindex, sendtime, receivenumber, reservetype, reservetime, sendtype, smstype, content ";
        sql = sql +  "\n From table_smssend ";
        sql = sql +  "\n Where substr(SendTime, 0, 9) >= '"+fromday+"' And substr(SendTime, 0, 9) <= '"+today+"' And sendnumber = '"+e164+"' ";
        sql = sql +  "\n Order by sendtime desc ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                //System.out.println("발신제한 : "+sql);
                while (rs.next()) {
                	smsSendDTO = new SmsSendDTO();
                	smsSendDTO.setSendnumber(Str.CheckNullString(rs.getString("sendnumber")));
                	smsSendDTO.setVirtualnumber(Str.CheckNullString(rs.getString("virtualnumber")));
                	smsSendDTO.setSendindex(rs.getInt("sendindex"));
                	smsSendDTO.setSendtime(Str.CheckNullString(rs.getString("sendtime")));
                	smsSendDTO.setReceivenumber(Str.CheckNullString(rs.getString("receivenumber")));
                	smsSendDTO.setReservetype(rs.getInt("reservetype"));
                	smsSendDTO.setReservetime(Str.CheckNullString(rs.getString("reservetime")));
                	smsSendDTO.setSendtype(rs.getInt("sendtype"));
                	smsSendDTO.setSmstype(rs.getInt("smstype"));
                	smsSendDTO.setContent(Str.CheckNullString(rs.getString("content")));
                	
                	smsSendDList.add(smsSendDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return smsSendDList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return smsSendDList;
    }

	public List getSmsSeceiveList(DataStatement stmt, String fromday, String today, String e164) {
		SmsReceiveDTO 			smsReceiveDTO;
        List<SmsReceiveDTO> 	smsReceiveList = new ArrayList<SmsReceiveDTO>();
        String sql = "\n Select receivenumber, receivetime, sendnumber, state, content, contenttype ";
        sql = sql +  "\n From table_smsreceive ";
        sql = sql +  "\n Where substr(receivetime, 0, 9) >= '"+fromday+"' And substr(receivetime, 0, 9) <= '"+today+"' And receivenumber = '"+e164+"' ";
        sql = sql +  "\n Order by receivetime desc ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                //System.out.println("발신제한 : "+sql);
                while (rs.next()) {
                	smsReceiveDTO = new SmsReceiveDTO();
                	smsReceiveDTO.setReceivenumber(Str.CheckNullString(rs.getString("receivenumber")));
                	smsReceiveDTO.setReceiveTime(Str.CheckNullString(rs.getString("receivetime")));
                	smsReceiveDTO.setSendnumber(Str.CheckNullString(rs.getString("sendnumber")));
                	smsReceiveDTO.setState(rs.getInt("state"));
                	smsReceiveDTO.setContenttype(rs.getInt("contenttype"));
                	smsReceiveDTO.setContent(Str.CheckNullString(rs.getString("content")));
                	
                	smsReceiveList.add(smsReceiveDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return smsReceiveList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return smsReceiveList;
    }

}
