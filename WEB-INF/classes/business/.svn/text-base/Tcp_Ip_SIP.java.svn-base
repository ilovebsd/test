package business;

import java.io.*;
import java.net.*;
import java.util.List;
import java.util.Calendar;
import java.text.SimpleDateFormat;

import business.Base64Coder;

import acromate.common.util.*;

import java.sql.ResultSet ;
import acromate.common.util.Str ;
import acromate.ConnectionManager;
import com.acromate.driver.db.DataStatement ;
import com.sun.org.apache.xerces.internal.parsers.DOMParser;

import java.util.List;
import java.util.ArrayList;

public class Tcp_Ip_SIP {
	public String sendSmsSIP(String ipStr, int portStr, String smsMessage, String smsStr, String smsSendNo, String smsDate, String smsSendNoCount, String smsMessageSize, String smsMessage2) {
        OutputStream 		os 			= null;
        OutputStreamWriter 	toServer 	= null;
        //BufferedReader 		fromServer 	= null;
        DataStatement 		statement 	= null;
        DataStatement 		statement2 	= null;
        
        String resultStr 		= "";
        String packetId			= "";			// 패킷ID
        String sendNumber 		= "";			// SMS 전송번호
        String virtualNumber 	= "";			// SMS 전송시 보이는 번호
        String sendTime			= "";			// SMS 전송 요청시간
        String sendIndex 		= "";			// SendNumber SMS 전송 Index
        String reserveType 		= "";			// SMS 전송유형 (1: 즉시전송,  2: 예약전송)
        String reserveTime 		= "";			// SMS 전송 예약시간
        String receiveNumber 	= "";			// SMS 수신번호
        String contentSize 		= "";			// SMS 메세지 사이즈
        String content 			= "";			// SMS 메세지 (인코딩한 데이타)
        String totalSize 		= "";			// 전문 총 사이즈
        
        String sndBuff			= "";
        String rcvBuff			= "";
        String receiveTemp		= "";
        String strTime			= "";
        
        int	   smsCnt			= Integer.parseInt(smsSendNoCount);
        int    maxIndex			= 0;
        
		try {
    		String		sql 		= "";
	    	ResultSet 	rs 			= null;
	    	int       	nResult     = 0;
			String 		buf 		= "";
			char 		ch 			= 0x00;
	    	
	    	// 서버로부터 DataStatement 객체를 할당
	    	statement 	= ConnectionManager.allocStatement("SSW");
	    	statement.stxTransaction();
	    	
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
			
			if(smsCnt == 1){
		        // 단건 SMS
				String[]		varTmp;
		        varTmp 			= StringUtil.getParser(smsStr, "|");
		        sendNumber		= changeNull(varTmp[0], 15);				// SMS 전송번호 (e164)
		        receiveNumber	= changeNull(varTmp[3], 15);				// SMS 수신번호
	        
				packetId 		= "SMS100";								// 패킷ID
			}else{
				// 동보 SMS
				String[] 	addrStr 	= StringUtil.getParser(smsStr, "");
				for(int i=0; i < addrStr.length; i++){
			        String[]	varTmp;
			        String		number1 = "";
			        String		number2 = "";
			        
			        varTmp 		= StringUtil.getParser(addrStr[i], "|");
		        	number1		= varTmp[0];
		        	number2		= varTmp[3];
		        	
		        	sendNumber		= changeNull(number1, 15);				// SMS 전송번호 (e164)
		        	receiveTemp 	= changeNull(number2, 15);				// SMS 수신번호
		        	receiveNumber 	= receiveNumber + receiveTemp;
				}
				packetId 		= "SMS200";								// 패킷ID
			}
			totalSize 		= "0000";									// 전문 총 사이즈
			//totalSize 		= changeNull(totalSize, 4);				// 전문 총 사이즈
			
			virtualNumber 	= changeNull(smsSendNo, 15);				// SMS 전송시 보이는 번호
			sendTime 		= dateFormat.format(calendar.getTime());	// SMS 전송 요청시간
			
			strTime			= sendTime.substring(0, 8);
			
			maxIndex 		= getMaxIndex(statement, sendNumber.trim(), strTime);
			//sendIndex		= "100";									// SendNumber SMS 전송 Index
			sendIndex		= changeNull(Integer.toString(maxIndex+1),3);	// SendNumber SMS 전송 Index
			
			if("".equals(smsDate)){
				reserveType 	= "1";									// SMS 전송유형 (일반)
			}else{
				reserveType 	= "2";									// SMS 전송유형 (예약)
			}
			reserveTime 	= changeNull(smsDate, 12);					// SMS 전송 예약시간
			
			contentSize		= changeNull(smsMessageSize, 3);			// SMS 메세지 사이즈
			content			= smsMessage;								// SMS 메세지

			if(smsCnt == 1){
				// 단건 SMS
		    	sql = " Insert into Table_SmsSend(SendNumber, VirtualNumber, SendIndex, SendTime, "; 
				sql = sql + " ReceiveNumber, ReserveType, ReserveTime, SendType, SmsType, Content) ";
				sql = sql + " values('" + sendNumber.trim() + "', '" + smsSendNo + "', "+ (maxIndex + 1) +", '" + sendTime + "', ";
				if("".equals(smsDate)){
					sql = sql + " '" + receiveNumber.trim() + "', 1, '" + smsDate + "', 0, 2, '" + smsMessage2 + "') ";
				}else{
					sql = sql + " '" + receiveNumber.trim() + "', 2, '" + smsDate + "', 0, 2, '" + smsMessage2 + "') ";
				}
				nResult = statement.executeUpdate(sql);
				
				statement.endTransaction(true);			// commit 처리
				
				sndBuff = packetId+totalSize+sendNumber+virtualNumber+sendTime+sendIndex+reserveType+reserveTime+receiveNumber+contentSize+content+ch;
			}else{
				// 동보 SMS
				smsSendNoCount = changeNull(smsSendNoCount, 3);			// SMS 전송 번호 갯수
				
				String[] 	addrStr 	= StringUtil.getParser(smsStr, "");
				for(int i=0; i < addrStr.length; i++){
			        String[]	varTmp;
			        String		number1 = "";
			        String		number2 = "";
			        
			        varTmp 		= StringUtil.getParser(addrStr[i], "|");
		        	number1		= varTmp[0];
		        	number2		= varTmp[3];
		        	
		        	sendNumber		= changeNull(number1, 15);				// SMS 전송번호 (e164)
		        	receiveTemp 	= changeNull(number2, 15);				// SMS 수신번호
				
			    	sql = " Insert into Table_SmsSend(SendNumber, VirtualNumber, SendIndex, SendTime, "; 
					sql = sql + " ReceiveNumber, ReserveType, ReserveTime, SendType, SmsType, Content) ";
					sql = sql + " values('" + sendNumber.trim() + "', '" + smsSendNo + "', "+ (maxIndex + 1) +", '" + sendTime + "', ";
					if("".equals(smsDate)){
						sql = sql + " '" + receiveTemp.trim() + "', 1, '" + smsDate + "', 0, 2, '" + smsMessage2 + "') ";
					}else{
						sql = sql + " '" + receiveTemp.trim() + "', 2, '" + smsDate + "', 0, 2, '" + smsMessage2 + "') ";
					}
					nResult = statement.executeUpdate(sql);
				}
				
				statement.endTransaction(true);			// commit 처리
				
				sndBuff = packetId+totalSize+sendNumber+virtualNumber+sendTime+sendIndex+reserveType+reserveTime+smsSendNoCount+receiveNumber+contentSize+content+ch;
			}
			System.out.println("############# TCP-IP SendData 1 : "+sndBuff);
			
			// 소켓 클래스 객체를 생성, 생성시 해당 서버와 접속을 시도함.
			Socket 		socket 	= new Socket(ipStr, portStr);
//			socket.setSoTimeout(5000);
			InputStream is		= socket.getInputStream();
			
			socket.setSoTimeout(5000);
			
			// 소켓에 스트림을 연결하고, 스트림을 보낼 Writer를 만듬.
			os = socket.getOutputStream();
			toServer = new OutputStreamWriter(os);
			
			//데이터 송신(MCS Time)
 			toServer.write(sndBuff,0,sndBuff.length());
			toServer.flush();
			
			
			//데이터 수신(MCS Time)
            int c = 0;
            while((c = is.read()) != 0) {             			// InputStream으로 읽기
            	char ch2 = (char)c;
            	Character cr = new Character(ch2);
            	String str = cr.toString();
            	
            	//System.out.println("############# Tcp_ip Result 01 : "+str);
            	
            	rcvBuff = rcvBuff + str;
            }
            System.out.println("############# Tcp_ip Result 02 : "+rcvBuff);
			
			is.close();
			
			//fromServer.close();
			toServer.close();
			os.close();
			socket.close();
			
			//statement.endTransaction(true);			// commit 처리
			
			System.out.println("############# rcvBuff.substring(10, 11) : "+rcvBuff.substring(10, 11));
			if("0".equals(rcvBuff.substring(10, 11))){
				resultStr = "ok";
			}else{
				resultStr = "no";
			}
			
        } catch (Exception e) {
            System.out.println("############## err : "+e.getMessage());
            
            try{
	            // 서버로부터 DataStatement 객체를 할당
	            statement2 	= ConnectionManager.allocStatement("SSW");
	            statement2.stxTransaction();
	
	            String sql2 = "";
	            int nResult2     = 0;
	            
	            sql2 = " Update Table_SmsSend  Set SendType = 2 Where SendNumber = '" + sendNumber.trim() + "' And SendIndex = "+ (maxIndex + 1) +" And SendTime = '" + sendTime + "' ";
	            nResult2 = statement2.executeUpdate(sql2);
	            System.out.println("############## sql2 : "+sql2);
	            
	            statement2.endTransaction(true);			// commit 처리
	            
            }catch(Exception e2){
            	System.out.println("############## err2 : "+e2);
            }finally{
                //할당받은 DataStatement 객체는 반납
                if (statement2 != null ) ConnectionManager.freeStatement(statement2);            	
            }
            
            resultStr = "no";
            return resultStr;
        } finally {
            //할당받은 DataStatement 객체는 반납
            if (statement != null ) ConnectionManager.freeStatement(statement);
        }
        
        return resultStr;
    }
	
	public int getMaxIndex(DataStatement stmt, String e164, String strDate) {
		int max = 0 ;
		String sql = "\n SELECT coalesce(max(SendIndex),0) " ;
		sql = sql +  "\n   FROM Table_SmsSend ";
		sql = sql +  "\n  WHERE SendNumber = '" + e164 + "' AND substr(SendTime, 0, 9) = '" + strDate+ "' ";
        ResultSet rs1 = null;
        try {
            if (stmt != null) {
            	rs1 = stmt.executeQuery(sql);
                if (rs1.next()) max = rs1.getInt(1); 
                rs1.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return max;
        } finally {
            try {
                if (rs1 != null)
                	rs1.close();
            } catch (Exception e) {}
        }
        return max;
    }
	
	/**
	* 지정 싸이즈만큼 Null 채우기 
	*/		
	public String changeNull(String str, int len) {		
        String 	returnStr 	= str;
        char 	ch 			= 0x00;
        
        for(int i=str.length(); i<len; i++){
        	returnStr = returnStr + ch;
        }
        
        return returnStr;
    }
}
