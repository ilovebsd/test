package business;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import acromate.common.util.Str;
import acromate.common.util.StringUtil;
import com.acromate.driver.db.DataStatement;
import dto.AddrBookGroupDTO;

public class AddrBookGroupList {
	public List getList(DataStatement stmt, String ownerid, String common, String gubun, String str) {
		AddrBookGroupDTO addrBookGroupDTO;
        List<AddrBookGroupDTO> addrBookGroupList = new ArrayList<AddrBookGroupDTO>();
        
        String sql = "\n Select A.ownerid as ownerid, A.groupid as groupid, A.name as name, ";
        sql = sql +  "\n        (Select count(*) "; 
        sql = sql +  "\n           From table_addrbook "; 
        sql = sql +  "\n          Where ownerid = A.ownerid "; 
        sql = sql +  "\n            And groupid = A.groupid "; 
        if(!"".equals(str.trim())){
        	if("1".equals(gubun)){
        		sql += "\n            And name LIKE '%" + str + "%'";
        	}else if("2".equals(gubun)){
        		sql += "\n            And keynumber LIKE '%" + str + "%'";
        	}else if("3".equals(gubun)){
        		sql += "\n            And company LIKE '%" + str + "%'";
        	}else if("4".equals(gubun)){
        		sql += "\n            And department LIKE '%" + str + "%'";
        	}else if("5".equals(gubun)){
        		sql += "\n            And memo LIKE '%" + str + "%'";
        	}else if("6".equals(gubun)){
        		sql += "\n            And introduction LIKE '%" + str + "%'";
        	}
        }
        sql = sql +  "\n        ) as sumCnt "; 
        sql = sql +  "\n   From table_addrbookgroup A ";
        sql = sql +  "\n   LEFT OUTER JOIN table_addrbook B ";
        sql = sql +  "\n                ON (A.ownerid = B.ownerid ";
        sql = sql +  "\n                And A.groupid = B.groupid) ";
        sql = sql +  "\n  Where A.common  = " + common;
        if(!"2".equals(common)){
        	sql +=   "\n    And A.ownerid = '" + ownerid + "'";
        }
/*
        if(!"".equals(str.trim())){
        	if("1".equals(gubun)){
        		sql += "\n    And B.name LIKE '%" + str + "%'";
        	}else if("2".equals(gubun)){
        		sql += "\n    And B.keynumber LIKE '%" + str + "%'";
        	}else if("3".equals(gubun)){
        		sql += "\n    And B.company LIKE '%" + str + "%'";
        	}else if("4".equals(gubun)){
        		sql += "\n    And B.department LIKE '%" + str + "%'";
        	}else if("5".equals(gubun)){
        		sql += "\n    And B.memo LIKE '%" + str + "%'";
        	}else if("6".equals(gubun)){
        		sql += "\n    And B.introduction LIKE '%" + str + "%'";
        	}
        }
*/        
        sql = sql +  "\n  Group By A.ownerid, A.groupid, A.name ";
        sql = sql +  "\n  Order By A.ownerid, A.name ";
        System.out.println("sql==="+sql);        

        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	addrBookGroupDTO = new AddrBookGroupDTO();
                	
                	addrBookGroupDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
                	addrBookGroupDTO.setGroupID(rs.getInt("groupid"));
                	addrBookGroupDTO.setName(Str.CheckNullString(rs.getString("name")));
                	addrBookGroupDTO.setSumCnt(rs.getInt("sumCnt"));
                	addrBookGroupList.add(addrBookGroupDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return addrBookGroupList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return addrBookGroupList;
    }

	public int getCount(DataStatement stmt, String ownerid, String common, String gubun, String str) {
		int count = 0 ;
        String sql = "\n Select count(B.ownerid) "; 
        sql = sql +  "\n   From table_addrbookgroup A ";
        sql = sql +  "\n   LEFT OUTER JOIN table_addrbook B ";
        sql = sql +  "\n                ON (A.ownerid = B.ownerid ";
        sql = sql +  "\n                And A.groupid = B.groupid) ";
        sql = sql +  "\n  Where A.common  = " + common;
        if(!"2".equals(common)){
        	sql +=   "\n    And A.ownerid = '" + ownerid + "'";
        }
/*
        if(!"".equals(str.trim())){
        	if("1".equals(gubun)){
        		sql += "\n    And A.name LIKE '%" + str + "%'";
        	}else if("2".equals(gubun)){
        		sql += "\n    And A.keynumber LIKE '%" + str + "%'";
        	}else if("3".equals(gubun)){
        		sql += "\n    And A.company LIKE '%" + str + "%'";
        	}else if("4".equals(gubun)){
        		sql += "\n    And A.department LIKE '%" + str + "%'";
        	}else if("5".equals(gubun)){
        		sql += "\n    And A.memo LIKE '%" + str + "%'";
        	}else if("6".equals(gubun)){
        		sql += "\n    And A.introduction LIKE '%" + str + "%'";
        	}
        }
*/
        System.out.println("sql==="+sql);        
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return count;
    }

	public List getGroupList(DataStatement stmt, String ownerid, String common) {
		AddrBookGroupDTO addrBookGroupDTO;
        List<AddrBookGroupDTO> addrBookGroupList = new ArrayList<AddrBookGroupDTO>();
        
        String sql = "\n Select A.ownerid, A.groupid, A.name, A.memo";
        sql = sql +  "\n       ,(Select count(*) "; 
        sql = sql +  "\n           From table_addrbook "; 
        sql = sql +  "\n          Where ownerid = A.ownerid "; 
        sql = sql +  "\n            And groupid = A.groupid) as sumCnt "; 
        sql = sql +  "\n   From table_addrbookgroup A ";
        sql = sql +  "\n  Where A.common = " + common;
        if(!"2".equals(common)){
        	sql +=   "\n    And A.ownerid = '" + ownerid + "'";
        }
        sql = sql +  "\n  Order By A.ownerid, A.groupid ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	addrBookGroupDTO = new AddrBookGroupDTO(
                        //OwnerID,
                		Str.CheckNullString(rs.getString("ownerid")),
                        rs.getInt("groupid"),
                        Str.CheckNullString(rs.getString("name")),
                        Str.CheckNullString(rs.getString("memo")),
                        rs.getInt("sumCnt")
                    );
                	addrBookGroupList.add(addrBookGroupDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return addrBookGroupList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return addrBookGroupList;
    }	

	public int getGroupCount(DataStatement stmt) {
		int count = 0 ;
        String sql = "Select count(A.ownerid) From table_addrbookgroup A "; 
        //sql = sql + " Left Outer Join From table_addrbook B On A.ownerid = B.ownerid And A.groupid = B.groupid ";
//		sql = sql + " Where B.공유체크필드 = 1 ";
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return count;
    }
	
	public List getDetail(DataStatement stmt, String OwnerID, String GroupID) {
		AddrBookGroupDTO addrBookGroupDTO;
        List<AddrBookGroupDTO> addrBookGroupList = new ArrayList<AddrBookGroupDTO>();
        
        String sql = "\n Select groupid, name, memo ";
        sql = sql +  "\n   From table_addrbookgroup ";
        sql = sql +  "\n  Where OwnerID = '" + OwnerID + "'";
        sql = sql +  "\n    And GroupID = "  + GroupID;
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	addrBookGroupDTO = new AddrBookGroupDTO(
                        rs.getInt("groupid"),
                        Str.CheckNullString(rs.getString("name")),
                        Str.CheckNullString(rs.getString("memo"))
                    );
                	addrBookGroupList.add(addrBookGroupDTO);
                }
                rs.close();
            } else           
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return addrBookGroupList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return addrBookGroupList;
    }
	
	public int smsSetUpChk(DataStatement stmt) {
		int count = 0 ;
        String sql = "\n Select count(*) From table_routeservice Where serviceno  = 6051 "; 
        System.out.println("sql==="+sql);        
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) count = rs.getInt(1); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return count;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return count;
    }

	public String e_MailChk(DataStatement stmt, String userID) {
		String strMail = "" ;
        String sql = " Select mailaddress From table_subscriber Where id  = '"+userID+"' "; 
        System.out.println("sql==="+sql);        
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) strMail = rs.getString("mailaddress"); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return strMail;
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (Exception e) {}
        }
        return strMail;
    }

}
