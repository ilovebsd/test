package business;

import java.sql.ResultSet ;
import java.util.ArrayList ;
import java.util.List ;
import acromate.common.util.Str ;
import com.acromate.driver.db.DataStatement ;
import dto.AddrBookDTO ;

/**
 * 공유그룹 상세정보 검색하는 부분
 * @param stmt      	DB Object
 * @param OwnerID   	공유그룹 OwnerID
 * @param GroupID   	공유그룹 GroupID
 * @param AddrID   	공유그룹 AddrID
 */			
public class AddrBookDetail {
	public List getData(DataStatement stmt, String OwnerID, String GroupID, String AddrID, String UserID) {
	    AddrBookDTO addrBookDTO;
        List<AddrBookDTO> addrBookList = new ArrayList<AddrBookDTO>();
        
        System.out.println("받은 로그인 사용자 ID : "+OwnerID);
        
        String sql = "\n SELECT b.OwnerID, b.GroupID, b.AddrID, b.IdType, b.Name, b.IDX , b.PhoneNum, b.Mobile, b.Position, b.department, b.Address, ";
        sql = sql  + "\n        b.Memo, b.UseMobileACF, b.UsePhoneACF, b.Mailaddress, b.Company, b.Companynumber, b.Companyaddress, ";
        sql = sql  + "\n        b.Homepage, b.Introduction, b.Fax, b.Birthday, b.CreateDate, b.EditDate, b.keynumber, b.common, ";
        sql = sql  + "\n        b.shareddate, b.sharedgroupid, b.sharedownerid, b.sharedaddrid, ";
        sql = sql  + "\n        (SELECT d.name ";
        sql = sql  + "\n           FROM table_addrbook d ";
        sql = sql  + "\n          WHERE d.ownerid = b.sharedownerid ";
        sql = sql  + "\n            AND d.groupid = b.sharedgroupid ";
        sql = sql  + "\n            AND d.addrid = b.sharedaddrid) AS sharedgroupname, ";
//        sql = sql  + "\n        (select name from table_subscriber where id = '" + UserID + "') as publicName ";		
//    	sql = sql  + "\n        (SELECT name FROM table_subscriber WHERE phonenum = b.ownerid) as publicName ";
        sql = sql  + "\n        (SELECT name ";
        sql = sql  + "\n           FROM table_subscriber ";
        sql = sql  + "\n          WHERE phonenum = (SELECT c.ownerid ";
        sql = sql  + "\n                              FROM table_addrbook c ";
        sql = sql  + "\n                             WHERE c.sharedownerid = b.ownerid ";
        sql = sql  + "\n                               AND c.sharedgroupid = b.groupid ";
        sql = sql  + "\n                               AND c.sharedaddrid  = b.addrid ";
        sql = sql  + "\n                            )) AS publicName ";
		sql = sql  + "\n   FROM table_AddrBook b ";
		sql = sql  + "\n  WHERE b.OwnerID = '" + OwnerID + "' ";
		sql = sql  + "\n    And b.GroupID = " + GroupID;
		sql = sql  + "\n    And b.AddrID  = " + AddrID;
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	addrBookDTO = new AddrBookDTO();
                	addrBookDTO.setOwnerID(Str.CheckNullString(rs.getString("OwnerID")));
                	addrBookDTO.setGroupID(rs.getInt("GroupID"));
                	addrBookDTO.setAddrID(rs.getInt("AddrID"));
                	addrBookDTO.setIdType(rs.getInt("IdType"));
                	addrBookDTO.setName(Str.CheckNullString(rs.getString("Name")));
                	addrBookDTO.setIdx(rs.getInt("IDX"));
                	addrBookDTO.setPhoneNum(Str.CheckNullString(rs.getString("PhoneNum")));
                	addrBookDTO.setMobile(Str.CheckNullString(rs.getString("Mobile")));
                	addrBookDTO.setPosition(Str.CheckNullString(rs.getString("Position")));
                	addrBookDTO.setDepartment(Str.CheckNullString(rs.getString("department")));
                	addrBookDTO.setAddress(Str.CheckNullString(rs.getString("Address")));
                	addrBookDTO.setMemo(Str.CheckNullString(rs.getString("Memo")));
                	addrBookDTO.setUseMobileACF(rs.getInt("UseMobileACF"));
                	addrBookDTO.setUsePhoneACF(rs.getInt("UsePhoneACF"));
                	addrBookDTO.setMailAddress(Str.CheckNullString(rs.getString("Mailaddress")));
                	addrBookDTO.setCompany(Str.CheckNullString(rs.getString("Company")));
                	addrBookDTO.setCompanyNumber(Str.CheckNullString(rs.getString("Companynumber")));
                	addrBookDTO.setFax(Str.CheckNullString(rs.getString("Fax")));
                	addrBookDTO.setCompanyAddress(Str.CheckNullString(rs.getString("Companyaddress")));
                	addrBookDTO.setHomePage(Str.CheckNullString(rs.getString("Homepage")));
                	addrBookDTO.setIntroduction(Str.CheckNullString(rs.getString("Introduction")));
                	addrBookDTO.setBirthday(Str.CheckNullString(rs.getString("Birthday")));
                	addrBookDTO.setCreateDate(Str.CheckNullString(rs.getString("CreateDate")));
                	addrBookDTO.setEditDate(Str.CheckNullString(rs.getString("EditDate")));
                	addrBookDTO.setKeyNumber(Str.CheckNullString(rs.getString("keynumber")));            	
                	addrBookDTO.setCommon(rs.getInt("common")); // 공유폴더유무
                	addrBookDTO.setSharedDate(Str.CheckNullString(rs.getString("shareddate")));
                	addrBookDTO.setSharedGroupID(rs.getInt("sharedgroupid"));
                	addrBookDTO.setSharedGroupName(Str.CheckNullString(rs.getString("sharedgroupname")));
                	addrBookDTO.setSharedOwnerID(Str.CheckNullString(rs.getString("sharedownerid")));
                	addrBookDTO.setSharedAddrID(rs.getInt("sharedaddrid"));
                	addrBookDTO.setPublicName(Str.CheckNullString(rs.getString("publicName")));

                    addrBookList.add(addrBookDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return addrBookList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return addrBookList;
    }
	
    /**
     * 개인그룹 전화번호부와 중복되는 공유그룹 전화번호부 체크
     * @param stmt      	DB Object
     * @param keynumber   	공유그룹 keynumber
     */
	public List getExistData(DataStatement stmt, String keynumber) {
	    AddrBookDTO addrBookDTO;
        List<AddrBookDTO> addrBookList = new ArrayList<AddrBookDTO>();
                
		String sql = "\n SELECT ownerid, groupid, addrid ";
		sql = sql +  "\n   FROM table_addrBook ";
		sql = sql +  "\n  WHERE common = 2 ";
		sql = sql +  "\n    AND keynumber = '" + keynumber + "' ";
        
        System.out.println("SQL문 : "+sql);
        
        ResultSet rs = null;
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                while (rs.next()) {
                	addrBookDTO = new AddrBookDTO();
                	addrBookDTO.setOwnerID(Str.CheckNullString(rs.getString("ownerid")));
                	addrBookDTO.setGroupID(rs.getInt("groupid"));
                	addrBookDTO.setAddrID(rs.getInt("addrid"));

                    addrBookList.add(addrBookDTO);
                }
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return addrBookList;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return addrBookList;
    }

    /**
     * 공유그룹명을 검색하는 부분
     * @param stmt      	DB Object
     * @param OwnerID   	공유그룹 OwnerID
     * @param GroupID   	공유그룹 GroupID
     */			
	public String getGroupNamr(DataStatement stmt, String OwnerID, String GroupID) {
		String 		gName 	= "" ;
		ResultSet 	rs 		= null;
		
		String 	sql = "SELECT name FROM table_AddrBookGroup ";		
		sql = sql + " WHERE OwnerID = '" + OwnerID + "' And GroupID = " + Integer.parseInt((String)GroupID) + " ";        
		        
        try {
            if (stmt != null) {
                rs = stmt.executeQuery(sql);
                if (rs.next()) gName = Str.CheckNullString(rs.getString("name")); 
                rs.close();
            } else            
                System.out.println("데이터베이스에 연결할 수 없습니다.");            
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return gName;
        } finally {
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {}
        }
        return gName;
    }	
}
