package business;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.net.MalformedURLException;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.input.SAXBuilder;
import org.jdom.Element;

import org.xml.sax.InputSource;

import dto.AddrBookNabDTO;
	
public class NabWebServiceCall {
	
	boolean nodeChk 	= false;
	String 	strAuth		= "";
	String 	addrCode	= "";
	
	AddrBookNabDTO 			addrBookNabDTO 	= new AddrBookNabDTO();
	List<AddrBookNabDTO> 	addrBookNabList = new ArrayList<AddrBookNabDTO>();
	List addrNABList;
	
	public List callWebService(String wsdlURL, String nabId, String nabPass)
	{
		byte[]			data1, 	data2, 	data3;
		URL				toURL1, toURL2, toURL3;
		URLConnection	conn1, 	conn2, 	conn3;

		StringBuffer rtvalue1	= new StringBuffer();
		StringBuffer sb1		= new StringBuffer();

		StringBuffer rtvalue2	= new StringBuffer();
		StringBuffer sb2		= new StringBuffer();

		StringBuffer rtvalue3	= new StringBuffer();
		StringBuffer sb3		= new StringBuffer();

		String	strSendTemp = "";
		String	strSendData = "";
		
		// 전달할 데이타 Charset에 따라 Encoding 변환
		try{
			strSendTemp = "<?xml version=^1.0^ encoding=^UTF-8^?>\n<soap:Envelope xmlns:soap=^http://www.w3.org/2003/05/soap-envelope^>\n";
			strSendTemp = strSendTemp + "<soap:Header>\n";
			strSendTemp = strSendTemp + "<context xmlns=^urn:zimbra^/>\n";
			strSendTemp = strSendTemp + "</soap:Header>\n";
			strSendTemp = strSendTemp + "<soap:Body><AuthRequest xmlns=^urn:zimbraAccount^>\n";
			//strSendTemp = strSendTemp + "<account by=^name^>tele_test</account>\n";
			//strSendTemp = strSendTemp + "<password>test</password>\n";
			strSendTemp = strSendTemp + "<account by=^name^>"+nabId+"</account>\n";
			strSendTemp = strSendTemp + "<password>"+nabPass+"</password>\n";
			strSendTemp = strSendTemp + "</AuthRequest>\n";
			strSendTemp = strSendTemp + "</soap:Body>\n";
			strSendTemp = strSendTemp + "</soap:Envelope>\n";
			strSendData	= strSendTemp.replace('^', '"');			
			System.out.println("SOAP 인증 전송 : "+strSendData);
			sb1.append(strSendData);

			data1 	= sb1.toString().getBytes("utf-8");
			toURL1 	= new URL(wsdlURL);
			conn1 	= toURL1.openConnection();

			// http input/output 설정
			conn1.setDoInput(true);
			conn1.setDoOutput(true);		// POST=true

			// HTTP 전송을 위한 Stream 생성
			conn1.setRequestProperty("Content-Type", "text/xml");
			conn1.setRequestProperty("Content-Length", ""+data1.length);
			conn1.setRequestProperty("SOAPAction", "SOAPAction");
			
			// HTTP 전송을 위한 Stream 생성
			OutputStream 	os1 = null;
			InputStream 	in1 = null;

			os1 = conn1.getOutputStream();
			os1.write(data1, 0, data1.length);
			os1.flush();
			in1 = conn1.getInputStream();
			byte[] buff = new byte[1024];
			while(true){
				int len = in1.read(buff);
				if(len==-1) break;
				rtvalue1.append(new String(buff, 0, len));
			}
			System.out.println("SOAP 인증 결과 : "+rtvalue1.toString());
			
			// XML 파싱
			String		xml		= rtvalue1.toString();
			int start = xml.indexOf("<");
			xml = xml.substring(start, xml.length());
			System.out.println("SOAP 인증 결과2 : "+xml);
			
			SAXBuilder 	parser1	= new SAXBuilder();
			Document 	doc1 	= parser1.build(new InputSource(new StringReader(xml)));
			Element 	root1 	= doc1.getRootElement();
			
			/** ROOT전체 파싱 **/
			String authReturn = authParser(root1); 
			System.out.println("########### strAuth : "+authReturn);
			
			in1.close();
			os1.close();
			
			/////////////////////////
			
			strSendTemp = "";
			strSendData = "";
			strSendTemp = "<soap:Envelope xmlns:soap=^http://www.w3.org/2003/05/soap-envelope^>\n";
			strSendTemp = strSendTemp + "<soap:Header>\n";
			strSendTemp = strSendTemp + "<context xmlns=^urn:zimbra^>\n";
			strSendTemp = strSendTemp + "<authToken>"+strAuth+"</authToken>\n";
			strSendTemp = strSendTemp + "</context>\n";
			strSendTemp = strSendTemp + "</soap:Header>\n";
			strSendTemp = strSendTemp + "<soap:Body>\n";
			strSendTemp = strSendTemp + "<SyncRequest xmlns=^urn:zimbraMail^/>\n";
			strSendTemp = strSendTemp + "</soap:Body>\n";
			strSendTemp = strSendTemp + "</soap:Envelope>\n";
			strSendData	= strSendTemp.replace('^', '"');			
			System.out.println("SOAP 싱크 전송 : "+strSendData);
			sb2.append(strSendData);

			data2 	= sb2.toString().getBytes("utf-8");
			toURL2 	= new URL(wsdlURL);
			conn2 	= toURL2.openConnection();

			// http input/output 설정
			conn2.setDoInput(true);
			conn2.setDoOutput(true);		// POST=true

			// HTTP 전송을 위한 Stream 생성
			conn2.setRequestProperty("Content-Type", "text/xml");
			conn2.setRequestProperty("Content-Length", ""+data2.length);
			conn2.setRequestProperty("SOAPAction", "SOAPAction");
			
			// HTTP 전송을 위한 Stream 생성
			OutputStream 	os2 = null;
			InputStream 	in2 = null;

			os2 = conn2.getOutputStream();
			os2.write(data2, 0, data2.length);
			os2.flush();
			in2 = conn2.getInputStream();
			byte[] buff2 = new byte[1024];
			while(true){
				int len = in2.read(buff2);
				if(len==-1) break;
				rtvalue2.append(new String(buff2, 0, len));
			}
			System.out.println("SOAP 싱크 결과 : "+rtvalue2.toString());
			
			// XML 파싱
			String		xml2		= rtvalue2.toString();
			int start2 = xml2.indexOf("<");
			xml2 = xml2.substring(start2, xml2.length());
			System.out.println("SOAP 싱크 결과2 : "+xml2);
			
			SAXBuilder 	parser2	= new SAXBuilder();
			Document 	doc2 	= parser2.build(new InputSource(new StringReader(xml2)));
			Element 	root2 	= doc2.getRootElement();
			
			/** ROOT전체 파싱 **/
			syncParser(root2); 
			
			in2.close();
			os2.close();

			/////////////////////////
			
			strSendTemp = "";
			strSendData = "";
			strSendTemp = "<soap:Envelope xmlns:soap=^http://www.w3.org/2003/05/soap-envelope^>\n";
			strSendTemp = strSendTemp + "<soap:Header>\n";
			strSendTemp = strSendTemp + "<context xmlns=^urn:zimbra^>\n";
			strSendTemp = strSendTemp + "<authToken>"+strAuth+"</authToken>\n";
			strSendTemp = strSendTemp + "</context>\n";
			strSendTemp = strSendTemp + "</soap:Header>\n";
			strSendTemp = strSendTemp + "<soap:Body>\n";
			strSendTemp = strSendTemp + "<GetContactsRequest sync=^1^ xmlns=^urn:zimbraMail^>\n";
			strSendTemp = strSendTemp + "<cn id=^"+addrCode+"^/>\n";
			strSendTemp = strSendTemp + "</GetContactsRequest>\n";
			strSendTemp = strSendTemp + "</soap:Body>\n";
			strSendTemp = strSendTemp + "</soap:Envelope>\n";
			strSendData	= strSendTemp.replace('^', '"');			
			System.out.println("SOAP 주소록 전송 : "+strSendData);
			sb3.append(strSendData);

			data3 	= sb3.toString().getBytes("utf-8");
			toURL3 	= new URL(wsdlURL);
			conn3 	= toURL3.openConnection();

			// http input/output 설정
			conn3.setDoInput(true);
			conn3.setDoOutput(true);		// POST=true

			// HTTP 전송을 위한 Stream 생성
			conn3.setRequestProperty("Content-Type", "text/xml");
			conn3.setRequestProperty("Content-Length", ""+data3.length);
			conn3.setRequestProperty("SOAPAction", "SOAPAction");
			
			// HTTP 전송을 위한 Stream 생성
			OutputStream 	os3 = null;

			os3 = conn3.getOutputStream();
			os3.write(data3, 0, data3.length);
			os3.flush();
			String currLine = new String();
			BufferedReader in3 = new BufferedReader(new InputStreamReader(conn3.getInputStream(), "UTF-8"));
			while ((currLine = in3.readLine()) != null) {
				rtvalue3.append(currLine).append("\n");
			}
			System.out.println("SOAP 주소록 결과 : "+rtvalue3.toString());
			
			// XML 파싱
			String		xml3		= rtvalue3.toString();			
			int start3 = xml3.indexOf("<");
			xml3 = xml3.substring(start3, xml3.length());
			System.out.println("SOAP 주소록 결과2 : "+xml3);
			
			SAXBuilder 	parser3	= new SAXBuilder();
			Document 	doc3 	= parser3.build(new InputSource(new StringReader(xml3)));
			Element 	root3 	= doc3.getRootElement();
			
			/** ROOT전체 파싱 **/
			//addressParser(root3); 
			
			addrNABList = addressParser3(root3, addrBookNabList);

/*			
			//System.out.println("List 수 : "+addrNABList.size());
			for ( int idx = 0; idx < addrNABList.size() ; idx++ ) {
				addrBookNabDTO = (AddrBookNabDTO)addrBookNabList.get(idx);
				System.out.println(idx+" 번째 HomePostalCode : "+addrBookNabDTO.getHomePostalCode());
				System.out.println(idx+" 번째 LastName : "+addrBookNabDTO.getLastName());
				System.out.println(idx+" 번째 HomeStreet : "+addrBookNabDTO.getHomeStreet());
				System.out.println(idx+" 번째 WorkCity : "+addrBookNabDTO.getWorkCity());
				System.out.println(idx+" 번째 HomePhone : "+addrBookNabDTO.getHomePhone());
				System.out.println(idx+" 번째 WorkPostalCode : "+addrBookNabDTO.getWorkPostalCode());
				System.out.println(idx+" 번째 MobilePhone : "+addrBookNabDTO.getMobilePhone());
				System.out.println(idx+" 번째 Email : "+addrBookNabDTO.getEmail());
				System.out.println(idx+" 번째 HomeCity : "+addrBookNabDTO.getHomeCity());
				System.out.println(idx+" 번째 Company : "+addrBookNabDTO.getCompany());
				System.out.println(idx+" 번째 HomeState : "+addrBookNabDTO.getHomeState());
				System.out.println(idx+" 번째 WorkStreet : "+addrBookNabDTO.getWorkStreet());
				System.out.println(idx+" 번째 FirstName : "+addrBookNabDTO.getFirstName());
				System.out.println(idx+" 번째 CompanyPhone : "+addrBookNabDTO.getCompanyPhone());
				System.out.println(idx+" 번째 Notes : "+addrBookNabDTO.getNotes());
				System.out.println(idx+" 번째 WorkState : "+addrBookNabDTO.getWorkState());
				System.out.println(idx+" 번째 HomeUrl : "+addrBookNabDTO.getHomeUrl());
				System.out.println(idx+" 번째 JobTitle : "+addrBookNabDTO.getJobTitle());
			}
*/			
			in3.close();
			os3.close();

			return addrNABList;

		}catch(UnsupportedEncodingException ue){
			ue.printStackTrace();
			return addrNABList;
		}catch(MalformedURLException me){
			me.printStackTrace();
			return addrNABList;
		}catch(IOException ie){
			ie.printStackTrace();
			return addrNABList;
		}catch(Exception e){
			e.printStackTrace();
			return addrNABList;
		}
	}

	/** 사용자 인증 파싱 **/
	public String authParser(Element p_el) {
		List nameedChildren = p_el.getChildren();
		Iterator it = nameedChildren.iterator();			
		while(it.hasNext()){
			Element e = (Element)it.next();
			//System.out.println("ReadInfo : "+e.getName()+"::"+e.getValue());
			
			List att = e.getAttributes();
			if (att.size() != 0) {
				Iterator i = att.iterator();
				while(i.hasNext()) {
					/** Attribute 파싱 **/
					Attribute at = (Attribute)i.next();
					//System.out.println("node : " + e.getName());
					//System.out.println("attribute : " + at.getName() +"   attribute value : " + at.getValue());
				}
			}
			List li = e.getChildren();
			if (li.size() != 0) {
				authParser(e); /** recursive call **/
			}else{
			    /** 노드의 값이 있는 경우에만 출력 **/
			    if (!e.getValue().trim().equals("")) {
			    	//System.out.println("parent node : " + e.getParentElement().getName() + " current  node : " + e.getName());
			    	//System.out.println("value : " + e.getValue());
			    	if("AuthResponse".equals(e.getParentElement().getName())&&"authToken".equals(e.getName())){
			    		strAuth = e.getValue();
			    	}
			    }
			}
		}
		return  strAuth;
	}
	
	/** 전체 싱크부분 파싱 **/
	public String syncParser(Element p_el) { 
		List nameedChildren = p_el.getChildren();
		Iterator it = nameedChildren.iterator();			
		while(it.hasNext()){
			Element e = (Element)it.next();
			List att = e.getAttributes();
			if (att.size() != 0) {
				Iterator i = att.iterator();
				while(i.hasNext()) {
					Attribute at = (Attribute)i.next();
					if("folder".equals(e.getName())&&"name".equals(at.getName())&&"Contacts".equals(at.getValue())){
						nodeChk = true;
					}
					if(nodeChk){
						if("cn".equals(e.getName())&&"ids".equals(at.getName())){
							addrCode 	= at.getValue();
							nodeChk 	= false;
						}
					}
				}
			}
			List li = e.getChildren();
			if (li.size() != 0) {
				syncParser(e);
			}else{
			    if (!e.getValue().trim().equals("")) {
			    	//System.out.println("parent node : " + e.getParentElement().getName() + " current  node : " + e.getName());
			    	//System.out.println("value : " + e.getValue());
			    }
			}
		}
		return  addrCode;
	}

	/** 주소록 파싱 **/
	public String addressParser(Element p_el) {
		List nameedChildren = p_el.getChildren();
		Iterator it = nameedChildren.iterator();			
		while(it.hasNext()){
			Element e = (Element)it.next();
			
			List att = e.getAttributes();
			if (att.size() != 0) {
				Iterator i = att.iterator();
				while(i.hasNext()) {
					/** Attribute 파싱 **/
					Attribute at = (Attribute)i.next();
					System.out.println("node : " + e.getName());
					System.out.println("attribute : " + at.getName() +"   attribute value : " + at.getValue());
				}
			}
			List li = e.getChildren();
			if (li.size() != 0) {
				addressParser(e); /** recursive call **/
			}else{
			    /** 노드의 값이 있는 경우에만 출력 **/
			    if (!e.getValue().trim().equals("")) {
			    	System.out.println("parent node : " + e.getParentElement().getName() + " current  node : " + e.getName());
			    	System.out.println("value : " + e.getValue());
			    }
			}
		}
		return  strAuth;
	}

	public List addressParser3(Element p_el, List addrBookNabList) {
	    List 		nameedChildren 	= p_el.getChildren();
		Iterator 	it 				= nameedChildren.iterator();			
		
		String 	attributeName = "";
		int		nodeChk = 0;
		
		addrBookNabDTO = new AddrBookNabDTO();
		while(it.hasNext()){
			Element e = (Element)it.next();
			List att = e.getAttributes();
			if (att.size() != 0) {
				Iterator i = att.iterator();
				while(i.hasNext()) {
					/** Attribute 파싱 **/
					Attribute at = (Attribute)i.next();
					//System.out.println("node : " + e.getName());
					//System.out.println("attribute : " + at.getName() +"   attribute value : " + at.getValue());
					attributeName = at.getValue();
				}
			}
			
			List li = e.getChildren();
			if (li.size() != 0) {
				addressParser3(e, addrBookNabList); /** recursive call **/
			}else{
			    /** 노드의 값이 있는 경우에만 출력 **/
			    if("a".equals(e.getName())&&"cn".equals(e.getParentElement().getName())){
			    	//System.out.println("##### current  node : " + attributeName + " ##### Value : " + e.getValue());
			    	
			    	nodeChk = 1;
			    	if("homePostalCode".equals(attributeName)){				// 집우편번호
			    		addrBookNabDTO.setHomePostalCode(e.getValue());
			    	}else if("lastName".equals(attributeName)){				// 이름(성)
			    		addrBookNabDTO.setLastName(e.getValue());
			    	}else if("homeStreet".equals(attributeName)){			// 집주소 3
			    		addrBookNabDTO.setHomeStreet(e.getValue());
			    	}else if("workCity".equals(attributeName)){				// 회사주소 2
			    		addrBookNabDTO.setWorkCity(e.getValue());
			    	}else if("homePhone".equals(attributeName)){			// 집전화
			    		addrBookNabDTO.setHomePhone(e.getValue());
			    	}else if("workPostalCode".equals(attributeName)){		// 회사 우편번호
			    		addrBookNabDTO.setWorkPostalCode(e.getValue());
			    	}else if("mobilePhone".equals(attributeName)){			// 핸드폰
			    		addrBookNabDTO.setMobilePhone(e.getValue());
			    	}else if("email".equals(attributeName)){				// 개인메일
			    		addrBookNabDTO.setEmail(e.getValue());
			    	}else if("homeCity".equals(attributeName)){				// 집주소 2
			    		addrBookNabDTO.setHomeCity(e.getValue());
			    	}else if("company".equals(attributeName)){				// 회사명 (그룹명)
			    		addrBookNabDTO.setCompany(e.getValue());
			    	}else if("homeState".equals(attributeName)){			// 집주소 1
			    		addrBookNabDTO.setHomeState(e.getValue());
			    	}else if("workStreet".equals(attributeName)){			// 회사주소 3
			    		addrBookNabDTO.setWorkStreet(e.getValue());
			    	}else if("firstName".equals(attributeName)){			// 이름
			    		addrBookNabDTO.setFirstName(e.getValue());
			    	}else if("workPhone".equals(attributeName)){			// 회사전화
			    		addrBookNabDTO.setCompanyPhone(e.getValue());
			    	}else if("notes".equals(attributeName)){				// 메모
			    		addrBookNabDTO.setNotes(e.getValue());
			    	}else if("workState".equals(attributeName)){			// 회사주소 1
			    		addrBookNabDTO.setWorkState(e.getValue());
			    	}else if("otherURL".equals(attributeName)){				// 홈페이지 (웹싸이트)
			    		addrBookNabDTO.setHomeUrl(e.getValue());
			    	}else if("jobTitle".equals(attributeName)){				// 직급
			    		addrBookNabDTO.setJobTitle(e.getValue());
			    	}
			    }
			}
		}
		if(nodeChk == 1){
			addrBookNabList.add(addrBookNabDTO);
			nodeChk = 0;
		}
		
		return  addrBookNabList;
	}

}