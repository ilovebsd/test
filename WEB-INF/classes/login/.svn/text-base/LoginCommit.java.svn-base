package login;

import java.sql.ResultSet;
import java.sql.SQLException;

import webuser.ServerLogin;
import acromate.ConnectionManager;
import com.acromate.driver.db.DataStatement;
import dto.LoginDTO;
import dto.SubscriberInfoDTO;
import dto.E164InfoDTO;
import acromate.common.util.*;
import java.io.*;

class Login implements Serializable{
	
}


public class LoginCommit {
	
	private LoginDTO loginDTO;
	private SubscriberInfoDTO scDTO;
	private E164InfoDTO e164DTO;
	
	public LoginCommit(LoginDTO loginDTO) {
		this.loginDTO = loginDTO;
		scDTO = new SubscriberInfoDTO();
		e164DTO = new E164InfoDTO();
	}
	
	public String[] getUserType() throws Exception {
		String userType = "1";
		String groupId = "";

        DataStatement statement=null;
        ResultSet rs = null;
        String sql = "";
        try {
            statement = ConnectionManager.allocStatement("SSW");
            sql = "SELECT userType, groupId From table_subscriber WHERE id = '" + loginDTO.getInputID().trim() + "'";
            System.out.println("t_subscriber:userType --> " + sql);
            rs = statement.executeQuery(sql);
            if (rs.next()) {
            	userType = WebUtil.CheckNullString(rs.getString("userType").trim());
            	if (userType.equals("2"))
            		groupId = WebUtil.CheckNullString(rs.getString("groupId"));
            }
			System.out.println( "userType: " + userType);
			
//			if 2 : e164DTO.setGroupID(...) 
        	
        } catch (Exception e) {
      	  	ServerLogin.getServerLogin().login();
        } finally {
            this.close(statement, rs);
        }
		
		return new String[]{userType, groupId};
	}

	// id, pwd, phoneNum..(13가지)정보를 세션에 저장하기위해 scDTO 리턴.
	public SubscriberInfoDTO getSubsInfo() throws Exception {
		 System.out.println("getSubsInfo <---");
		  SubscriberInfoDTO returnDTO = null;
          DataStatement statement=null;
          ResultSet rs = null;
          String sql = "";
          try {        	  
              statement = ConnectionManager.allocStatement("SSW");
              sql   = " SELECT id, pwd, phoneNum, Name, Position, Department, Mobile, HomeNumber, Extension, MailAddress, HomePage, Address, Introduction, loginlevel  From table_subscriber ";
              sql += " WHERE id = '" + loginDTO.getInputID().trim() + "'";
              System.out.println("t_subscriber --> " + sql);
              rs = statement.executeQuery(sql);
              if (rs.next())
              {
					scDTO.setSubsID(Str.CheckNullString(rs.getString(1)).trim());
					scDTO.setSusbsPwd(Str.CheckNullString(rs.getString(2)).trim());
					scDTO.setPhoneNum(Str.CheckNullString(rs.getString(3)).trim());	
					scDTO.setName(Str.CheckNullString(rs.getString(4)).trim());
					scDTO.setPosition(Str.CheckNullString(rs.getString(5)).trim());
					scDTO.setDepartment(rs.getInt(6));
					scDTO.setMobile(Str.CheckNullString(rs.getString(7)).trim());
					scDTO.setHomeNumber(Str.CheckNullString(rs.getString(8)).trim());
					scDTO.setExtension(Str.CheckNullString(rs.getString(9)).trim());
					scDTO.setMailAddress(Str.CheckNullString(rs.getString(10)).trim());
					scDTO.setHomePage(Str.CheckNullString(rs.getString(11)).trim());
					scDTO.setAddress(Str.CheckNullString(rs.getString(12)).trim());
					scDTO.setIntroduction(Str.CheckNullString(rs.getString(13)).trim());
					scDTO.setLoginLevel(rs.getInt(14));
				
              }
              rs.close();
              sql   = " SELECT UserE164 From table_Presence WHERE  UserE164 = '" + loginDTO.getInputID().trim() + "'";
              rs = statement.executeQuery(sql);
              if (rs.next()) scDTO.setUsePresence(true);
              else scDTO.setUsePresence(false);

              returnDTO = scDTO ;
          } catch (Exception e) {
        	  
        	  e.printStackTrace();
        	  ServerLogin.getServerLogin().login();
       	  
          } finally {
                  this.close(statement, rs);
          }
          return returnDTO;
	  }
	
//	  private boolean getValidE164(String id)  throws Exception {
//		  SubscriberInfoDTO returnDTO = null;
//          DataStatement statement=null;
//          ResultSet rs = null;
//          String sql = "";
//          try {        	  
//              statement = ConnectionManager.allocStatement("SSW");
//              sql   = " SELECT count(*) FROM Table_E164 ";
//              sql += " WHERE e164 IN (SELECT phoneNum From table_subscriber WHERE id='" + id + "')" ;
//              System.out.println("table_e164 --> " + sql);
//              rs = statement.executeQuery(sql);
//              if (rs.next()) {
//            	  if (rs.getInt(1) == 1)
//            		  return true;
//              }
//
//          } catch (Exception e) {
//        	  
//        	  ServerLogin.getServerLogin().login();
//        	  
//          } finally {
//                  this.close(statement, rs);
//          }
//		  
//		  return false;
//	  }
	
	  // 가입자의 table_E164 정보를 세션에 저장하기 위해 e164DTO 리턴.
	  public E164InfoDTO getE164Info(DataStatement stmt) {
		  ResultSet rs = null;
		  String answerService =  "", callerService = "", commonService = "";
		  String e164 = WebUtil.CheckNullString(scDTO.getPhoneNum()).trim();
		  
		  String selectQuery = "SELECT GroupID From table_E164" + " WHERE E164 ='" + e164 + "' ";
		  rs = stmt.executeQuery(selectQuery);
		  
		  try {
			if (!rs.next()) {
				  rs.close();
			  	  System.out.println("존재하지 않는 전화번호 입니다.");
			} else {
				  selectQuery = "SELECT GROUPID, EXTENSIONNUMBER, CALLERSERVICE, ANSWERSERVICE, COMMONSERVICE, " + 
					  					"VIRTUALCID, DIRECTFORWARDNUMBER, HOTLINENUMBER, HOTLINEDELAYTIME, MAILBOX  " + 
				  				"FROM table_e164 " +
				  				"WHERE e164 = '" + e164 + "'";
			      rs = stmt.executeQuery(selectQuery);
			      if (rs.next()) {
			    	  e164DTO.setE164(e164);
			    	  e164DTO.setGroupId(WebUtil.CheckNullString(rs.getString("GROUPID")).trim());
			    	  e164DTO.setExtensionNum(WebUtil.CheckNullString(rs.getString("EXTENSIONNUMBER")).trim());
			    	  
			    	  callerService = WebUtil.CheckNullString(rs.getString("CALLERSERVICE")).trim();
			    	  if (callerService.equals(""))
			    		  callerService = "0000000000000000000000000000000000000000000000000000000000000000";
			    	  e164DTO.setCallerService(callerService);
			    	  
			    	  answerService = WebUtil.CheckNullString(rs.getString("ANSWERSERVICE")).trim();
			    	  if (answerService.equals(""))
			    		  answerService = "0000000000000000000000000000000000000000000000000000000000000000";
		    		  e164DTO.setAnswerService(answerService);
		    		  
		    		  commonService = WebUtil.CheckNullString(rs.getString("COMMONSERVICE")).trim();
			    	  if (commonService.equals(""))
			    		  commonService = "00000000000000000000000000000000";
			    	  e164DTO.setCommonService(commonService);

			    	  System.out.println("사서함 commonService ==> " + e164DTO.getCommonService().substring(8,9));
			    	  e164DTO.setVcid(WebUtil.CheckNullString(rs.getString("VIRTUALCID")).trim());
			    	  e164DTO.setDirectForwardNum(WebUtil.CheckNullString(rs.getString("DIRECTFORWARDNUMBER")).trim());
			    	  e164DTO.setHotLineNum(WebUtil.CheckNullString(rs.getString("HOTLINENUMBER")).trim());
			    	  e164DTO.setHotLineDelayTime(WebUtil.CheckNullString(rs.getString("HOTLINEDELAYTIME")).trim());
			    	  e164DTO.setMailBox(WebUtil.CheckNullString(rs.getString("MAILBOX")).trim());
			      }
			      rs.close();
			  }
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {			
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		  return e164DTO;
	  }
	  
	  //아이디 패스워드 체크
	  //getSubsInfo() 호출 후에 호출해야함.
	  public boolean checkIdPwd() {
		  boolean login = false;
		  String inputID = loginDTO.getInputID();
		  String dbID = scDTO.getSubsID();
		  String inputPwd = loginDTO.getInputPwd();
		  String dbPwd = scDTO.getSusbsPwd();
		  
		  if (inputID.equals(dbID)) {
			  if (inputPwd.equals(dbPwd))
				  login = true;
		  } 
			  			  
		  return login;
	  }
	  
	  private void close(DataStatement stmt, ResultSet rs) throws SQLException {
			try
			{
				if (rs != null)
					rs.close();
	
				if (stmt != null)
					ConnectionManager.freeStatement(stmt);
			}
			catch(Exception ee){}
	  }
}