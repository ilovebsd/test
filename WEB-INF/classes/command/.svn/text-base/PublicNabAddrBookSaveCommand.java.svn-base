package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import acromate.ConnectionManager;
import acromate.common.StaticString;
import acromate.common.util.StringUtil;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
import dto.AddrBookDTO;
import dto.SubscriberInfoDTO;
import dao.NabAddrBookDAO;

public class PublicNabAddrBookSaveCommand implements Command {
	public String execute(HttpServletRequest req, HttpServletResponse res) {
		String forwardingPage = "";
        AddrBookDTO dto = new AddrBookDTO();
		DataStatement stmt = null;
		String resStr = "";
		resStr = "nabAddrList.jsp";
		
		try {			
			String 	ownerID		= new String(Str.CheckNullString(req.getParameter("hiOwnerID")).getBytes("8859_1"), "euc-kr");		// 회사
			String 	insertStr 	= new String(Str.CheckNullString(req.getParameter("deleteStr")).getBytes("8859_1"), "euc-kr");
			String 	common		= new String(Str.CheckNullString(req.getParameter("hiCommon")).getBytes("8859_1"), "euc-kr");		// 공유여부			

			stmt = ConnectionManager.allocStatement("SSW");
			// 트랜잭션 시작
			stmt.stxTransaction();

			String[] 	addrStr 	= StringUtil.getParser(insertStr, "");
			if(addrStr != null){
				NabAddrBookDAO dao = new NabAddrBookDAO();
				
				for(int k=0; k < addrStr.length; k++){
					
					String[]	varTmp;
					
					int 	tmpId			= 0;
					int 	groupId			= 0;		// 그룹번호
					String 	groupName		= "";		// 그룹명
					String 	name			= "";		// 이름
					String 	phoneNum		= "";		// 집전화
					String 	mobile			= "";		// 핸드폰
					String 	position		= "";		// 직급
					String 	homeAddr		= "";		// 집주소
					String 	memo			= "";		// 메모
					String 	mail			= "";		// 이메일
					String 	companyNumber	= "";		// 회사전화
					String 	companyAddr		= "";		// 회사주소
					String 	homePage		= "";		// 홈페이지
					String 	keynumber		= "";		// 대표번호
					
					varTmp 			= StringUtil.getParser(addrStr[k], "|");
					groupName		= varTmp[0];
					name			= varTmp[1];
					phoneNum		= varTmp[2];
					mobile			= varTmp[3];
					position		= varTmp[4];
					homeAddr		= varTmp[5];
					memo			= varTmp[6];
					mail			= varTmp[7];
					companyNumber	= varTmp[8];
					companyAddr		= varTmp[9];
					homePage		= varTmp[0];
					if(!"".equals(varTmp[3])){
						keynumber	= varTmp[3];		// 핸드폰이 대표번호인 경우
					}else if(!"".equals(varTmp[8])){
						keynumber	= varTmp[8];		// 회사전화가 대표번호인 경우
					}else if(!"".equals(varTmp[2])){
						keynumber	= varTmp[2];		// 집전화가 대표번호인 경우
					}
					
					tmpId = dao.getGroupID(stmt, ownerID, groupName);
					if(tmpId==0){
						groupId = dao.maxGroupID(stmt, ownerID, groupName);
					}else{
						groupId = tmpId;
					}
					
					dto.setOwnerID(ownerID);
					dto.setGroupID(groupId);
					dto.setName(name);
					dto.setPhoneNum(phoneNum);
					dto.setMobile(mobile);
					dto.setPosition(position);
					dto.setAddress(homeAddr);
					dto.setMemo(memo);
					dto.setMailAddress(mail);
					dto.setCompanyNumber(companyNumber);
					dto.setCompanyAddress(companyAddr);
					dto.setHomePage(homePage);
					dto.setKeyNumber(keynumber);
					dto.setCommon(Integer.parseInt(common));

					
					
					int updateResult = dao.insert(stmt,dto);

				}
			}
			
			//String 	publicGroup     = new String(Str.CheckNullString(req.getParameter("hiPublicGroup")).getBytes("8859_1"), "euc-kr");	// 공유그룹
			//String 	publicChk       = new String(Str.CheckNullString(req.getParameter("hiPublicChk")).getBytes("8859_1"), "euc-kr");	// 개인공유등록여부 (1:일반, 2:공유)


			if (stmt != null)	stmt.endTransaction(true);
			
			
			res.sendRedirect("/bizportal/address/"+resStr);
		
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/address/"+resStr+"?result=-1");
			} catch (Exception ee) {
			}
			//ServerLogin.getServerLogin().login();

			e.printStackTrace();
		} finally {
			//할당받은 DataStatement 객체는 반납
			if (stmt != null ) ConnectionManager.freeStatement(stmt);
		}
		return forwardingPage;
	}
}
