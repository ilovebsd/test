package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import acromate.ConnectionManager;
import acromate.common.StaticString;
import business.LogHistory;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
//import dao.system.PrefixTableIdDAO;
import gateway.CtrlSNMP;

public class SnmpCoderCommand implements Command {
	public String execute(HttpServletRequest req, HttpServletResponse res) {
		DataStatement 	stmt 			= null;
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";
		try {
			String 	snmp_Ip 		= new String(Str.CheckNullString(req.getParameter("hiSnmp_Ip")).getBytes("8859_1"), "euc-kr");	// 

			String 	coders_Name1	= new String(Str.CheckNullString(req.getParameter("hiCoders_Name1")).getBytes("8859_1"), "euc-kr");	// 
			String 	coders_Time1	= new String(Str.CheckNullString(req.getParameter("hiCoders_Time1")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Rate1	= new String(Str.CheckNullString(req.getParameter("hiCoders_Rate1")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Payload1	= new String(Str.CheckNullString(req.getParameter("hiCoders_Payload1")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Silence1	= new String(Str.CheckNullString(req.getParameter("hiCoders_Silence1")).getBytes("8859_1"), "euc-kr");	//
			
			String 	coders_Name2	= new String(Str.CheckNullString(req.getParameter("hiCoders_Name2")).getBytes("8859_1"), "euc-kr");	// 
			String 	coders_Time2	= new String(Str.CheckNullString(req.getParameter("hiCoders_Time2")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Rate2	= new String(Str.CheckNullString(req.getParameter("hiCoders_Rate2")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Payload2	= new String(Str.CheckNullString(req.getParameter("hiCoders_Payload2")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Silence2	= new String(Str.CheckNullString(req.getParameter("hiCoders_Silence2")).getBytes("8859_1"), "euc-kr");	//

			String 	coders_Name3	= new String(Str.CheckNullString(req.getParameter("hiCoders_Name3")).getBytes("8859_1"), "euc-kr");	// 
			String 	coders_Time3	= new String(Str.CheckNullString(req.getParameter("hiCoders_Time3")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Rate3	= new String(Str.CheckNullString(req.getParameter("hiCoders_Rate3")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Payload3	= new String(Str.CheckNullString(req.getParameter("hiCoders_Payload3")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Silence3	= new String(Str.CheckNullString(req.getParameter("hiCoders_Silence3")).getBytes("8859_1"), "euc-kr");	//
			
			String 	coders_Name4	= new String(Str.CheckNullString(req.getParameter("hiCoders_Name4")).getBytes("8859_1"), "euc-kr");	// 
			String 	coders_Time4	= new String(Str.CheckNullString(req.getParameter("hiCoders_Time4")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Rate4	= new String(Str.CheckNullString(req.getParameter("hiCoders_Rate4")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Payload4	= new String(Str.CheckNullString(req.getParameter("hiCoders_Payload4")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Silence4	= new String(Str.CheckNullString(req.getParameter("hiCoders_Silence4")).getBytes("8859_1"), "euc-kr");	//
			
			String 	coders_Name5	= new String(Str.CheckNullString(req.getParameter("hiCoders_Name5")).getBytes("8859_1"), "euc-kr");	// 
			String 	coders_Time5	= new String(Str.CheckNullString(req.getParameter("hiCoders_Time5")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Rate5	= new String(Str.CheckNullString(req.getParameter("hiCoders_Rate5")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Payload5	= new String(Str.CheckNullString(req.getParameter("hiCoders_Payload5")).getBytes("8859_1"), "euc-kr");	//
			String 	coders_Silence5	= new String(Str.CheckNullString(req.getParameter("hiCoders_Silence5")).getBytes("8859_1"), "euc-kr");	//

			String 	userID			= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// ·Î±×ÀÎ ID
			
			resStr = "codeTable.jsp";

			SessionManager manager = SessionManager.getInstance();
			HttpSession hs = req.getSession();
			String id = hs.getId();
			BaseEntity entity = manager.getBaseEntity(id);	
			
			CtrlSNMP ctrlSNMP = new CtrlSNMP();
			
			if(!"".equals(coders_Name1)){
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5.0", Integer.parseInt(coders_Name1), 1);	// Integer
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6.0", Integer.parseInt(coders_Time1), 2);	// UnsignedInteger
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7.0", Integer.parseInt(coders_Rate1), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9.0", Integer.parseInt(coders_Silence1), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.0", 1, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.0", 6, 1);
				
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5.0", Integer.parseInt(coders_Name1), 1);	// Integer
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6.0", Integer.parseInt(coders_Time1), 2);	// UnsignedInteger
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7.0", Integer.parseInt(coders_Rate1), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9.0", Integer.parseInt(coders_Silence1), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.0", 1, 1);
			}else{
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.0", 6, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.0", 6, 1);
			}
			if(!"".equals(coders_Name2)){
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5.1", Integer.parseInt(coders_Name2), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6.1", Integer.parseInt(coders_Time2), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7.1", Integer.parseInt(coders_Rate2), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9.1", Integer.parseInt(coders_Silence2), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.1", 1, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.1", 6, 1);
				
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5.1", Integer.parseInt(coders_Name2), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6.1", Integer.parseInt(coders_Time2), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7.1", Integer.parseInt(coders_Rate2), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9.1", Integer.parseInt(coders_Silence2), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.1", 1, 1);
			}else{
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.1", 6, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.1", 6, 1);
			}
			if(!"".equals(coders_Name3)){
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5.2", Integer.parseInt(coders_Name3), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6.2", Integer.parseInt(coders_Time3), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7.2", Integer.parseInt(coders_Rate3), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9.2", Integer.parseInt(coders_Silence3), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.2", 1, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.2", 6, 1);
				
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5.2", Integer.parseInt(coders_Name3), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6.2", Integer.parseInt(coders_Time3), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7.2", Integer.parseInt(coders_Rate3), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9.2", Integer.parseInt(coders_Silence3), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.2", 1, 1);
			}else{
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.2", 6, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.2", 6, 1);
			}
			if(!"".equals(coders_Name4)){
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5.3", Integer.parseInt(coders_Name4), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6.3", Integer.parseInt(coders_Time4), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7.3", Integer.parseInt(coders_Rate4), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9.3", Integer.parseInt(coders_Silence4), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.3", 1, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.3", 6, 1);
				
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5.3", Integer.parseInt(coders_Name4), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6.3", Integer.parseInt(coders_Time4), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7.3", Integer.parseInt(coders_Rate4), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9.3", Integer.parseInt(coders_Silence4), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.3", 1, 1);
			}else{
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.3", 6, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.3", 6, 1);
			}
			if(!"".equals(coders_Name5)){
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.5.4", Integer.parseInt(coders_Name5), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.6.4", Integer.parseInt(coders_Time5), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.7.4", Integer.parseInt(coders_Rate5), 2);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.9.4", Integer.parseInt(coders_Silence5), 1);
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.4", 1, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.4", 6, 1);
				
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.5.4", Integer.parseInt(coders_Name5), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.6.4", Integer.parseInt(coders_Time5), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.7.4", Integer.parseInt(coders_Rate5), 2);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.9.4", Integer.parseInt(coders_Silence5), 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.4", 1, 1);
			}else{
				//ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.1.1.2.4", 6, 1);
				ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.6.2.1.2.4", 6, 1);
			}
			
			ctrlSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.10.3.1.1.4.0", 1, 2);
			
			// ############### LogHistory Ã³¸®  ###############
			String		strIp		= req.getRemoteAddr();
			LogHistory	logHistory 	= new LogHistory();
			int int_result = logHistory.LogHistorySave(userID+"|87|ÄÚµ¦ µî·Ï|1|"+strIp);
			// ##############################################

			res.sendRedirect("/bizportal/gateway/"+resStr);
		
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {

		}		
		return forwardingPage;
	}
}
