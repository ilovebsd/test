package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import acromate.ConnectionManager;
import acromate.common.StaticString;
import business.LogHistory;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
import gateway.RoutingSNMP;
import gateway.TrunkGroupSNMP;

public class SnmpHuntGroupCommand implements Command {
	public String execute(HttpServletRequest req, HttpServletResponse res) {
		DataStatement 	stmt 			= null;
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";
		try {
			String 	snmp_Ip 		= new String(Str.CheckNullString(req.getParameter("hiSnmp_Ip")).getBytes("8859_1"), "euc-kr");	// 

			String 	module_0	= new String(Str.CheckNullString(req.getParameter("hiModule_0")).getBytes("8859_1"), "euc-kr");	// 
			String 	module_1	= new String(Str.CheckNullString(req.getParameter("hiModule_1")).getBytes("8859_1"), "euc-kr");	//
			String 	module_2	= new String(Str.CheckNullString(req.getParameter("hiModule_2")).getBytes("8859_1"), "euc-kr");	//
			String 	module_3	= new String(Str.CheckNullString(req.getParameter("hiModule_3")).getBytes("8859_1"), "euc-kr");	//
			String 	module_4	= new String(Str.CheckNullString(req.getParameter("hiModule_4")).getBytes("8859_1"), "euc-kr");	//
			String 	module_5	= new String(Str.CheckNullString(req.getParameter("hiModule_5")).getBytes("8859_1"), "euc-kr");	//
			String 	module_6	= new String(Str.CheckNullString(req.getParameter("hiModule_6")).getBytes("8859_1"), "euc-kr");	//
			String 	module_7	= new String(Str.CheckNullString(req.getParameter("hiModule_7")).getBytes("8859_1"), "euc-kr");	//
			String 	module_8	= new String(Str.CheckNullString(req.getParameter("hiModule_8")).getBytes("8859_1"), "euc-kr");	//
			String 	module_9	= new String(Str.CheckNullString(req.getParameter("hiModule_9")).getBytes("8859_1"), "euc-kr");	//
			String 	module_10	= new String(Str.CheckNullString(req.getParameter("hiModule_10")).getBytes("8859_1"), "euc-kr");	//
			String 	module_11	= new String(Str.CheckNullString(req.getParameter("hiModule_11")).getBytes("8859_1"), "euc-kr");	//
			
			String 	channel_0	= new String(Str.CheckNullString(req.getParameter("hiChannel_0")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_1	= new String(Str.CheckNullString(req.getParameter("hiChannel_1")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_2	= new String(Str.CheckNullString(req.getParameter("hiChannel_2")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_3	= new String(Str.CheckNullString(req.getParameter("hiChannel_3")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_4	= new String(Str.CheckNullString(req.getParameter("hiChannel_4")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_5	= new String(Str.CheckNullString(req.getParameter("hiChannel_5")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_6	= new String(Str.CheckNullString(req.getParameter("hiChannel_6")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_7	= new String(Str.CheckNullString(req.getParameter("hiChannel_7")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_8	= new String(Str.CheckNullString(req.getParameter("hiChannel_8")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_9	= new String(Str.CheckNullString(req.getParameter("hiChannel_9")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_10	= new String(Str.CheckNullString(req.getParameter("hiChannel_10")).getBytes("8859_1"), "euc-kr");	//
			String 	channel_11	= new String(Str.CheckNullString(req.getParameter("hiChannel_11")).getBytes("8859_1"), "euc-kr");	//
			
			String 	phone_0		= new String(Str.CheckNullString(req.getParameter("hiPhone_0")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_1		= new String(Str.CheckNullString(req.getParameter("hiPhone_1")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_2		= new String(Str.CheckNullString(req.getParameter("hiPhone_2")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_3		= new String(Str.CheckNullString(req.getParameter("hiPhone_3")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_4		= new String(Str.CheckNullString(req.getParameter("hiPhone_4")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_5		= new String(Str.CheckNullString(req.getParameter("hiPhone_5")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_6		= new String(Str.CheckNullString(req.getParameter("hiPhone_6")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_7		= new String(Str.CheckNullString(req.getParameter("hiPhone_7")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_8		= new String(Str.CheckNullString(req.getParameter("hiPhone_8")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_9		= new String(Str.CheckNullString(req.getParameter("hiPhone_9")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_10	= new String(Str.CheckNullString(req.getParameter("hiPhone_10")).getBytes("8859_1"), "euc-kr");	//
			String 	phone_11	= new String(Str.CheckNullString(req.getParameter("hiPhone_11")).getBytes("8859_1"), "euc-kr");	//
			
			String 	group_0		= new String(Str.CheckNullString(req.getParameter("hiGroup_0")).getBytes("8859_1"), "euc-kr");	//
			String 	group_1		= new String(Str.CheckNullString(req.getParameter("hiGroup_1")).getBytes("8859_1"), "euc-kr");	//
			String 	group_2		= new String(Str.CheckNullString(req.getParameter("hiGroup_2")).getBytes("8859_1"), "euc-kr");	//
			String 	group_3		= new String(Str.CheckNullString(req.getParameter("hiGroup_3")).getBytes("8859_1"), "euc-kr");	//
			String 	group_4		= new String(Str.CheckNullString(req.getParameter("hiGroup_4")).getBytes("8859_1"), "euc-kr");	//
			String 	group_5		= new String(Str.CheckNullString(req.getParameter("hiGroup_5")).getBytes("8859_1"), "euc-kr");	//
			String 	group_6		= new String(Str.CheckNullString(req.getParameter("hiGroup_6")).getBytes("8859_1"), "euc-kr");	//
			String 	group_7		= new String(Str.CheckNullString(req.getParameter("hiGroup_7")).getBytes("8859_1"), "euc-kr");	//
			String 	group_8		= new String(Str.CheckNullString(req.getParameter("hiGroup_8")).getBytes("8859_1"), "euc-kr");	//
			String 	group_9		= new String(Str.CheckNullString(req.getParameter("hiGroup_9")).getBytes("8859_1"), "euc-kr");	//
			String 	group_10	= new String(Str.CheckNullString(req.getParameter("hiGroup_10")).getBytes("8859_1"), "euc-kr");	//
			String 	group_11	= new String(Str.CheckNullString(req.getParameter("hiGroup_11")).getBytes("8859_1"), "euc-kr");	//
			
			String 	userID		= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// ·Î±×ÀÎ ID
			
			resStr = "huntGroup.jsp";

			SessionManager manager = SessionManager.getInstance();
			HttpSession hs = req.getSession();
			String id = hs.getId();
			BaseEntity entity = manager.getBaseEntity(id);	
			
			TrunkGroupSNMP trunkGroupSNMP = new TrunkGroupSNMP();
			
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.0", module_0, 2);		// Gauge32
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.1", module_1, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.2", module_2, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.3", module_3, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.4", module_4, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.5", module_5, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.6", module_6, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.7", module_7, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.8", module_8, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.9", module_9, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.10", module_10, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.12.11", module_11, 2);
			
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.0", channel_0, 2);		// Gauge32
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.1", channel_1, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.2", channel_2, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.3", channel_3, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.4", channel_4, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.5", channel_5, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.6", channel_6, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.7", channel_7, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.8", channel_8, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.9", channel_9, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.10", channel_10, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.6.11", channel_11, 2);

			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.0", channel_0, 2);		// Gauge32
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.1", channel_1, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.2", channel_2, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.3", channel_3, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.4", channel_4, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.5", channel_5, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.6", channel_6, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.7", channel_7, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.8", channel_8, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.9", channel_9, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.10", channel_10, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.7.11", channel_11, 2);

			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.0", phone_0, 3);		// OctetString
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.1", phone_1, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.2", phone_2, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.3", phone_3, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.4", phone_4, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.5", phone_5, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.6", phone_6, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.7", phone_7, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.8", phone_8, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.9", phone_9, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.10", phone_10, 3);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.8.11", phone_11, 3);
			
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.0", group_0, 2);		// Gauge32
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.1", group_1, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.2", group_2, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.3", group_3, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.4", group_4, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.5", group_5, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.6", group_6, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.7", group_7, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.8", group_8, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.9", group_9, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.10", group_10, 2);
			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.1.21.1.9.11", group_11, 2);
			
			// Routing Table OID Ãß°¡ ==============================================================================
			RoutingSNMP routingSNMP = new RoutingSNMP();
			
			// 1¹øÂ° FXS
			String routingChk_01 = routingSNMP.getSNMP(snmp_Ip, "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.1");
			if("".equals(phone_8)){
				if(!"".equals(routingChk_01)){
					// ¹øÈ£¸¦ ÀÔ·Â¹ÞÁö ¾Ê¾ÒÀ¸³ª ±âÁ¸ÀÇ OID °ªÀÌ ÀÖ¾î »èÁ¦
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.1", "6", 1);		// Integer
				}
			}else{
				if("".equals(routingChk_01)){
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ¾øÀ¸¹Ç·Î ½Å±Ôµî·Ï
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.1", "4", 1);		// Integer
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.1", phone_8, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.1", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.1", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.1", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.1", "0", 2);		// UnsignedInteger
				}else{
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ÀÖÀ¸¹Ç·Î ¼öÁ¤
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.1", phone_8, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.1", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.1", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.1", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.1", "0", 2);		// UnsignedInteger
				}
			}
			
			// 2¹øÂ° FXS
			String routingChk_02 = routingSNMP.getSNMP(snmp_Ip, "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.2");
			if("".equals(phone_9)){
				if(!"".equals(routingChk_02)){
					// ¹øÈ£¸¦ ÀÔ·Â¹ÞÁö ¾Ê¾ÒÀ¸³ª ±âÁ¸ÀÇ OID °ªÀÌ ÀÖ¾î »èÁ¦
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.2", "6", 1);		// Integer
				}
			}else{
				if("".equals(routingChk_02)){
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ¾øÀ¸¹Ç·Î ½Å±Ôµî·Ï
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.2", "4", 1);		// Integer
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.2", phone_9, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.2", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.2", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.2", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.2", "0", 2);		// UnsignedInteger
				}else{
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ÀÖÀ¸¹Ç·Î ¼öÁ¤
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.2", phone_9, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.2", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.2", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.2", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.2", "0", 2);		// UnsignedInteger
				}
			}
			
			// 3¹øÂ° FXS
			String routingChk_03 = routingSNMP.getSNMP(snmp_Ip, "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.3");
			if("".equals(phone_10)){
				if(!"".equals(routingChk_03)){
					// ¹øÈ£¸¦ ÀÔ·Â¹ÞÁö ¾Ê¾ÒÀ¸³ª ±âÁ¸ÀÇ OID °ªÀÌ ÀÖ¾î »èÁ¦
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.3", "6", 1);		// Integer
				}
			}else{
				if("".equals(routingChk_03)){
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ¾øÀ¸¹Ç·Î ½Å±Ôµî·Ï
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.3", "4", 1);		// Integer
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.3", phone_10, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.3", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.3", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.3", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.3", "0", 2);		// UnsignedInteger
				}else{
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ÀÖÀ¸¹Ç·Î ¼öÁ¤
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.3", phone_10, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.3", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.3", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.3", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.3", "0", 2);		// UnsignedInteger
				}
			}
			
			// 4¹øÂ° FXS
			String routingChk_04 = routingSNMP.getSNMP(snmp_Ip, "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.4");
			if("".equals(phone_11)){
				if(!"".equals(routingChk_04)){
					// ¹øÈ£¸¦ ÀÔ·Â¹ÞÁö ¾Ê¾ÒÀ¸³ª ±âÁ¸ÀÇ OID °ªÀÌ ÀÖ¾î »èÁ¦
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.4", "6", 1);		// Integer
				}
			}else{
				if("".equals(routingChk_04)){
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ¾øÀ¸¹Ç·Î ½Å±Ôµî·Ï
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.4", "4", 1);		// Integer
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.4", phone_11, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.4", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.4", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.4", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.4", "0", 2);		// UnsignedInteger
				}else{
					// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ÀÖÀ¸¹Ç·Î ¼öÁ¤
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.4", phone_11, 3);	// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.4", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.4", "*", 3);		// OctetString
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.4", "2", 2);		// UnsignedInteger
					routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.4", "0", 2);		// UnsignedInteger
				}
			}

			// 5¹øÂ° *
			String routingChk_05 = routingSNMP.getSNMP(snmp_Ip, "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.5");
//			if(!"".equals(routingChk_05)){
				// ¹øÈ£¸¦ ÀÔ·Â¹ÞÁö ¾Ê¾ÒÀ¸³ª ±âÁ¸ÀÇ OID °ªÀÌ ÀÖ¾î »èÁ¦
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.5", "6", 1);		// Integer
//			}

//			if("".equals(routingChk_05)){
				// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ¾øÀ¸¹Ç·Î ½Å±Ôµî·Ï
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.2.5", "4", 1);		// Integer
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.5", "*", 3);		// OctetString
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.5", "*", 3);		// OctetString
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.5", "*", 3);		// OctetString
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.5", "1", 2);		// UnsignedInteger
				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.5", "0", 2);		// UnsignedInteger
//			}else{
				// ¹øÈ£°¡ ÀÔ·Â µÇ°í OID °ªÀÌ ÀÖÀ¸¹Ç·Î ¼öÁ¤
//				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.5.5", phone_11, 3);	// OctetString
//				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.7.5", "*", 3);		// OctetString
//				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.8.5", "*", 3);		// OctetString
//				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.6.5", "2", 2);		// UnsignedInteger
//				routingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.1.2.20.2.1.9.5", "0", 2);		// UnsignedInteger
//			}

			// ====================================================================================================

			trunkGroupSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.10.3.1.1.4.0", "1", 2);				// Burn OID
			
			// ############### LogHistory Ã³¸®  ###############
			String		strIp		= req.getRemoteAddr();
			LogHistory	logHistory 	= new LogHistory();
			int int_result = logHistory.LogHistorySave(userID+"|87|Æ÷Æ®¹øÈ£ µî·Ï|1|"+strIp);
			// ##############################################

			res.sendRedirect("/bizportal/gateway/"+resStr);
		
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {

		}		
		return forwardingPage;
	}
}
