package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import acromate.ConnectionManager;
import acromate.common.StaticString;
import business.LogHistory;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
import dto.system.RouteMonitorDTO;
import dao.system.RouteMonitorDAO;

public class RouteMonitorEditCommand implements Command {
	public String execute(HttpServletRequest req, HttpServletResponse res) {
		DataStatement 	stmt 			= null;
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";
		try {
			String 	endpointID 	= new String(Str.CheckNullString(req.getParameter("hiEndpointID")).getBytes("8859_1"), "euc-kr");	// 루트 ID
			String 	subID 		= new String(Str.CheckNullString(req.getParameter("hiSubID")).getBytes("8859_1"), "euc-kr");		// 레지스트라 ID 
			String 	checkMode 	= new String(Str.CheckNullString(req.getParameter("hiCheckMode")).getBytes("8859_1"), "euc-kr");	// 상태체크유형
			String 	fromNumber 	= new String(Str.CheckNullString(req.getParameter("hiFromNumber")).getBytes("8859_1"), "euc-kr");	// 시작번호
			String 	toNumber 	= new String(Str.CheckNullString(req.getParameter("hiToNumber")).getBytes("8859_1"), "euc-kr");		// 끝번호 
			String 	messageType = new String(Str.CheckNullString(req.getParameter("hiMessageType")).getBytes("8859_1"), "euc-kr");	// 메세지유형
			
			String 	userID		= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// 로그인 ID
			
			resStr = "rootMonitorList.jsp";

			SessionManager manager = SessionManager.getInstance();
			if (manager.isLogin(req)) {
				HttpSession hs = req.getSession();
				String id = hs.getId();
				BaseEntity entity = manager.getBaseEntity(id);	
				
				RouteMonitorDTO dto = new RouteMonitorDTO();
				dto.setEndpointid(endpointID);
				dto.setSubid(subID);
				dto.setCheckmode(Integer.parseInt(checkMode));
				dto.setFromnumber(fromNumber);
				dto.setTonumber(toNumber);
				dto.setMessagetype(Integer.parseInt(messageType));
				
				stmt = ConnectionManager.allocStatement("SSW");
								
				RouteMonitorDAO dao = new RouteMonitorDAO();
				int insertResult = dao.update(stmt,dto);
				
				// CallBox 이원화 ============================
				if("Pri_CSCF".equals(endpointID)){
					dto.setEndpointid("Sec_CSCF");
					dto.setSubid("Sec_CSCF");
					int insertResult2 = dao.update(stmt,dto);
				}else if("Sec_CSCF".equals(endpointID)){
					dto.setEndpointid("Pri_CSCF");
					dto.setSubid("Pri_CSCF");
					int insertResult3 = dao.update(stmt,dto);
				}
				// =========================================
				
				// ############### LogHistory 처리  ###############
				String		strIp		= req.getRemoteAddr();
				LogHistory	logHistory 	= new LogHistory();
				int int_result = logHistory.LogHistorySave(userID+"|86|루트 모니터 ("+endpointID+")|3|"+strIp);
				// ##############################################
				
				res.sendRedirect("/bizportal/system/"+resStr);
			} 
			else
				res.sendRedirect("/bizportal/"+resStr+"?session=0");
		
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {
			//할당받은 DataStatement 객체는 반납
			if (stmt != null ) ConnectionManager.freeStatement(stmt);
		}		
		return forwardingPage;
	}
}
