package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import acromate.common.util.WebUtil;
import acromate.ConnectionManager;
import acromate.common.StaticString;
import business.LogHistory;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
import dto.system.SIPRegServerDTO;
import dto.system.SystemConfigDTO;
import system.SystemConfigFileMake;
import framework.url.Urldownload;
import dao.system.CommonDAO;
import java.util.ArrayList;
import java.util.HashMap;
import system.SystemInfoList;
import gateway.AutomaticDialingSNMP;

import system.SystemConfigSet;
import framework.Shell.LinuxShell;

public class SystemFileSave_HybridCommand implements Command {
	private int nEmergency;
	public String execute(HttpServletRequest req, HttpServletResponse res) {
//		DataStatement 	stmt 			= null;
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";

		// 서버로부터 DataStatement 객체를 할당
//		DataStatement 	stmt 		=	ConnectionManager.allocStatement("SSW");

		try {
			String 	wanName		= new String(Str.CheckNullString(req.getParameter("hiWanName")).getBytes("8859_1"), "euc-kr");		// prefix 종류 
			String 	lanName 	= new String(Str.CheckNullString(req.getParameter("hiLanName")).getBytes("8859_1"), "euc-kr");		// 시작 prefix
//			String 	selectWan	= new String(Str.CheckNullString(req.getParameter("hiSelectWan")).getBytes("8859_1"), "euc-kr");	// 1 : 유동 IP, 2 : 고정 IP
			String 	wanId 		= new String(Str.CheckNullString(req.getParameter("hiWanId")).getBytes("8859_1"), "euc-kr");		// 가입자 Id
			String 	wanIp 		= new String(Str.CheckNullString(req.getParameter("hiWanIp")).getBytes("8859_1"), "euc-kr");		// 외부 IP			
			String 	oldWanIp	= new String(Str.CheckNullString(req.getParameter("hiOldWanIp")).getBytes("8859_1"), "euc-kr");		// 변경전 외부 IP
			String 	wanMask 	= new String(Str.CheckNullString(req.getParameter("hiWanMask")).getBytes("8859_1"), "euc-kr");		// 외부 서브넷마스크
			String 	wanGateway 	= new String(Str.CheckNullString(req.getParameter("hiWanGateway")).getBytes("8859_1"), "euc-kr");	// 게이트웨이
			String 	wanMac 		= new String(Str.CheckNullString(req.getParameter("hiWanMac")).getBytes("8859_1"), "euc-kr");		// 외부 Mac 
			String 	wanDns 		= new String(Str.CheckNullString(req.getParameter("hiWanDns")).getBytes("8859_1"), "euc-kr");		// 외부 Dns
			String 	selectLan	= new String(Str.CheckNullString(req.getParameter("hiSelectLan")).getBytes("8859_1"), "euc-kr");	// 1 : DHCP 사용함, 2 : DHCP 사용안함
			String 	lanIp 		= new String(Str.CheckNullString(req.getParameter("hiLanIp")).getBytes("8859_1"), "euc-kr");		// 내부 IP
			String 	oldLanIp 	= new String(Str.CheckNullString(req.getParameter("hiOldLanIp")).getBytes("8859_1"), "euc-kr");		// 변경전 내부 IP
			String 	startIp 	= new String(Str.CheckNullString(req.getParameter("hiStartIp")).getBytes("8859_1"), "euc-kr");		// 시작IP
			String 	endIp 		= new String(Str.CheckNullString(req.getParameter("hiEndIp")).getBytes("8859_1"), "euc-kr");		// 종료IP
			String 	timeTemp 	= new String(Str.CheckNullString(req.getParameter("hiTimeTemp")).getBytes("8859_1"), "euc-kr");		// 갱신주기
			String 	lanMask 	= new String(Str.CheckNullString(req.getParameter("hiLanMask")).getBytes("8859_1"), "euc-kr");		// 내부 서브넷마스크
			String 	lanDns 		= new String(Str.CheckNullString(req.getParameter("hiLanDns")).getBytes("8859_1"), "euc-kr");		// 내부 Dns			
//			int		ipCycle		= Integer.parseInt(timeTemp)*8640;																	// IP 갱신주기
						
			String 	readWanIp	= new String(Str.CheckNullString(req.getParameter("hiReadWanIp")).getBytes("8859_1"), "euc-kr");	// 파일에서 읽은 외부 IP
			String 	strDomain 	= new String(Str.CheckNullString(req.getParameter("hiDomainid")).getBytes("8859_1"), "euc-kr");		// 도메인
			int		domainCheck = 0;
			
			String 	userID		= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// 로그인 ID
			
			String 	dhcpUseChk	= new String(Str.CheckNullString(req.getParameter("hiDhcpUseChk")).getBytes("8859_1"), "euc-kr");		// 
			//String 	dhcpTypeChk	= new String(Str.CheckNullString(req.getParameter("hiDhcpTypeChk")).getBytes("8859_1"), "euc-kr");	// LAN DHCP 사용("lan gw":사용함, "gw":미사용)
			String 	loopChk		= new String(Str.CheckNullString(req.getParameter("hiLoopChk")).getBytes("8859_1"), "euc-kr");			// 
			
			String 	goodsName_Type	= new String(req.getParameter("hiGoodsName").getBytes("8859_1"), "euc-kr");							// 제품명(모델명)
			
			int 	insertResult= 0;
			
//			System.out.println("DB 도메인 : "+strDomain);
//			System.out.println("입력한 도메인 : "+wanId);
			System.out.println("내부 DHCP 사용 유무 1 : "+selectLan);
			
			// 서버로부터 DataStatement 객체를 할당
			DataStatement 	stmt 		=	ConnectionManager.allocStatement("SSW");
			
			if("".equals(strDomain)&&!"".equals(wanId)){
				// 최초 사용자ID 저장하는 경우
				CommonDAO	commonDao		=	new CommonDAO();
				String commonSql			=	"select keyname,valueinfo from table_updateenv where envname='ddnsserver'";
				String strColNames[]		=	{"keyname","valueinfo"};
				ArrayList envList			=	commonDao.select(stmt,commonSql,strColNames);
				String updateServerip="203.242.63.62";
				if(envList!=null && envList.size()!=0){
					for(int i=0;i<envList.size();i++){
						HashMap temp	=	(HashMap)envList.get(i);
						if(temp!=null){
							String tempurl	=	(String)temp.get("valueinfo");
							if(tempurl != null)	updateServerip=tempurl;
						}
					}
				}
				//할당받은 DataStatement 객체는 반납
				if (stmt != null ) ConnectionManager.freeStatement(stmt);				
				
				Urldownload	urldwn			=	new Urldownload();
				String verTmp				=	urldwn.toString("http://"+updateServerip+"/sems/domainCheck.jsp?hiDomain="+wanId+".callbox.kt.com");				
				String verInfo = verTmp.trim();
				//System.out.println("도메인 중복체크 했음...: "+verInfo);
				
				if("OK".equals(verInfo)){
					// 사용가능한 도메인
					//resStr = "systemConfigSet.jsp";
					resStr = "systemConfigSet_Hybrid.jsp";
					
					SystemConfigDTO dto = new SystemConfigDTO();
					dto.setWanName(wanName);
					dto.setLanName(lanName);
					dto.setWanId(wanId);
					dto.setWanIp(wanIp);
					dto.setOldWanIp(oldWanIp);
					dto.setWanMask(wanMask);
					dto.setWanGateway(wanGateway);
					dto.setWanMac(wanMac);
					dto.setWanDns(wanDns);
					dto.setSelectLan(selectLan);
					dto.setLanIp(lanIp);
					dto.setOldLanIp(oldLanIp);
					dto.setStartIp(startIp);
					dto.setEndIp(endIp);
//					dto.setTimeCycle(Integer.toString(ipCycle));
					dto.setLanMask(lanMask);
					dto.setLanDns(lanDns);
					dto.setReadWanIp(readWanIp);
					
					SystemConfigFileMake makeFile = new SystemConfigFileMake();
					
					// 2012.05.02 방화벽 관련 해서 같이 수정 =================================
					insertResult = makeFile.makeFile_Hybrid_20120502(dto, loopChk, goodsName_Type);
					// ================================================================
					
					// HYBRID 장비인지 체크 후 CallBox IP SNMP ##################################################
					// 서버로부터 DataStatement 객체를 할당
					DataStatement 	stmt2 		=	ConnectionManager.allocStatement("SSW");

					SystemInfoList 	systemInfoList 	= new SystemInfoList();
					int				gatewayChk		= systemInfoList.chkGateway(stmt2);
					
					//if(gatewayChk>0){
					if("ACRO-HCBS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){		// ####### 제품명(모델명)이 "오디오코드 하이브리드" 이면 SNMP 통신  #######
						String 		commonSql2		= "select keyname,valueinfo from table_updateenv where envname='audiocodes'";
						String 		strColNames2[]	= {"keyname","valueinfo"};
						ArrayList 	envList2		= commonDao.select(stmt2,commonSql2,strColNames2);
						String 		snmp_Ip			= "10.0.0.2";
						if(envList2!=null && envList2.size()!=0){
							for(int i=0;i<envList2.size();i++){
								HashMap temp	=	(HashMap)envList2.get(i);
								if(temp!=null){
									String tempurl	=	(String)temp.get("valueinfo");
									if(tempurl != null)	snmp_Ip = tempurl;
								}
							}
						}
						
						//snmp_Ip = "203.242.63.71";
						
						AutomaticDialingSNMP automaticDialingSNMP = new AutomaticDialingSNMP();

						String chk_getSNMP = automaticDialingSNMP.getCkeckSNMP(snmp_Ip);
						if("".equals(chk_getSNMP)){
							automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.5.0", wanIp, 4);		//
						}else{
							automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.5.0", wanIp, 5);		//
						}
						System.out.println("MP-500 IP Chk Result : "+chk_getSNMP);
						automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.10.3.1.1.4.0", "1", 2);				// Burn OID
					}
					//할당받은 DataStatement 객체는 반납
					if (stmt2 != null ) ConnectionManager.freeStatement(stmt2);				
					// #####################################################################################
					
					if(insertResult==1){
						// ############### LogHistory 처리  #############
						String		strIp		= req.getRemoteAddr();
						LogHistory	logHistory 	= new LogHistory();
						int int_result = logHistory.LogHistorySave(userID+"|86|시스템 환경설정 (IP)수정 (IP:"+wanIp+")|3|"+strIp);
						// ############################################

			        	// 유닉스 장비이면 리브팅  (2012.08.14  cmd 에서 reboot 하게 수정) #########
						SystemConfigSet systemConfig 	= new SystemConfigSet();
						LinuxShell 		linuxShell 		= new LinuxShell();

						String osType3 = systemConfig.osChk();
			        	if("uix".equals(osType3)){
			        		//linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
			        		resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes2&ptype=1";
			        	}else{
			        		resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes2&ptype=2";
			        	}
			        	// ################################################################
			        	
						//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes2";
						//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes2&ptype=2";
						
			        	res.sendRedirect("/bizportal/system/"+resStr);
					}else{
						res.sendRedirect("/bizportal/errorMessage.jsp");
					}
				}else if("NO".equals(verInfo)){
					// 이미 사용중인 도메인
					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=no";
					resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=no&ptype=2";
					res.sendRedirect("/bizportal/system/"+resStr);
				}else{
					// 네트웍크 장애
					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=error";
					resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=error&ptype=2";
					res.sendRedirect("/bizportal/system/"+resStr);				
				}
			}else{
				// 이미 사용자ID가 저장되어 있는 경우
				resStr = "systemConfigSet_Hybrid.jsp";
				
				SystemConfigDTO dto = new SystemConfigDTO();
				dto.setWanName(wanName);
				dto.setLanName(lanName);
				dto.setWanId(wanId);
				dto.setWanIp(wanIp);
				dto.setOldWanIp(oldWanIp);
				dto.setWanMask(wanMask);
				dto.setWanGateway(wanGateway);
				dto.setWanMac(wanMac);
				dto.setWanDns(wanDns);
				dto.setSelectLan(selectLan);
				dto.setLanIp(lanIp);
				dto.setOldLanIp(oldLanIp);
				dto.setStartIp(startIp);
				dto.setEndIp(endIp);
//				dto.setTimeCycle(Integer.toString(ipCycle));
				dto.setLanMask(lanMask);
				dto.setLanDns(lanDns);
				dto.setReadWanIp(readWanIp);
				
				SystemConfigFileMake makeFile = new SystemConfigFileMake();
				
				// 2012.05.02 방화벽 관련 해서 같이 수정 =================================
				insertResult = makeFile.makeFile_Hybrid_20120502(dto, loopChk, goodsName_Type);
				// ================================================================
				
				// HYBRID 장비인지 체크 후 CallBox IP SNMP ##################################################
				// 서버로부터 DataStatement 객체를 할당
				DataStatement 	stmt2 		=	ConnectionManager.allocStatement("SSW");

				SystemInfoList 	systemInfoList 	= new SystemInfoList();
				int				gatewayChk		= systemInfoList.chkGateway(stmt2);
				
				//if(gatewayChk>0){
				if("ACRO-HCBS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){		// ####### 제품명(모델명)이 "오디오코드 하이브리드" 이면 SNMP 통신  #######
					CommonDAO	commonDao		=	new CommonDAO();
					String 		commonSql2		= "select keyname,valueinfo from table_updateenv where envname='audiocodes'";
					String 		strColNames2[]	= {"keyname","valueinfo"};
					ArrayList 	envList2		= commonDao.select(stmt2,commonSql2,strColNames2);
					String 		snmp_Ip			= "10.0.0.2";
					if(envList2!=null && envList2.size()!=0){
						for(int i=0;i<envList2.size();i++){
							HashMap temp	=	(HashMap)envList2.get(i);
							if(temp!=null){
								String tempurl	=	(String)temp.get("valueinfo");
								if(tempurl != null)	snmp_Ip = tempurl;
							}
						}
					}
					
					//snmp_Ip = "203.242.63.71";
					
					AutomaticDialingSNMP automaticDialingSNMP = new AutomaticDialingSNMP();
					
					String chk_getSNMP = automaticDialingSNMP.getCkeckSNMP(snmp_Ip);
					if("".equals(chk_getSNMP)){
						automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.5.0", wanIp, 4);		//
					}else{
						automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.2.1.21.1.5.0", wanIp, 5);		//
					}
					System.out.println("MP-500 IP Chk Result : "+chk_getSNMP);
					automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.10.3.1.1.4.0", "1", 2);				// Burn OID
				}
				//할당받은 DataStatement 객체는 반납
				if (stmt2 != null ) ConnectionManager.freeStatement(stmt2);				
				// #####################################################################################
				
				if(insertResult==1){
					// ############### LogHistory 처리  #############
					String		strIp		= req.getRemoteAddr();
					LogHistory	logHistory 	= new LogHistory();
					int int_result = logHistory.LogHistorySave(userID+"|86|시스템 환경설정 (IP)수정 (IP:"+wanIp+")|3|"+strIp);
					// ############################################

		        	// 유닉스 장비이면 리브팅  (2012.08.14  cmd 에서 reboot 하게 수정) #########
					SystemConfigSet systemConfig 	= new SystemConfigSet();
					LinuxShell 		linuxShell 		= new LinuxShell();

					String osType3 = systemConfig.osChk();
		        	if("uix".equals(osType3)){
		        		//linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
		        		resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=success&ptype=1";
		        	}else{
		        		resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=success&ptype=2";
		        	}
		        	// ################################################################

					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=success";
					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=success&ptype=2";
					
		        	res.sendRedirect("/bizportal/system/"+resStr);
				}else{
					res.sendRedirect("/bizportal/errorMessage.jsp");
				}
			}
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {
			//할당받은 DataStatement 객체는 반납
//			if (stmt != null ) ConnectionManager.freeStatement(stmt);
		}		
		return forwardingPage;
	}
	
	
}
