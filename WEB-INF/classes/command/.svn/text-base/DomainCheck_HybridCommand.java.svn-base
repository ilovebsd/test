package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import acromate.common.util.WebUtil;
import acromate.ConnectionManager;
import acromate.common.StaticString;
import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
import dto.system.SIPRegServerDTO;
import dto.system.SystemConfigDTO;
import system.SystemConfigFileMake;
import system.SystemConfigSet;
import framework.url.Urldownload;
import dao.system.CommonDAO;
import java.util.ArrayList;
import java.util.HashMap;
import system.SystemInfoList;
import gateway.AutomaticDialingSNMP;

import framework.Shell.LinuxShell;

import business.LogHistory;
	
public class DomainCheck_HybridCommand implements Command {
	private int nEmergency;
	public String execute(HttpServletRequest req, HttpServletResponse res) {
//		DataStatement 	stmt 			= null;
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";

		try {
			String 	wanId 			= new String(Str.CheckNullString(req.getParameter("hiWanId")).getBytes("8859_1"), "euc-kr");		// 가입자 Id
			String 	wanIp 			= new String(Str.CheckNullString(req.getParameter("hiWanIp")).getBytes("8859_1"), "euc-kr");		// WanIp
			
			String 	userID			= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// 로그인 ID
			String 	goodsName_Type	= new String(req.getParameter("hiGoodsName").getBytes("8859_1"), "euc-kr");		// 제품명(모델명)
			
			int		domainCheck = 0;
			
			// 서버로부터 DataStatement 객체를 할당
			DataStatement 	stmt 		=	ConnectionManager.allocStatement("SSW");
			
			// 최초 사용자ID 저장하는 경우
			CommonDAO	commonDao		=	new CommonDAO();
			String commonSql			=	"select keyname,valueinfo from table_updateenv where envname='ddnsserver'";
			String strColNames[]		=	{"keyname","valueinfo"};
			ArrayList envList			=	commonDao.select(stmt,commonSql,strColNames);
			String updateServerip="203.242.63.62";
			if(envList!=null && envList.size()!=0){
				for(int i=0;i<envList.size();i++){
					HashMap temp	=	(HashMap)envList.get(i);
					if(temp!=null){
						String tempurl	=	(String)temp.get("valueinfo");
						if(tempurl != null)	updateServerip=tempurl;
					}
				}
			}
			//할당받은 DataStatement 객체는 반납
			if (stmt != null ) ConnectionManager.freeStatement(stmt);				
			
			Urldownload	urldwn			=	new Urldownload();
			String verTmp				=	urldwn.toString("http://"+updateServerip+"/sems/domainCheck.jsp?hiDomain="+wanId+".callbox.kt.com");				
			String verInfo = verTmp.trim();
			
			System.out.println("################### User ID Duplication Check URL --> " +"http://"+updateServerip+"/sems/domainCheck.jsp?hiDomain="+wanId+".callbox.kt.com" );
			System.out.println("################### User ID Duplication Check Result --> " +verInfo );
			
			if("OK".equals(verInfo)){
				// 사용가능한 도메인
				//resStr = "systemConfigSet.jsp";
				resStr = "systemConfigSet_Hybrid.jsp";
				
				SystemConfigDTO dto = new SystemConfigDTO();
				dto.setWanId(wanId);
				dto.setWanIp(wanIp);
				
				SystemConfigFileMake makeFile = new SystemConfigFileMake();
				int insertResult = makeFile.makeDomain(dto);
				
				// HYBRID 장비인지 체크 후 도메인 SNMP --------------------------------------------------
				// 서버로부터 DataStatement 객체를 할당
				DataStatement 	stmt2 		=	ConnectionManager.allocStatement("SSW");

				SystemInfoList 	systemInfoList 	= new SystemInfoList();
				int				gatewayChk		= systemInfoList.chkGateway(stmt2);
	            
				//if(gatewayChk>0){
				if("ACRO-HCBS".equals(goodsName_Type)||"ACRO-HCBS-IMS".equals(goodsName_Type)){								// ####### 제품명(모델명)이 "오디오코드 하이브리드" 이면 SNMP 통신  #######
				
					String domain = wanId + ".callbox.kt.com";

					String 			commonSql2		= "select keyname,valueinfo from table_updateenv where envname='audiocodes'";
					String 			strColNames2[]	= {"keyname","valueinfo"};
					ArrayList 		envList2			= commonDao.select(stmt2,commonSql2,strColNames2);
					String 			snmp_Ip			= "10.0.0.2";
					if(envList2!=null && envList2.size()!=0){
						for(int i=0;i<envList2.size();i++){
							HashMap temp	=	(HashMap)envList2.get(i);
							if(temp!=null){
								String tempurl	=	(String)temp.get("valueinfo");
								if(tempurl != null)	snmp_Ip = tempurl;
							}
						}
					}
					
					//snmp_Ip = "203.242.63.71";
					
					AutomaticDialingSNMP automaticDialingSNMP = new AutomaticDialingSNMP();
					automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.3.1.2.7.4.0", domain, 3);		// OctetString
					automaticDialingSNMP.snmpSet(snmp_Ip, "private", "1.3.6.1.4.1.5003.9.10.10.3.1.1.4.0", "1", 2);			// Burn OID
					
		        	// 유닉스 장비이면 리브팅
					SystemConfigSet systemConfig 	= new SystemConfigSet();
					LinuxShell 		linuxShell 		= new LinuxShell();
					
					String osType3 = systemConfig.osChk();
		        	//if("uix".equals(osType3)) linuxShell.runShell("/data/acromate_home/acroBackup/acro_reboot.sh");
					
					if("uix".equals(osType3)){ 
						//linuxShell.runShell("/data/acromate_home/script/ipcs_reboot");
						resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes&ptype=1";
					}else{
						resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes&ptype=2";
					}
		        	
				}else{
					resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes&ptype=2";
				}
				//할당받은 DataStatement 객체는 반납
				if (stmt2 != null ) ConnectionManager.freeStatement(stmt2);				
				// ----------------------------------------------------------------------------
				
				if(insertResult==1){
					// ############### LogHistory 처리  #############
					String		strIp		= req.getRemoteAddr();
					LogHistory	logHistory 	= new LogHistory();
					int int_result = logHistory.LogHistorySave(userID+"|86|시스템 환경설정 (ID)등록 (ID:"+wanId+")|1|"+strIp);
					// ##############################################

					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes";
					//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=yes&ptype=2";
					
					res.sendRedirect("/bizportal/system/"+resStr);
				}else{
					res.sendRedirect("/bizportal/errorMessage.jsp");
				}
			}else if("NO".equals(verInfo)){
				// 이미 사용중인 도메인
				//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=no";
				resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=no&ptype=2";
				res.sendRedirect("/bizportal/system/"+resStr);
			}else{
				// 네트웍크 장애
				//resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=error";
				resStr = "systemConfigSet_Hybrid.jsp?hiDomainChk=error&ptype=2";
				res.sendRedirect("/bizportal/system/"+resStr);				
			}
				
		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {
			//할당받은 DataStatement 객체는 반납
//			if (stmt != null ) ConnectionManager.freeStatement(stmt);
		}		
		return forwardingPage;
	}
	
	
}
