package command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import acromate.common.util.WebUtil;
import acromate.ConnectionManager;
import acromate.common.StaticString;
import business.LogHistory;

import com.acromate.driver.db.DataStatement;
import com.acromate.util.Str;
import waf.BaseEntity;
import waf.SessionManager;
import webuser.ServerLogin;
//import dto.system.SIPRegServerDTO;
//import dto.system.GatewayConfigDTO;
import system.SystemConfigFileMake;
import framework.url.Urldownload;
//import dao.system.CommonDAO;
import java.util.ArrayList;
import java.util.HashMap;

import system.SystemConfigSet;
import framework.Shell.LinuxShell;
//import gateway.AutomaticDialingSNMP;

public class GatewayResetCommand implements Command {
	private int nEmergency;
	public String execute(HttpServletRequest req, HttpServletResponse res) {
		String 			forwardingPage 	= "";				
		String 			resStr 			= "";

		SystemConfigSet systemConfig 	= new SystemConfigSet();
		LinuxShell 		linuxShell 		= new LinuxShell();
		String 			osType 			= "";
		String 			strCommand		= "";
		
		try {
			String	type		= new String(Str.CheckNullString(req.getParameter("hiTypeNumber")).getBytes("8859_1"), "euc-kr");
			String	channelNo	= new String(Str.CheckNullString(req.getParameter("hiChannelNumber")).getBytes("8859_1"), "euc-kr");
			
			String 	userID		= new String(req.getParameter("hiUserID").getBytes("8859_1"), "euc-kr");		// 로그인 ID
			
			int insertResult= 0;
			
			resStr = "channelMonitoring.jsp";
			
			if(type.equals("slote")){
				// 해당  Slot만 ReSet 
				insertResult = 1;
				strCommand 	 = "/data/acromate_home/script/acroua_reboot_slave"+" "+channelNo;
				System.out.println("########### strCommand : "+strCommand);
			}else if(type.equals("all")){
				// 모든  Slot을 ReSet
				insertResult = 1;
				strCommand 	 = "/data/acromate_home/script/acroua_reboot_slave_all";
				System.out.println("########### strCommand : "+strCommand);
			}else{
				// 해당 Slot의 해당 채널만 ReSet
				int n = Integer.parseInt(channelNo);
				
				insertResult = 1;
				switch (n){
					case 0:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 0 0";
						break;
					case 1:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 1 0";
						break;
					case 2:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 2 0";
						break;
					case 3:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 3 0";
						break;
					case 4:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 0 1";
						break;
					case 5:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 1 1";
						break;
					case 6:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 2 1";
						break;
					case 7:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 3 1";
						break;
					case 8:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 0 2";
						break;
					case 9:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 1 2";
						break;
					case 10:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 2 2";
						break;
					case 11:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 3 2";
						break;
					case 12:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 0 3";
						break;
					case 13:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 1 3";
						break;
					case 14:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 2 3";
						break;
					case 15:
						strCommand = "/data/acromate_home/script/acroua_reset_channel 3 3";
						break;
					default:
						insertResult = 0;
						break;
				}
			}
			
        	// 유닉스 장비이면 실행
        	osType = systemConfig.osChk();
        	if("uix".equals(osType)){ 
        		linuxShell.runShell(strCommand);
        		System.out.println("########### unix strCommand : "+strCommand);
        	}else{
        		System.out.println("########### windows strCommand : "+strCommand);
        	}
        	
        	System.out.println("########### insertResult : "+insertResult);
			if(insertResult==1){
				// ############### LogHistory 처리  ###############
				String		strIp		= req.getRemoteAddr();
				LogHistory	logHistory 	= new LogHistory();
				
				if(type.equals("slote")){
					int int_result = logHistory.LogHistorySave(userID+"|87|채널 모니터링("+channelNo+"번 Slot Reset)|1|"+strIp);
				}else if(type.equals("all")){
					int int_result = logHistory.LogHistorySave(userID+"|87|채널 모니터링(모든 Slot Reset)|1|"+strIp);
				}else{
					int int_result = logHistory.LogHistorySave(userID+"|87|채널 모니터링(채널 Reset)|1|"+strIp);
				}
				// ##############################################
				
				res.sendRedirect("/bizportal/newGateway/"+resStr);
			}else{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			}

		} catch (Exception e) {
			try{
				res.sendRedirect("/bizportal/errorMessage.jsp");
			} catch (Exception ee) {
			}
			e.printStackTrace();
		} finally {

		}		
		return forwardingPage;
	}
	
	
}
