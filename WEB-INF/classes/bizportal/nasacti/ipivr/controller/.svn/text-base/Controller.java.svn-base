package bizportal.nasacti.ipivr.controller;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import bizportal.nasacti.ipivr.action.*;
import javax.servlet.ServletContext;
import bizportal.nasacti.ipivr.common.IpivrConfig;


public class Controller extends HttpServlet {
	//private static final String CONTENT_TYPE = "text/html; charset=EUC-KR";
	private Map commandMap = new HashMap();
	private IpivrConfig ipivrConfig;
	//Initialize global variables
	//public void init() throws ServletException {
	//}

	public void init(ServletConfig config) throws ServletException {
		super.init(config);

		ipivrConfig = IpivrConfig.getInstance();
		System.out.println("IPIVR 컨트롤러의 초기화를 시작합니다.");

		ServletContext con = this.getServletContext();

		ipivrConfig.strRealPath = con.getRealPath("");

		ipivrConfig.maxUploadSize = Integer.parseInt(config.getInitParameter("MaxUploadSize-MB"));              // 최대 업로드 사이즈
		ipivrConfig.strAnCodePath = config.getInitParameter("AnCodePath");                                      // Ancode 파일 경로
		ipivrConfig.strFileMentPath = config.getInitParameter("FileMentPath");                                  // Filement 파일 경로
		ipivrConfig.strResponseModeKey = config.getInitParameter("ResponseModeKey");                            // Normal IPCS 초기 응답모드 키값
		ipivrConfig.strKeyActionVisibleType = config.getInitParameter("KeyActionVisibleType");                  // Normal IPCS의 음성안내번호 관리의 초기 응답모드 설정에서의 Key Action을 보여주는 정도를 설정한다.  -  1: 일부 보여줌(Moniter Transfer, Goto Code, Undefined), 2: 전부 보여줌
		String strProps = ipivrConfig.strRealPath + "/WEB-INF/" + config.getInitParameter("CommandProperty");
		Properties pr = new Properties();

		FileInputStream f = null;
		try {
			f = new FileInputStream(strProps);
			pr.load(f);
		} catch(IOException ioe) {
			throw new ServletException(ioe);
		} finally {
			if(f != null) {
				try {
					f.close();
				} catch (IOException ie) {
				}
			}
		}

		Iterator keyIter = pr.keySet().iterator();

		while(keyIter.hasNext()) {
			String strCommand = (String)keyIter.next();
			String strClassName = pr.getProperty(strCommand);

			try {
				Class commandClass = Class.forName(strClassName);
				Object commandInstance = commandClass.newInstance();
				commandMap.put(strCommand, commandInstance);
				System.out.println("Action 클래스를 로딩 - Command: " + strCommand + " , Class Name:" + strClassName);
			} catch(ClassNotFoundException cnfe) {
				System.out.println("Action 클래스를 로딩에러! - Command: " + strCommand + " , Class Name:" + strClassName);
				throw new ServletException(cnfe);
			} catch(InstantiationException ie) {
				System.out.println("Action 클래스를 로딩에러! - Command: " + strCommand + " , Class Name:" + strClassName);
				throw new ServletException(ie);
			} catch(IllegalAccessException iae) {
				System.out.println("Action 클래스를 로딩에러! - Command: " + strCommand + " , Class Name:" + strClassName);
				throw new ServletException(iae);
			}
		}   // End of while
		System.out.println("IPIVR 컨트롤러의 초기화를 완료했습니다.");
	}   // End of init(ServletConfig config)

	//Process the HTTP Get request
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws
		ServletException, IOException {
		requestProc(request, response);
	}

	//Process the HTTP Post request
	public void doPost(HttpServletRequest request, HttpServletResponse response) throws
		ServletException, IOException {
		requestProc(request, response);
	}

	private void requestProc(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String strView = null;
		CommandAction com = null;
		HttpSession session = null;
		session = request.getSession(false);
		try {
			String strCommand = request.getRequestURI();
			if (strCommand.indexOf(request.getContextPath()) == 0) {
				strCommand = strCommand.substring(request.getContextPath().length()+1);
			}
			System.out.println("\nCommand: " + strCommand);
			if(true){
			//if(this.checkSession(session)){
				com = (CommandAction) commandMap.get(strCommand);
				strView = com.requestProc(request, response, this.ipivrConfig);
			} else {
				strView = "/index.jsp";
			}
		} catch (Throwable t) {
			throw new ServletException(t);
		}
		System.out.println("View: " + strView);
		RequestDispatcher rd = request.getRequestDispatcher(strView);

		rd.forward(request, response);
	}

	public boolean checkSession(HttpSession session) {
		String strAgentId = "";
		try{   // 로긴했을경우
			strAgentId = session.getAttribute("agentId").toString();
			return true;
		} catch(NullPointerException ne) {
			return false;
		}
	}

	//Clean up resources
	public void destroy() {
	}
}
