package bizportal.nasacti.ipivr.dao;

import java.sql.*;
import java.util.*;
import bizportal.nasacti.ipivr.DBPoolConnector;
import bizportal.nasacti.ipivr.dto.ResponseModeDTO;

public class ResponseModeDAO extends DBPoolConnector {
	public static final int IVR = 1;
	public static final int SERVICE = 2;
	public static final int IVR_SERVICE = 3;
	public static final int ACTIVE_IVR = 4;
	public static final int ACTIVE_SERVICE = 5;
	public static final int ACTIVE_IVR_SERVICE = 6;


	private static ResponseModeDAO instance = new ResponseModeDAO();

	public static ResponseModeDAO getInstance() {
		return instance;
	}

	private ResponseModeDAO() {

	}

	public int doNotUseResponseMode(String strScCode) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb.append("UPDATE nasa_callprocessor         \n");
			sb.append("SET sc_use = 'N'                  \n");
			sb.append("WHERE sc_code = ?                 \n");


			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1, Integer.parseInt(strScCode));

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) iRtn = 1;


		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;
	}

	public int deleteResponseMode(String strScCode) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		StringBuffer sb1 = new StringBuffer();
		PreparedStatement pstmt2 = null;
		StringBuffer sb2 = new StringBuffer();
		ResultSet rs = null;


		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb2.append("select count(*) from nasa_answer_time where at_sc_code = ?");

			pstmt2 = cn.prepareStatement(sb2.toString());

			pstmt2.setInt(1,Integer.parseInt(strScCode));

			rs = pstmt2.executeQuery();
			if(rs.next()) {
				if(rs.getInt(1) == 0) {

					sb1.append("DELETE FROM nasa_callprocessor         \n");
					sb1.append("WHERE sc_code = ?                      \n");

					pstmt1 = cn.prepareStatement(sb1.toString());

					pstmt1.setInt(1, Integer.parseInt(strScCode));

					iRtnCnt = pstmt1.executeUpdate();

					if(iRtnCnt > 0) iRtn = 1;
				} else {
					iRtn = 2;
				}
			}


		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;
	}

	public int updateVoiceFile(String strScCode, String strScVoiceFile) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();
			sb.append("UPDATE nasa_callprocessor SET      \n");
			sb.append("sc_voicefile = ?                   \n");
			sb.append("WHERE sc_code = ?                    ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setString(1, strScVoiceFile);
			pstmt.setInt(2, Integer.parseInt(strScCode));

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) iRtn = 1;

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public int updateResponseMode(ResponseModeDTO rmDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;

		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		int iRtn = -1;

		try {
			cn = this.getConnection();
			sb1.append("UPDATE nasa_callprocessor SET      \n");
			sb1.append("sc_name = ?,                       \n");
			sb1.append("sc_sponsor = ?,                    \n");
			sb1.append("sc_nextbox = ?,                    \n");
			sb1.append("sc_hour = ?,                       \n");
			sb1.append("sc_makecall_time = ?,              \n");
			sb1.append("sc_lang = ?,                       \n");
			sb1.append("sc_logcheck = ?,                   \n");
			sb1.append("sc_again = ?,                      \n");
			sb1.append("sc_keyto = ?,                      \n");
			sb1.append("sc_key0 = ?,                       \n");
			sb1.append("sc_key1 = ?,                       \n");
			sb1.append("sc_key2 = ?,                       \n");
			sb1.append("sc_key3 = ?,                       \n");
			sb1.append("sc_key4 = ?,                       \n");
			sb1.append("sc_key5 = ?,                       \n");
			sb1.append("sc_key6 = ?,                       \n");
			sb1.append("sc_key7 = ?,                       \n");
			sb1.append("sc_key8 = ?,                       \n");
			sb1.append("sc_key9 = ?,                       \n");
			sb1.append("sc_keyas = ?,                      \n");
			sb1.append("sc_keysh = ?,                      \n");
			sb1.append("sc_keya = ?,                       \n");
			sb1.append("sc_keyb = ?,                       \n");
			sb1.append("sc_keyc = ?,                       \n");
			sb1.append("sc_keyd = ?,                       \n");
			sb1.append("sc_key_etc = ?,                    \n");
			sb1.append("sc_voicefile = ?,                  \n");
			sb1.append("dg_check = ?,                      \n");
			sb1.append("sc_file_change = ?,                \n");
			sb1.append("sc_cid_route = ?                   \n");
			sb1.append("WHERE sc_code = ?                    ");

			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, rmDTO.getScName());
			pstmt1.setString(2, rmDTO.getScSponsor());
			pstmt1.setString(3, rmDTO.getScNextBox());
			pstmt1.setInt(4, Integer.parseInt(rmDTO.getScHour()));
			pstmt1.setInt(5, Integer.parseInt(rmDTO.getScMakeCallTime()));
			pstmt1.setString(6, rmDTO.getScLang());
			pstmt1.setString(7, rmDTO.getScLogCheck());
			pstmt1.setInt(8, Integer.parseInt(rmDTO.getScAgain()));
			pstmt1.setString(9, rmDTO.getScKeyTo());
			pstmt1.setString(10, rmDTO.getScKey0());
			pstmt1.setString(11, rmDTO.getScKey1());
			pstmt1.setString(12, rmDTO.getScKey2());
			pstmt1.setString(13, rmDTO.getScKey3());
			pstmt1.setString(14, rmDTO.getScKey4());
			pstmt1.setString(15, rmDTO.getScKey5());
			pstmt1.setString(16, rmDTO.getScKey6());
			pstmt1.setString(17, rmDTO.getScKey7());
			pstmt1.setString(18, rmDTO.getScKey8());
			pstmt1.setString(19, rmDTO.getScKey9());
			pstmt1.setString(20, rmDTO.getScKeyAs());
			pstmt1.setString(21, rmDTO.getScKeySh());
			pstmt1.setString(22, rmDTO.getScKeyA());
			pstmt1.setString(23, rmDTO.getScKeyB());
			pstmt1.setString(24, rmDTO.getScKeyC());
			pstmt1.setString(25, rmDTO.getScKeyD());
			pstmt1.setString(26, rmDTO.getScKeyEtc());
			pstmt1.setString(27, rmDTO.getScVoiceFile());
			pstmt1.setString(28, rmDTO.getDgCheck());
			pstmt1.setString(29, rmDTO.getScFileChange());
			pstmt1.setString(30, rmDTO.getScCidRoute());
			pstmt1.setInt(31, Integer.parseInt(rmDTO.getScCode()));

			pstmt1.executeUpdate();

			if(rmDTO.getScType().equals("I")) {
				sb2.append("UPDATE nasa_answer_time SET      \n");
				sb2.append("at_sc_name = ?              \n");
				sb2.append("where at_sc_code = ?          ");
			} else {
				sb2.append("UPDATE nasa_serviceanswer SET      \n");
				sb2.append("na_sc_name = ?                     \n");
				sb2.append("where na_sc_code = ?                 ");
			}

			pstmt2 = cn.prepareStatement(sb2.toString());

			pstmt2.setString(1, rmDTO.getScName());
			pstmt2.setInt(2, Integer.parseInt(rmDTO.getScCode()));

			pstmt2.executeUpdate();

			iRtn = 1;
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public int insertResponseMode(ResponseModeDTO rmDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb1.append("INSERT INTO nasa_callprocessor(sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time,           ");
			sb1.append("sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0, sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6,      ");
			sb1.append("sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc, sc_keyd, sc_key_etc, sc_voicefile,  ");
			sb1.append("dg_check, sc_file_change, sc_cid_route, sc_type, sc_use)                                                      ");
			sb1.append("VALUES(nextval('nasa_callprocessor_sc_code_seq'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");


			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, rmDTO.getScName());
			pstmt1.setString(2, rmDTO.getScSponsor());
			pstmt1.setString(3, rmDTO.getScNextBox());
			pstmt1.setInt(4, Integer.parseInt(rmDTO.getScHour()));
			pstmt1.setInt(5, Integer.parseInt(rmDTO.getScMakeCallTime()));
			pstmt1.setString(6, rmDTO.getScLang());
			pstmt1.setString(7, rmDTO.getScLogCheck());
			pstmt1.setInt(8, Integer.parseInt(rmDTO.getScAgain()));
			pstmt1.setString(9, rmDTO.getScKeyTo());
			pstmt1.setString(10, rmDTO.getScKey0());
			pstmt1.setString(11, rmDTO.getScKey1());
			pstmt1.setString(12, rmDTO.getScKey2());
			pstmt1.setString(13, rmDTO.getScKey3());
			pstmt1.setString(14, rmDTO.getScKey4());
			pstmt1.setString(15, rmDTO.getScKey5());
			pstmt1.setString(16, rmDTO.getScKey6());
			pstmt1.setString(17, rmDTO.getScKey7());
			pstmt1.setString(18, rmDTO.getScKey8());
			pstmt1.setString(19, rmDTO.getScKey9());
			pstmt1.setString(20, rmDTO.getScKeyAs());
			pstmt1.setString(21, rmDTO.getScKeySh());
			pstmt1.setString(22, rmDTO.getScKeyA());
			pstmt1.setString(23, rmDTO.getScKeyB());
			pstmt1.setString(24, rmDTO.getScKeyC());
			pstmt1.setString(25, rmDTO.getScKeyD());
			pstmt1.setString(26, rmDTO.getScKeyEtc());
			pstmt1.setString(27, rmDTO.getScVoiceFile());
			pstmt1.setString(28, rmDTO.getDgCheck());
			pstmt1.setString(29, rmDTO.getScFileChange());
			pstmt1.setString(30, rmDTO.getScCidRoute());
			pstmt1.setString(31, rmDTO.getScType());
			pstmt1.setString(32, rmDTO.getScUse());

			iRtnCnt = pstmt1.executeUpdate();

			sb2.append("select last_value from nasa_callprocessor_sc_code_seq");

			pstmt2 = cn.prepareStatement(sb2.toString());
			rs = pstmt2.executeQuery();
			rs.next();

			if(iRtnCnt > 0) iRtn = rs.getInt(1);

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public ResponseModeDTO getResponseMode(String strScCode) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ResponseModeDTO rmDTO = new ResponseModeDTO();

		try {
			cn = this.getConnection();
			sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck,   \n");
			sb.append("sc_again, sc_keyto, sc_key0, sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7,         \n");
			sb.append("sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc, sc_keyd, sc_key_etc, sc_voicefile, \n");
			sb.append("dg_check, sc_file_change, sc_cid_route                                                              \n");
			sb.append("FROM nasa_callprocessor WHERE sc_code = ?                                                             ");

			pstmt = cn.prepareStatement(sb.toString());
			pstmt.setInt(1, Integer.parseInt(strScCode));

			rs = pstmt.executeQuery();

			if(rs.next()) {
				rmDTO.setScCode(String.valueOf(rs.getInt("sc_code")));
				rmDTO.setScName(rs.getString("sc_name"));
				rmDTO.setScSponsor(rs.getString("sc_sponsor"));
				rmDTO.setScNextBox(rs.getString("sc_nextbox"));
				rmDTO.setScHour(String.valueOf(rs.getInt("sc_hour")));
				rmDTO.setScMakeCallTime(String.valueOf(rs.getInt("sc_makecall_time")));
				rmDTO.setScLang(rs.getString("sc_lang"));
				rmDTO.setScLogCheck(rs.getString("sc_logcheck"));
				rmDTO.setScAgain(String.valueOf(rs.getInt("sc_again")));
				rmDTO.setScKeyTo(rs.getString("sc_keyto"));
				rmDTO.setScKey0(rs.getString("sc_key0"));
				rmDTO.setScKey1(rs.getString("sc_key1"));
				rmDTO.setScKey2(rs.getString("sc_key2"));
				rmDTO.setScKey3(rs.getString("sc_key3"));
				rmDTO.setScKey4(rs.getString("sc_key4"));
				rmDTO.setScKey5(rs.getString("sc_key5"));
				rmDTO.setScKey6(rs.getString("sc_key6"));
				rmDTO.setScKey7(rs.getString("sc_key7"));
				rmDTO.setScKey8(rs.getString("sc_key8"));
				rmDTO.setScKey9(rs.getString("sc_key9"));
				rmDTO.setScKeyAs(rs.getString("sc_keyas"));
				rmDTO.setScKeySh(rs.getString("sc_keysh"));
				rmDTO.setScKeyA(rs.getString("sc_keya"));
				rmDTO.setScKeyB(rs.getString("sc_keyb"));
				rmDTO.setScKeyC(rs.getString("sc_keyc"));
				rmDTO.setScKeyD(rs.getString("sc_keyd"));
				rmDTO.setScKeyEtc(rs.getString("sc_key_etc"));
				rmDTO.setScVoiceFile(rs.getString("sc_voicefile"));
				rmDTO.setDgCheck(rs.getString("dg_check"));
				rmDTO.setScFileChange(rs.getString("sc_file_change"));
				rmDTO.setScCidRoute(rs.getString("sc_cid_route"));
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return rmDTO;

	}

	public List getAllResponseMode(int nType) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList responseModeDTOList = null;

		try {
			cn = this.getConnection();
			switch(nType) {
				case IVR:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor where sc_type = 'I' ORDER BY sc_code ASC                                                                     ");
					break;
				case SERVICE:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor where sc_type = 'S' ORDER BY sc_code ASC                                                                     ");
					break;
				case IVR_SERVICE:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor ORDER BY sc_code ASC                                                                                         ");
					break;
				case ACTIVE_IVR:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor where sc_type = 'I' and sc_use = 'Y' ORDER BY sc_code ASC                                                                     ");
					break;
				case ACTIVE_SERVICE:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor where sc_type = 'S' and sc_use = 'Y' ORDER BY sc_code ASC                                                                     ");
					break;
				case ACTIVE_IVR_SERVICE:
					sb.append("SELECT sc_code, sc_name, sc_sponsor, sc_nextbox, sc_hour, sc_makecall_time, sc_lang, sc_logcheck, sc_again, sc_keyto, sc_key0,     \n");
					sb.append("sc_key1, sc_key2, sc_key3, sc_key4, sc_key5, sc_key6, sc_key7, sc_key8, sc_key9, sc_keyas, sc_keysh, sc_keya, sc_keyb, sc_keyc,    \n");
					sb.append("sc_keyd, sc_key_etc, sc_voicefile, dg_check, sc_file_change, sc_cid_route,                                                         \n");
					sb.append("COALESCE( (select nwu_idx from nasa_wave_use where nwu_filename = sc_voicefile) , 0)as nwu_idx                                     \n");
					sb.append("FROM nasa_callprocessor where sc_use = 'Y' ORDER BY sc_code ASC                                                                                         ");
					break;
			}

			pstmt = cn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();

			responseModeDTOList = new ArrayList();
			if(rs.next()) {
				do {
					ResponseModeDTO rmDTO = new ResponseModeDTO();
					rmDTO.setScCode(String.valueOf(rs.getInt("sc_code")));
					rmDTO.setScName(rs.getString("sc_name"));
					rmDTO.setScSponsor(rs.getString("sc_sponsor"));
					rmDTO.setScNextBox(rs.getString("sc_nextbox"));
					rmDTO.setScHour(String.valueOf(rs.getInt("sc_hour")));
					rmDTO.setScMakeCallTime(String.valueOf(rs.getInt("sc_makecall_time")));
					rmDTO.setScLang(rs.getString("sc_lang"));
					rmDTO.setScLogCheck(rs.getString("sc_logcheck"));
					rmDTO.setScAgain(String.valueOf(rs.getInt("sc_again")));
					rmDTO.setScKeyTo(rs.getString("sc_keyto"));
					rmDTO.setScKey0(rs.getString("sc_key0"));
					rmDTO.setScKey1(rs.getString("sc_key1"));
					rmDTO.setScKey2(rs.getString("sc_key2"));
					rmDTO.setScKey3(rs.getString("sc_key3"));
					rmDTO.setScKey4(rs.getString("sc_key4"));
					rmDTO.setScKey5(rs.getString("sc_key5"));
					rmDTO.setScKey6(rs.getString("sc_key6"));
					rmDTO.setScKey7(rs.getString("sc_key7"));
					rmDTO.setScKey8(rs.getString("sc_key8"));
					rmDTO.setScKey9(rs.getString("sc_key9"));
					rmDTO.setScKeyAs(rs.getString("sc_keyas"));
					rmDTO.setScKeySh(rs.getString("sc_keysh"));
					rmDTO.setScKeyA(rs.getString("sc_keya"));
					rmDTO.setScKeyB(rs.getString("sc_keyb"));
					rmDTO.setScKeyC(rs.getString("sc_keyc"));
					rmDTO.setScKeyD(rs.getString("sc_keyd"));
					rmDTO.setScKeyEtc(rs.getString("sc_key_etc"));
					rmDTO.setScVoiceFile(rs.getString("sc_voicefile"));
					rmDTO.setDgCheck(rs.getString("dg_check"));
					rmDTO.setScFileChange(rs.getString("sc_file_change"));
					rmDTO.setScCidRoute(rs.getString("sc_cid_route"));
					rmDTO.setNwuIdx(String.valueOf(rs.getInt("nwu_idx")));
					responseModeDTOList.add(rmDTO);
				} while(rs.next());
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(responseModeDTOList != null) responseModeDTOList.trimToSize();
		return responseModeDTOList;
	}

}
