package bizportal.nasacti.ipivr.dao;

import java.sql.*;
import java.util.*;
import bizportal.nasacti.ipivr.DBPoolConnector;
import bizportal.nasacti.ipivr.dto.ScheduleDTO;
import bizportal.nasacti.ipivr.dto.ResponseTimeDTO;

public class ResponseTimeDAO extends DBPoolConnector {

	private static ResponseTimeDAO instance = new ResponseTimeDAO();

	public static ResponseTimeDAO getInstance() {
		return instance;
	}

	private ResponseTimeDAO() {

	}


	public int deleteResponseTime(String strAmIndex) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		StringBuffer sb1 = new StringBuffer();
		PreparedStatement pstmt2 = null;
		StringBuffer sb2 = new StringBuffer();
		PreparedStatement pstmt3 = null;
		StringBuffer sb3 = new StringBuffer();
		PreparedStatement pstmt4 = null;

		
		ResultSet rs = null;


		int iRtn = -1;

		try {
			cn = this.getConnection();

			sb2.append("select count(*) from nasa_answer_dateday where am_index = ?");

			pstmt2 = cn.prepareStatement(sb2.toString());

			pstmt2.setInt(1,Integer.parseInt(strAmIndex));

			rs = pstmt2.executeQuery();
			if(rs.next()) {
				if(rs.getInt(1) == 0) {

					sb1.append("DELETE FROM nasa_answer_mode         \n");
					sb1.append("WHERE am_index = ?                   \n");

					pstmt1 = cn.prepareStatement(sb1.toString());

					pstmt1.setInt(1, Integer.parseInt(strAmIndex));

					pstmt1.executeUpdate();

					sb3.append("DELETE FROM nasa_answer_time         \n");
					sb3.append("WHERE am_index = ?                   \n");

					pstmt3 = cn.prepareStatement(sb3.toString());

					pstmt3.setInt(1, Integer.parseInt(strAmIndex));

					pstmt3.executeUpdate();

					iRtn = 1;
					
					String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
					System.out.println("sql : "+ sql);
					pstmt4 = cn.prepareStatement(sql);
					pstmt4.executeUpdate();
				} else {
					iRtn = 2;
				}
			}


		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt3 != null) try{ pstmt3.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt4 != null) try{ pstmt4.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;
	}

	public int updateResponseTime(ResponseTimeDTO responseTimeDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		StringBuffer sb = new StringBuffer();
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		ResultSet rs1 = null;
		int iRtn = -1;

		try {
			cn = this.getConnection();

			sb1.append("SELECT COUNT(*) FROM nasa_answer_mode         \n");
			sb1.append("WHERE am_mode_name = ? AND am_index <> ?        ");

			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, responseTimeDTO.getAmModeName());
			pstmt1.setInt(2, Integer.parseInt(responseTimeDTO.getAmIndex()));

			rs1 = pstmt1.executeQuery();

			if(rs1.next()) {
				if(rs1.getInt(1) == 0) {
					sb.append("UPDATE nasa_answer_mode SET      \n");
					sb.append("am_mode_name = ?,                \n");
					sb.append("am_memo = ?                      \n");
					sb.append("WHERE am_index = ?                 ");

					pstmt = cn.prepareStatement(sb.toString());

					pstmt.setString(1, responseTimeDTO.getAmModeName());
					pstmt.setString(2, responseTimeDTO.getAmMemo());
					pstmt.setInt(3, Integer.parseInt(responseTimeDTO.getAmIndex()));

					pstmt.executeUpdate();

					sb2.append("UPDATE nasa_answer_dateday SET     \n");
					sb2.append("am_mode_name = ?                   \n");
					sb2.append("WHERE am_index = ?                   ");

					pstmt2 = cn.prepareStatement(sb2.toString());
					pstmt2.setString(1,responseTimeDTO.getAmModeName());
					pstmt2.setInt(2, Integer.parseInt(responseTimeDTO.getAmIndex()));

					pstmt2.executeUpdate();

					iRtn = 1;
					
					String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
					System.out.println("sql : "+ sql);
					pstmt3 = cn.prepareStatement(sql);
					pstmt3.executeUpdate();
					
				} else {
					iRtn = 2;   // 스케줄 이름 중복
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs1 != null) try{ rs1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt3 != null) try{ pstmt3.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}
	public ResponseTimeDTO getResponseTime(String strAmIndex) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();
		ResponseTimeDTO responseTimeDTO =  new ResponseTimeDTO();

		try {
			cn = this.getConnection();
			sb.append("SELECT am_index, am_mode_name, am_memo        \n");
			sb.append("FROM nasa_answer_mode WHERE am_index = ?        ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1,Integer.parseInt(strAmIndex));

			rs = pstmt.executeQuery();

			if(rs.next()) {
				responseTimeDTO.setAmIndex(String.valueOf(rs.getInt("am_index")));
				responseTimeDTO.setAmModeName(rs.getString("am_mode_name"));
				responseTimeDTO.setAmMemo(rs.getString("am_memo"));
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return responseTimeDTO;
	}


	public int deleteSchedule(String strAtIndex) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb.append("DELETE FROM nasa_answer_time    \n");
			sb.append("WHERE at_index = ?                ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1, Integer.parseInt(strAtIndex));

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) {
				iRtn = 1;
				
				String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
				System.out.println("sql : "+ sql);
				pstmt2 = cn.prepareStatement(sql);
				pstmt2.executeUpdate();
			}


		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}


	public int updateSchedule(ScheduleDTO scheduleDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();
			sb.append("UPDATE nasa_answer_time SET      \n");
			sb.append("at_start_time = ?,               \n");
			sb.append("at_sc_code = ?,                  \n");
			sb.append("at_sc_name = ?,                  \n");
			sb.append("at_description = ?               \n");
			sb.append("WHERE at_index = ?                 ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setString(1, scheduleDTO.getAtStartTime());
			pstmt.setInt(2, Integer.parseInt(scheduleDTO.getAtScode()));
			pstmt.setString(3, scheduleDTO.getAtScName());
			pstmt.setString(4, scheduleDTO.getAtDescription());
			pstmt.setInt(5, Integer.parseInt(scheduleDTO.getAtIndex()));

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) {
				iRtn = 1;
				
				String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
				System.out.println("sql : "+ sql);
				pstmt2 = cn.prepareStatement(sql);
				pstmt2.executeUpdate();
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public int insertSchedule(String strAmIndex, ScheduleDTO scheduleDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb.append("INSERT INTO nasa_answer_time(at_index, am_index, at_start_time, at_sc_code, at_sc_name, at_description)         \n");
			sb.append("VALUES(nextval('nasa_answer_time_at_index_seq'),?,?,?,?,?)                                                        ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1, Integer.parseInt(strAmIndex));
			pstmt.setString(2, scheduleDTO.getAtStartTime());
			pstmt.setInt(3, Integer.parseInt(scheduleDTO.getAtScode()));
			pstmt.setString(4, scheduleDTO.getAtScName());
			pstmt.setString(5, scheduleDTO.getAtDescription());

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) {
				iRtn = 1;
				
				String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
				System.out.println("sql : "+ sql);
				pstmt2 = cn.prepareStatement(sql);
				pstmt2.executeUpdate();
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;
	}

	public List getSchedule(String strAmIndex) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList scheduleDTOList = null;

		try {
			cn = this.getConnection();
			sb.append("SELECT at_index, am_index, at_start_time, at_sc_code, at_sc_name, at_description  \n");
			sb.append("FROM nasa_answer_time WHERE am_index = ? ORDER BY at_start_time ASC                 ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1,Integer.parseInt(strAmIndex));

			rs = pstmt.executeQuery();

			scheduleDTOList = new ArrayList();
			if(rs.next()) {
				do {
					ScheduleDTO scheduleDTO = new ScheduleDTO();
					scheduleDTO.setAtIndex(String.valueOf(rs.getInt("at_index")));
					scheduleDTO.setAmIndex(String.valueOf(rs.getInt("am_index")));
					scheduleDTO.setAtStartTime(rs.getString("at_start_time"));
					scheduleDTO.setAtScode(String.valueOf(rs.getInt("at_sc_code")));
					scheduleDTO.setAtScName(rs.getString("at_sc_name"));
					scheduleDTO.setAtDescription(rs.getString("at_description"));
					scheduleDTOList.add(scheduleDTO);
				} while(rs.next());
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(scheduleDTOList != null) scheduleDTOList.trimToSize();
		return scheduleDTOList;
	}

	public List getAllResponseTime() throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList responseTimeDTO1List = null;

		try {
			cn = this.getConnection();
			sb.append("SELECT am_index, am_mode_name, am_memo           \n");
			sb.append("FROM nasa_answer_mode ORDER BY am_index ASC        ");

			pstmt = cn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();

			responseTimeDTO1List = new ArrayList();
			if(rs.next()) {
				do {
					ResponseTimeDTO responseTimeDTO = new ResponseTimeDTO();
					responseTimeDTO.setAmIndex(String.valueOf(rs.getInt("am_index")));
					responseTimeDTO.setAmModeName(rs.getString("am_mode_name"));
					responseTimeDTO.setAmMemo(rs.getString("am_memo"));
					responseTimeDTO1List.add(responseTimeDTO);
				} while(rs.next());
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(responseTimeDTO1List != null) responseTimeDTO1List.trimToSize();
		return responseTimeDTO1List;

	}


	public int insertResponseTime(ResponseTimeDTO responseTimeDTO, ScheduleDTO[] aScheduleDTO) {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		PreparedStatement pstmt5 = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		StringBuffer sb3 = new StringBuffer();
		StringBuffer sb4 = new StringBuffer();
		int iRtn = -1;

		try {
			cn = this.getConnection();

			sb1.append("SELECT COUNT(*) FROM nasa_answer_mode         \n");
			sb1.append("WHERE am_mode_name = ?                 \n");

			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, responseTimeDTO.getAmModeName());

			rs1 = pstmt1.executeQuery();
			if(rs1.next()) {
				if(rs1.getInt(1) == 0) {

					sb2.append("INSERT INTO nasa_answer_mode(am_index, am_mode_name, am_memo) ");
					sb2.append("values(nextval('nasa_answer_mode_am_index_seq'),?,?)  ");

					pstmt2 = cn.prepareStatement(sb2.toString());

					pstmt2.setString(1, responseTimeDTO.getAmModeName());
					pstmt2.setString(2, responseTimeDTO.getAmMemo());

					pstmt2.executeUpdate();

					sb4.append("select last_value from nasa_answer_mode_am_index_seq");

					pstmt4 = cn.prepareStatement(sb4.toString());
					rs2 = pstmt4.executeQuery();
					rs2.next();

					sb3.append("INSERT INTO nasa_answer_time(at_index, am_index, at_start_time, at_sc_code, at_sc_name, at_description)         \n");
					sb3.append("VALUES(nextval('nasa_answer_time_at_index_seq'),?,?,?,?,?)                                                                      ");

					pstmt3 = cn.prepareStatement(sb3.toString());

					for(int i=0; i < aScheduleDTO.length; i++) {
						pstmt3.setInt(1, rs2.getInt(1));
						pstmt3.setString(2, aScheduleDTO[i].getAtStartTime());
						pstmt3.setInt(3, Integer.parseInt(aScheduleDTO[i].getAtScode()));
						pstmt3.setString(4, aScheduleDTO[i].getAtScName());
						pstmt3.setString(5, aScheduleDTO[i].getAtDescription());
						pstmt3.executeUpdate();
					}
					iRtn = 1;
					
					String sql = "UPDATE nasa_systemupdate SET su_check = 'Y'";
					System.out.println("sql : "+ sql);
					pstmt5 = cn.prepareStatement(sql);
					pstmt5.executeUpdate();
				} else {
					iRtn = 2;   // 스케줄 이름 중복
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs1 != null) try{ rs1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(rs2 != null) try{ rs2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt3 != null) try{ pstmt3.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt4 != null) try{ pstmt4.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt5 != null) try{ pstmt5.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;
	}
}
