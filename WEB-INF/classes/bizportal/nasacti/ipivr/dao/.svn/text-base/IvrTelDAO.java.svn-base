package bizportal.nasacti.ipivr.dao;

import java.sql.*;
import java.util.*;
import bizportal.nasacti.ipivr.DBPoolConnector;
import bizportal.nasacti.ipivr.dto.IvrTelDTO;

public class IvrTelDAO extends DBPoolConnector {
	private static IvrTelDAO instance = new IvrTelDAO();

	public static IvrTelDAO getInstance() {
		return instance;
	}

	private IvrTelDAO() {
	}

	public int deleteIvrTel(String strTrIdx) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		StringBuffer sb = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;

		try {
			cn = this.getConnection();

			sb.append("DELETE FROM nasa_trunk_set    \n");
			sb.append("WHERE tr_idx = ?         ");

			pstmt = cn.prepareStatement(sb.toString());

			pstmt.setInt(1, Integer.parseInt(strTrIdx));

			iRtnCnt = pstmt.executeUpdate();

			if(iRtnCnt > 0) iRtn = 1;


		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public int updateIvrTel(IvrTelDTO ivrTelDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;


		try {
			cn = this.getConnection();

			sb1.append("SELECT COUNT(*) FROM NASA_TRUNK_SET         \n");
			sb1.append("WHERE ivr_tel = ? AND system_idx = (select system_idx from nasa_system_info where ns_server_ip = ?) AND tr_idx <> ? ");

			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, ivrTelDTO.getIvrTel());
			pstmt1.setString(2, ivrTelDTO.getServerIp());
			pstmt1.setInt(3, Integer.parseInt(ivrTelDTO.getTrIdx()));

			rs = pstmt1.executeQuery();
			if(rs.next()) {
				if(rs.getInt(1) == 0) {
					sb2.append("UPDATE NASA_TRUNK_SET SET      \n");
					sb2.append("server_ip = ?,                 \n");
					sb2.append("ivr_tel = ?,                   \n");
					sb2.append("display_tel = ?,               \n");
					sb2.append("ssw_reg = ?,                   \n");
					sb2.append("ssw_server_ip = ?,             \n");
					sb2.append("ssw_domain_name = ?,           \n");
					sb2.append("ssw_local_port = ?,            \n");
					sb2.append("ssw_remote_port = ?,           \n");
					sb2.append("sc_company = ?,                \n");
					sb2.append("use_yn = ?,                    \n");
					sb2.append("trunk_type = ?,                \n");
					sb2.append("vms_prefix = ?,                \n");
					sb2.append("system_idx = (select system_idx from nasa_system_info where ns_server_ip = ?),                 \n");
					sb2.append("auth_id = ?,                   \n");
					sb2.append("auth_password = ?              \n");
					sb2.append("WHERE tr_idx = ?                 ");

					pstmt2 = cn.prepareStatement(sb2.toString());

					pstmt2.setString(1, ivrTelDTO.getServerIp());
					pstmt2.setString(2, ivrTelDTO.getIvrTel());
					pstmt2.setString(3, ivrTelDTO.getDisplayTel());
					pstmt2.setString(4, ivrTelDTO.getSswReg());
					pstmt2.setString(5, ivrTelDTO.getSswServerIp());
					pstmt2.setString(6, ivrTelDTO.getSswDomainName());
					pstmt2.setInt(7, Integer.parseInt(ivrTelDTO.getSswLocalPort()));
					pstmt2.setInt(8, Integer.parseInt(ivrTelDTO.getSswRemotePort()));
					pstmt2.setString(9, ivrTelDTO.getScCompany());
					pstmt2.setString(10, ivrTelDTO.getUseYN());
					pstmt2.setString(11, ivrTelDTO.getTrunkType());
					pstmt2.setString(12, ivrTelDTO.getVmsPrefix());
					pstmt2.setString(13, ivrTelDTO.getServerIp());
					pstmt2.setString(14, ivrTelDTO.getAuthId());
					pstmt2.setString(15, ivrTelDTO.getAuthPassword());
					pstmt2.setInt(16, Integer.parseInt(ivrTelDTO.getTrIdx()));

					iRtnCnt = pstmt2.executeUpdate();

					if(iRtnCnt > 0) iRtn = 1;

				} else {
					iRtn = 2;
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public IvrTelDTO getIvrTel(String strTrIdx) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		IvrTelDTO ivrTelDTO = new IvrTelDTO();
		try {
			cn = this.getConnection();
			sb.append("SELECT   ");
			sb.append("system_idx, tr_idx, server_ip, ivr_tel, display_tel, ssw_reg, ssw_server_ip, ssw_domain_name, ssw_local_port, ssw_remote_port, sc_company, use_yn, trunk_type, vms_prefix, auth_id, auth_password ");
			sb.append("FROM NASA_TRUNK_SET   ");
			sb.append("WHERE tr_idx = ?   ");

			pstmt = cn.prepareStatement(sb.toString());
			pstmt.setInt(1, Integer.parseInt(strTrIdx));
			rs = pstmt.executeQuery();

			if(rs.next()) {
				ivrTelDTO.setSystemIdx(String.valueOf(rs.getInt("system_idx")));
				ivrTelDTO.setTrIdx(String.valueOf(rs.getInt("tr_idx")));
				ivrTelDTO.setServerIp(rs.getString("server_ip"));
				ivrTelDTO.setIvrTel(rs.getString("ivr_tel"));
				ivrTelDTO.setDisplayTel(rs.getString("display_tel"));
				ivrTelDTO.setSswReg(rs.getString("ssw_reg"));
				ivrTelDTO.setSswServerIp(rs.getString("ssw_server_ip"));
				ivrTelDTO.setSswDomainName(rs.getString("ssw_domain_name"));
				ivrTelDTO.setSswLocalPort(String.valueOf(rs.getInt("ssw_local_port")));
				ivrTelDTO.setSswRemotePort(String.valueOf(rs.getInt("ssw_remote_port")));
				ivrTelDTO.setScCompany(rs.getString("sc_company"));
				ivrTelDTO.setUseYN(rs.getString("use_yn"));
				ivrTelDTO.setTrunkType(rs.getString("trunk_type"));
				ivrTelDTO.setVmsPrefix(rs.getString("vms_prefix"));
				ivrTelDTO.setAuthId(rs.getString("auth_id"));
				ivrTelDTO.setAuthPassword(rs.getString("auth_password"));
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return ivrTelDTO;

	}

	public int insertIvrTel(IvrTelDTO ivrTelDTO) throws Exception {
		Connection cn = null;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer();
		int iRtn = -1;
		int iRtnCnt = 0;


		try {
			cn = this.getConnection();

			sb1.append("SELECT COUNT(*) FROM NASA_TRUNK_SET         \n");
			sb1.append("WHERE ivr_tel = ? AND system_idx = (select system_idx from nasa_system_info where ns_server_ip = ?) ");

			pstmt1 = cn.prepareStatement(sb1.toString());

			pstmt1.setString(1, ivrTelDTO.getIvrTel());
			pstmt1.setString(2, ivrTelDTO.getServerIp());

			rs = pstmt1.executeQuery();
			if(rs.next()) {
				if(rs.getInt(1) == 0) {
					sb2.append("INSERT INTO NASA_TRUNK_SET(system_idx, tr_idx, server_ip, ivr_tel, display_tel, ssw_reg, ssw_server_ip, ssw_domain_name, ssw_local_port, ssw_remote_port, sc_company, use_yn, trunk_type, vms_prefix, auth_id, auth_password)     \n");
					sb2.append("values((select system_idx from nasa_system_info where ns_server_ip = ?),nextval('nasa_trunk_set_tr_idx_seq'),?,?,?,?,?,?,?,?,?,?,?,?,?,?)  \n");

					pstmt2 = cn.prepareStatement(sb2.toString());

					pstmt2.setString(1, ivrTelDTO.getServerIp());
					pstmt2.setString(2, ivrTelDTO.getServerIp());
					pstmt2.setString(3, ivrTelDTO.getIvrTel());
					pstmt2.setString(4, ivrTelDTO.getDisplayTel());
					pstmt2.setString(5, ivrTelDTO.getSswReg());
					pstmt2.setString(6, ivrTelDTO.getSswServerIp());
					pstmt2.setString(7, ivrTelDTO.getSswDomainName());
					pstmt2.setInt(8, Integer.parseInt(ivrTelDTO.getSswLocalPort()));
					pstmt2.setInt(9, Integer.parseInt(ivrTelDTO.getSswRemotePort()));
					pstmt2.setString(10, ivrTelDTO.getScCompany());
					pstmt2.setString(11, ivrTelDTO.getUseYN());
					pstmt2.setString(12, ivrTelDTO.getTrunkType());
					pstmt2.setString(13, ivrTelDTO.getVmsPrefix());
					pstmt2.setString(14, ivrTelDTO.getAuthId());
					pstmt2.setString(15, ivrTelDTO.getAuthPassword());

					iRtnCnt = pstmt2.executeUpdate();

					if(iRtnCnt > 0) iRtn = 1;

				} else {
					iRtn = 2;
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt1 != null) try{ pstmt1.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt2 != null) try{ pstmt2.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return iRtn;

	}

	public List getActiveIvrTel() throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList ivrTelList = null;

		try {
			cn = this.getConnection();
			sb.append("SELECT system_idx, tr_idx, server_ip, ivr_tel, display_tel, ssw_reg, ssw_server_ip, ssw_domain_name, ssw_local_port, ssw_remote_port, sc_company, use_yn, trunk_type, vms_prefix    \n");
			sb.append("FROM NASA_TRUNK_SET                       \n");
			sb.append("WHERE trunk_type = 'N' AND use_yn = 'Y'     ");

			pstmt = cn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();

			ivrTelList = new ArrayList();
			if(rs.next()) {
				do {
					IvrTelDTO ivrTelDTO = new IvrTelDTO();
					ivrTelDTO.setSystemIdx(String.valueOf(rs.getInt("system_idx")));
					ivrTelDTO.setTrIdx(String.valueOf(rs.getInt("tr_idx")));
					ivrTelDTO.setServerIp(rs.getString("server_ip"));
					ivrTelDTO.setIvrTel(rs.getString("ivr_tel"));
					ivrTelDTO.setDisplayTel(rs.getString("display_tel"));
					ivrTelDTO.setSswReg(rs.getString("ssw_reg"));
					ivrTelDTO.setSswServerIp(rs.getString("ssw_server_ip"));
					ivrTelDTO.setSswDomainName(rs.getString("ssw_domain_name"));
					ivrTelDTO.setSswLocalPort(String.valueOf(rs.getInt("ssw_local_port")));
					ivrTelDTO.setSswRemotePort(String.valueOf(rs.getInt("ssw_remote_port")));
					ivrTelDTO.setScCompany(rs.getString("sc_company"));
					ivrTelDTO.setUseYN(rs.getString("use_yn"));
					ivrTelDTO.setTrunkType(rs.getString("trunk_type"));
					ivrTelDTO.setVmsPrefix(rs.getString("vms_prefix"));
					ivrTelList.add(ivrTelDTO);
				} while(rs.next());
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(ivrTelList != null) ivrTelList.trimToSize();
		return ivrTelList;

	}



	public List getAllIvrTel() throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList ivrTelDTOList = null;

		try {
			cn = this.getConnection();
			sb.append("SELECT system_idx, tr_idx, server_ip, ivr_tel, display_tel, ssw_reg, ssw_server_ip, ssw_domain_name, ssw_local_port, ssw_remote_port, sc_company, use_yn, trunk_type, vms_prefix, auth_id, auth_password    \n");
			sb.append("FROM nasa_trunk_set                                         \n");
			sb.append("WHERE trunk_type = 'N' ORDER BY display_tel                   ");

			pstmt = cn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();

			ivrTelDTOList = new ArrayList();
			if(rs.next()) {
				do {
					IvrTelDTO ivrTelDTO = new IvrTelDTO();
					ivrTelDTO.setSystemIdx(String.valueOf(rs.getInt("system_idx")));
					ivrTelDTO.setTrIdx(String.valueOf(rs.getInt("tr_idx")));
					ivrTelDTO.setServerIp(rs.getString("server_ip"));
					ivrTelDTO.setIvrTel(rs.getString("ivr_tel"));
					ivrTelDTO.setDisplayTel(rs.getString("display_tel"));
					ivrTelDTO.setSswReg(rs.getString("ssw_reg"));
					ivrTelDTO.setSswServerIp(rs.getString("ssw_server_ip"));
					ivrTelDTO.setSswDomainName(rs.getString("ssw_domain_name"));
					ivrTelDTO.setSswLocalPort(String.valueOf(rs.getInt("ssw_local_port")));
					ivrTelDTO.setSswRemotePort(String.valueOf(rs.getInt("ssw_remote_port")));
					ivrTelDTO.setScCompany(rs.getString("sc_company"));
					ivrTelDTO.setUseYN(rs.getString("use_yn"));
					ivrTelDTO.setTrunkType(rs.getString("trunk_type"));
					ivrTelDTO.setVmsPrefix(rs.getString("vms_prefix"));
					ivrTelDTO.setAuthId(rs.getString("auth_id"));
					ivrTelDTO.setAuthPassword(rs.getString("auth_password"));
					ivrTelDTOList.add(ivrTelDTO);
				} while(rs.next());
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(ivrTelDTOList != null) ivrTelDTOList.trimToSize();
		return ivrTelDTOList;

	}

	public List getAllCallPark() throws Exception {
		Connection cn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		ArrayList ivrTelDTOList = null;

		try {
			cn = this.getConnection();
			sb.append("SELECT system_idx, tr_idx, server_ip, ivr_tel, display_tel, ssw_reg, ssw_server_ip, ssw_domain_name, ssw_local_port, ssw_remote_port, sc_company, use_yn, trunk_type, vms_prefix, auth_id, auth_password    \n");
			sb.append("FROM NASA_TRUNK_SET                    \n");
			sb.append("WHERE trunk_type = 'P'                   ");

			pstmt = cn.prepareStatement(sb.toString());
			rs = pstmt.executeQuery();

			ivrTelDTOList = new ArrayList();
			if(rs.next()) {
				do {
					IvrTelDTO ivrTelDTO = new IvrTelDTO();
					ivrTelDTO.setSystemIdx(String.valueOf(rs.getInt("system_idx")));
					ivrTelDTO.setTrIdx(String.valueOf(rs.getInt("tr_idx")));
					ivrTelDTO.setServerIp(rs.getString("server_ip"));
					ivrTelDTO.setIvrTel(rs.getString("ivr_tel"));
					ivrTelDTO.setDisplayTel(rs.getString("display_tel"));
					ivrTelDTO.setSswReg(rs.getString("ssw_reg"));
					ivrTelDTO.setSswServerIp(rs.getString("ssw_server_ip"));
					ivrTelDTO.setSswDomainName(rs.getString("ssw_domain_name"));
					ivrTelDTO.setSswLocalPort(String.valueOf(rs.getInt("ssw_local_port")));
					ivrTelDTO.setSswRemotePort(String.valueOf(rs.getInt("ssw_remote_port")));
					ivrTelDTO.setScCompany(rs.getString("sc_company"));
					ivrTelDTO.setUseYN(rs.getString("use_yn"));
					ivrTelDTO.setTrunkType(rs.getString("trunk_type"));
					ivrTelDTO.setVmsPrefix(rs.getString("vms_prefix"));
					ivrTelDTO.setAuthId(rs.getString("auth_id"));
					ivrTelDTO.setAuthPassword(rs.getString("auth_password"));
					ivrTelDTOList.add(ivrTelDTO);
				} while(rs.next());
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) try{ rs.close(); } catch(SQLException se) {se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(cn != null) try{ cn.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		if(ivrTelDTOList != null) ivrTelDTOList.trimToSize();
		return ivrTelDTOList;

	}

}
