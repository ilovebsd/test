package bizportal.nasacti.ipivr.common;
/**
 * 파일 복사, 삭제 기능을 제공하는 클래스
 *
 * <pre>
 * 수정이력:
 *
 * </pre>
 * @author 김선범
 * @modifier
 * @version 1.0.0 (2008.3.27)
 */


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class FileUtil {
	private FileUtil() {
	}


	public synchronized static int delete(String strSource) {
		try {
			File f = new File(strSource);
			if(f.exists())
				f.delete();
			else
				return -3;
		} catch(NullPointerException npe) {
			npe.printStackTrace();
			return -1;
		} catch(SecurityException se) {
			se.printStackTrace();
			return -2;
		}
		return 1;
	}

	public synchronized static int copy(String strSource, String strTarget) {
		InputStream in = null;
		OutputStream out = null;
		byte[] buffer = new byte[1024*8];
		int read = -1;

		try {
			in = new BufferedInputStream(new FileInputStream(strSource));
		} catch(IOException ioe) {
			buffer = null;
			ioe.printStackTrace();
			return -1;           // 원본파일 오픈에러
		}

		try {
			out = new BufferedOutputStream(new FileOutputStream(strTarget));
		} catch(IOException ioe) {
			ioe.printStackTrace();
			try { in.close(); buffer = null;} catch(IOException ioe2) {ioe2.printStackTrace();}
			return -2;          // 목적파일 오픈에러
		}

		try {
			while ((read = in.read(buffer)) != -1) {
				out.write(buffer, 0, read);
			}
			out.flush();
		} catch(IOException ioe) {
			buffer = null;
			ioe.printStackTrace();
			try { in.close(); } catch(IOException ioe2) {ioe2.printStackTrace();}
			try { out.close(); } catch(IOException ioe3) {ioe3.printStackTrace();}
			return -3;          // 목적파일 쓰기에러
		}

		try { in.close(); } catch(IOException ioe) {ioe.printStackTrace();}
		try { out.close(); } catch(IOException ioe) {ioe.printStackTrace();}
		buffer = null;

		return 1;
	}

	public synchronized static byte[] readToBytes(String path, String filename) {
		 
		File file = new File(path+"/"+filename);
		if(!file.isFile())	return null;
		
		ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
		//BufferedOutputStream out = new BufferedOutputStream(bytesOut);
		
		byte[] buff = new byte[64*1024]; //or some size, can try out different sizes for performance
		BufferedInputStream bin = null;
		BufferedOutputStream bout = null;
		try{
			bin = new BufferedInputStream(new FileInputStream(file));
		    //BufferedOutputStream out = new BufferedOutputStream(new FileoutputStream("toFile"));
			bout = new BufferedOutputStream(bytesOut);
		    
		    int n = 0;
		    while ((n = bin.read(buff)) >= 0) {
		    	bout.write(buff, 0, n);
		    }
		}catch (Exception e) {
			e.printStackTrace();
		}finally{
		    if(bin!=null)	try{ bin.close(); }catch (Exception e2) {}
		    if(bout!=null)	try{ bout.close(); }catch (Exception e2) {}
		}
		
		byte[] bytes = bytesOut.toByteArray();
		if(bytesOut!=null) try{	bytesOut.close(); }catch (Exception e) {}
		
		return bytes;
	}
	public synchronized static boolean writeFromBytes(byte[] bytes, String path, String filename) {
		boolean bResult = true; 
		BufferedOutputStream bout = null;
		try{
			bout = new BufferedOutputStream(new FileOutputStream(path+"/"+filename));
			bout.write(bytes);
		}catch (Exception e) {
			e.printStackTrace();
			bResult = false;
		}finally{
			if(bout!=null)	try{ bout.close(); }catch (Exception e2) {}
		}
		return bResult;
	}
}
