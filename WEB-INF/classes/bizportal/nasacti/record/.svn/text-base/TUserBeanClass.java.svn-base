package bizportal.nasacti.record;

import java.util.*;

import java.sql.*;

import bizportal.nasacti.record.TUserBean;

import bizportal.nasacti.ipivr.DBPoolConnector;

public class TUserBeanClass extends DBPoolConnector{

	public TUserBeanClass(){
	}

	public Vector TUserSelect(int adminLevel){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select * From ncr_user Where AdminLevel=? Order By channel";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, adminLevel);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TUserBean tUserBeanSelect = new TUserBean();
				
				tUserBeanSelect.setUserIndex(rs.getInt("user_index"));
				tUserBeanSelect.setUserName(rs.getString("user_name"));
				tUserBeanSelect.setGroupId(rs.getString("GroupID"));
				tUserBeanSelect.setAgtIp(rs.getString("AgtIP"));
				tUserBeanSelect.setPassWord(rs.getString("usr_password"));
				tUserBeanSelect.setChannel(rs.getInt("channel"));
				tUserBeanSelect.setRecType(rs.getInt("RecType"));
				tUserBeanSelect.setAgc(rs.getInt("AGC"));
				//tUserBeanSelect.setRecVolume(rs.getInt("RecVolume"));
				tUserBeanSelect.setRecvVol(rs.getInt("recv_vol"));
				tUserBeanSelect.setSendVol(rs.getInt("send_vol"));
				tUserBeanSelect.setRecMax(rs.getInt("RecMax"));
				tUserBeanSelect.setRecMin(rs.getInt("RecMin"));
				tUserBeanSelect.setPressLaw(rs.getInt("PressLaw"));
				tUserBeanSelect.setYuMuLine(rs.getString("YuMuLine"));
				tUserBeanSelect.setUsaging(rs.getInt("Usaging"));
				tUserBeanSelect.setSilenceTime(rs.getInt("SilenceTime"));
				tUserBeanSelect.setRecLaw(rs.getInt("RecLaw"));

				vList.add(tUserBeanSelect);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TUserSelect(int adminLevel, String sDiv){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select * From ncr_user Where AdminLevel=? ";
			if( (sDiv != "") || (sDiv != null) ){
				query = query + " And channel = ? ";
			}
			query = query + " Order By channel";

			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, adminLevel);
			if( (sDiv != "") || (sDiv != null) ){
				pstmt.setInt(2, Integer.parseInt(sDiv));
			}
			rs = pstmt.executeQuery();

			while(rs.next()){
				TUserBean tUserBeanSelect = new TUserBean();
				
				tUserBeanSelect.setUserName(rs.getString("user_name"));
				tUserBeanSelect.setGroupId(rs.getString("GroupID"));
				tUserBeanSelect.setAgtIp(rs.getString("AgtIP"));
				tUserBeanSelect.setPassWord(rs.getString("usr_password"));
				tUserBeanSelect.setChannel(rs.getInt("channel"));
				tUserBeanSelect.setRecType(rs.getInt("RecType"));
				tUserBeanSelect.setAgc(rs.getInt("AGC"));
				//tUserBeanSelect.setRecVolume(rs.getInt("RecVolume"));
				tUserBeanSelect.setRecvVol(rs.getInt("recv_vol"));
				tUserBeanSelect.setSendVol(rs.getInt("send_vol"));
				tUserBeanSelect.setRecMax(rs.getInt("RecMax"));
				tUserBeanSelect.setRecMin(rs.getInt("RecMin"));
				tUserBeanSelect.setPressLaw(rs.getInt("PressLaw"));
				tUserBeanSelect.setYuMuLine(rs.getString("YuMuLine"));
				tUserBeanSelect.setUsaging(rs.getInt("Usaging"));
				tUserBeanSelect.setSilenceTime(rs.getInt("SilenceTime"));
				tUserBeanSelect.setRecLaw(rs.getInt("RecLaw"));

				vList.add(tUserBeanSelect);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}




	public Vector TUserSelectGid(int userIndex)
	{
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();

		try{
			con=this.getConnection();

			String query = "Select * From ncr_user Where user_index=?";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, userIndex);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TUserBean tUserBeanSelect = new TUserBean();


				tUserBeanSelect.setUserName(rs.getString("user_name"));
				tUserBeanSelect.setGroupId(rs.getString("GroupID"));
				tUserBeanSelect.setExtId(rs.getString("extid"));
				tUserBeanSelect.setAgtIp(rs.getString("AgtIP"));
				tUserBeanSelect.setPassWord(rs.getString("usr_password"));
				tUserBeanSelect.setChannel(rs.getInt("channel"));
				tUserBeanSelect.setRecType(rs.getInt("RecType"));
				tUserBeanSelect.setAgc(rs.getInt("AGC"));
				//tUserBeanSelect.setRecVolume(rs.getInt("RecVolume"));
				tUserBeanSelect.setRecvVol(rs.getInt("recv_vol"));
				tUserBeanSelect.setSendVol(rs.getInt("send_vol"));
				tUserBeanSelect.setRecMax(rs.getInt("RecMax"));
				tUserBeanSelect.setRecMin(rs.getInt("RecMin"));
				tUserBeanSelect.setPressLaw(rs.getInt("PressLaw"));
				tUserBeanSelect.setYuMuLine(rs.getString("YuMuLine"));
				tUserBeanSelect.setUsaging(rs.getInt("Usaging"));
				tUserBeanSelect.setSilenceTime(rs.getInt("SilenceTime"));
				tUserBeanSelect.setRecLaw(rs.getInt("RecLaw"));

				vList.add(tUserBeanSelect);

			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}

	



	public boolean TUserCheck(String groupId){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean checkGid = false;
		try{
			con=this.getConnection();
			int countGid = 0;
			//String query = "Select Count(*) CountGid From t_user Where GroupID=?";
			String query = "Select Count(*) From ncr_user Where GroupID=?";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, groupId);

			rs = pstmt.executeQuery();

			while(rs.next()){
				//countGid = rs.getInt("CountGID");
				countGid = rs.getInt(1);
			}

			if(countGid > 0 ){
				checkGid = true;
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return checkGid;
	}





	public boolean TUserCheck2(String extId){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean checkGid = false;
		try{
			con=this.getConnection();
			int countGid = 0;
			//String query = "Select Count(*) CountGid From t_user Where extId=?";
			String query = "Select Count(*) From ncr_user Where extId=?";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, extId);

			rs = pstmt.executeQuery();

			while(rs.next()){
				//countGid = rs.getInt("CountGID");
				countGid = rs.getInt(1);
			}

			if(countGid > 0 ){
				checkGid = true;
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return checkGid;
	}
















///////////////////////////////////////전화번호////////////////////////////////////////
	public boolean TUserCheck(String groupId, String gId){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean checkGid = false;
		try{
			con=this.getConnection();
			int countGid = 0;
			//String query = "Select Count(*) CountGid From t_user Where (GroupID <> ? ) And (GroupID=?)";
			String query = "Select Count(*) From ncr_user Where (GroupID=?) And (GroupID <> ? )";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, groupId);
			pstmt.setString(2, gId);
			rs = pstmt.executeQuery();

			while(rs.next()){
				//countGid = rs.getInt("CountGID");
				countGid = rs.getInt(1);
			}

			if(countGid > 0 ){
				checkGid = true;
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return checkGid;
	}






/////////////////////////////내선//////////////////////////////////////
	public boolean TUserCheck2(String extid, String gId){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean checkGid = false;
		try{
			con=this.getConnection();
			int countGid = 0;
			//String query = "Select Count(*) CountGid From t_user Where (extid <> ? ) And (extid=?)";
			String query = "Select Count(*) From ncr_user Where (extid=?) And (extid <> ? )";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, extid);
			pstmt.setString(2, gId);
			rs = pstmt.executeQuery();

			while(rs.next()){
				//countGid = rs.getInt("CountGID");
				countGid = rs.getInt(1);
			}

			if(countGid > 0 ){
				checkGid = true;
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return checkGid;
	}






















	public Vector TUserChannelMax(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();
		try{
			con=this.getConnection();

			//String query = "Select Case IsNull(channel) When 0 THEN Max(channel)+1 When 1 THEN 1 End channel From t_user";
			String query = "Select Max( COALESCE(channel , 0) ) + 1 As channel From ncr_user ";


			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TUserBean tUserBeanSelect = new TUserBean();
				
				tUserBeanSelect.setMaxChannel(rs.getInt("channel"));
				vList.add(tUserBeanSelect);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}


	public Vector LineSelect(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		
		Vector vList = new Vector();
		try{
			con=this.getConnection();

			String query = "Select Line From ncr_set";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			TUserBean tUserBean = new TUserBean();

			while(rs.next()){
				tUserBean.setLineSelect(rs.getString("Line"));
				vList.add(tUserBean);
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}


	public void LineAdd(int lineSelect){
		Connection con = null;
		PreparedStatement pstmt = null;

		try{
			int lineAdd =  lineSelect + 1;
				
			con = this.getConnection();
			String strQuery = "Update ncr_set Set Line=? ";
			pstmt = con.prepareStatement(strQuery);
			pstmt.setString(1, Integer.toString(lineAdd));
			pstmt.executeUpdate();
		}catch(Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
	}


	public void LineAdd2(int lineSelect){
		Connection con = null;
		PreparedStatement pstmt = null;

		try{
			int lineAdd =  lineSelect - 1;
				
			con = this.getConnection();
			String strQuery = "Update ncr_set Set Line=? ";
			pstmt = con.prepareStatement(strQuery);
			pstmt.setString(1, Integer.toString(lineAdd));
			pstmt.executeUpdate();
		}catch(Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
	}














	public void TUserInsert(TUserBean tUserInsert){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			con = this.getConnection();
			String strQuery = "Insert Into ncr_user(user_name, GroupID, extid, AgtIP, usr_password, Adminlevel, channel, RecType, AGC, RecVolume, RecMax, RecMin, PressLaw, YuMuLine, Usaging, SilenceTime, RecLaw) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			pstmt = con.prepareStatement(strQuery);
			pstmt.setString(1,tUserInsert.getUserName());
			pstmt.setString(2,tUserInsert.getGroupId());
			pstmt.setString(3,tUserInsert.getExtId());
			pstmt.setString(4,tUserInsert.getAgtIp());
			pstmt.setString(5,tUserInsert.getPassWord());
			pstmt.setInt(6,tUserInsert.getAdminLevel());
			pstmt.setInt(7,tUserInsert.getChannel());
			pstmt.setInt(8,tUserInsert.getRecType());
			pstmt.setInt(9,tUserInsert.getAgc());
			pstmt.setInt(10,tUserInsert.getRecVolume());
			pstmt.setInt(11,tUserInsert.getRecMax());
			pstmt.setFloat(12,tUserInsert.getRecMin());
			pstmt.setInt(13,tUserInsert.getPressLaw());
			pstmt.setString(14,tUserInsert.getYuMuLine());
			pstmt.setInt(15,tUserInsert.getUsaging());
			pstmt.setInt(16,tUserInsert.getSilenceTime());
			pstmt.setInt(17,tUserInsert.getRecLaw());
			
			pstmt.executeUpdate();
		}catch(Exception ex){
			System.out.println("Exception1" + ex);
		}finally{
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
	}

	public void TuserUpdate(TUserBean tUserUpdate){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			con = this.getConnection();
			String strQuery = "Update ncr_user Set ";
			strQuery = strQuery + " user_name = ? , ";
			strQuery = strQuery + " GroupID = ? , ";
			strQuery = strQuery + " AgtIP = ? , ";
			strQuery = strQuery + " usr_password = ? , ";
			strQuery = strQuery + " Adminlevel = ? , ";
			//strQuery = strQuery + " channel = ? , ";
			strQuery = strQuery + " RecType = ? , ";
			strQuery = strQuery + " AGC = ? , ";
			
			//strQuery = strQuery + " RecVolume = ? , ";
			strQuery = strQuery + " recv_vol = ? , ";
			strQuery = strQuery + " send_vol = ? , ";

			strQuery = strQuery + " RecMax = ? , ";
			strQuery = strQuery + " RecMin = ? , ";
			strQuery = strQuery + " PressLaw = ? , ";
			strQuery = strQuery + " YuMuLine = ? , ";
			strQuery = strQuery + " Usaging = ? , ";
			strQuery = strQuery + " SilenceTime = ? , ";
			strQuery = strQuery + " RecLaw = ? ,";
			strQuery = strQuery + " extid = ? ";
			//strQuery = strQuery + " Where GroupID = ? ";
			strQuery = strQuery + " Where user_index = ? ";


			pstmt = con.prepareStatement(strQuery);
			pstmt.setString(1,tUserUpdate.getUserName());
			pstmt.setString(2,tUserUpdate.getGroupId());
			pstmt.setString(3,tUserUpdate.getAgtIp());
			pstmt.setString(4,tUserUpdate.getPassWord());
			pstmt.setInt(5,tUserUpdate.getAdminLevel());
			//pstmt.setInt(5,tUserUpdate.getChannel());
			pstmt.setInt(6,tUserUpdate.getRecType());
			pstmt.setInt(7,tUserUpdate.getAgc());

			//pstmt.setInt(8,tUserUpdate.getRecVolume());
			pstmt.setInt(8,tUserUpdate.getRecvVol());
			pstmt.setInt(9,tUserUpdate.getSendVol());

			pstmt.setInt(10,tUserUpdate.getRecMax());
			pstmt.setFloat(11,tUserUpdate.getRecMin());
			pstmt.setInt(12,tUserUpdate.getPressLaw());
			pstmt.setString(13,tUserUpdate.getYuMuLine());
			pstmt.setInt(14,tUserUpdate.getUsaging());
			pstmt.setInt(15,tUserUpdate.getSilenceTime());
			pstmt.setInt(16,tUserUpdate.getRecLaw());
			pstmt.setString(17,tUserUpdate.getExtId());
			//pstmt.setString(17,tUserUpdate.getGId());
			pstmt.setInt(18,tUserUpdate.getUserIndex());

			pstmt.executeUpdate();
		}catch(Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
	}




	public void TUserDelete(String gId){
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			con = this.getConnection();
			String strQuery = "Delete From ncr_user Where GroupID=?";
			pstmt = con.prepareStatement(strQuery);
			pstmt.setString(1, gId);
			pstmt.executeUpdate();
		}catch(Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
	}


	public Vector TUserCount(int adminLevel){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();
		int countTuser = 0;
		try{
			con=this.getConnection();

			//String query = "Select Count(*) CountTuser From t_user Where AdminLevel=?";
			String query = "Select Count(*) From ncr_user Where AdminLevel=?";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, adminLevel);
			rs = pstmt.executeQuery();

			while(rs.next()){
				//countTuser = rs.getInt("CountTuser");
				countTuser = rs.getInt(1);

				vList.add(countTuser);
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return vList;
	}


	public Vector TUserCount2(int adminLevel, String sDiv){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();
		int countTuser = 0;
	
		try{
			con=this.getConnection();

			//String query = "Select Count(*) CountTuser From t_user Where AdminLevel=? ";
			String query = "Select Count(*) From ncr_user Where AdminLevel=? ";

			if( (sDiv != "") || (sDiv != null) ){
				query = query + " And channel = ? ";
			}

			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, adminLevel);
			if( (sDiv != "") || (sDiv != null) ){
				pstmt.setInt(2, Integer.parseInt(sDiv));
			}
			rs = pstmt.executeQuery();

			while(rs.next()){
				//countTuser = rs.getInt("CountTuser");
				countTuser = rs.getInt(1);

				vList.add(countTuser);
			}

		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}

		return vList;
	}



	public Vector TUserSelectChannel(int adminLevel, String sDiv){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();

		try{
			con = this.getConnection();


			String query = "Select user_name, channel From ncr_user Where Adminlevel = ? ";

			if( (sDiv != "") || (sDiv != null) ){
				query = query + " And channel = ? ";
			}

			query = query + " Order By channel Asc ";

			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, adminLevel);

			if( (sDiv != "") || (sDiv != null) ){
				pstmt.setInt(2, Integer.parseInt(sDiv));
			}
			rs = pstmt.executeQuery();

			TUserBean tUserBean = new TUserBean();

			while(rs.next()){
				tUserBean.setUserName(rs.getString("user_name"));
				tUserBean.setChannel(rs.getInt("channel"));
				vList.add(tUserBean);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		
		return vList;
	}








	public Vector TUserSelectChannel(int channel)
	{
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();

		try{
			con=this.getConnection();

			String query = "Select * From ncr_user Where channel=?";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setInt(1, channel);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TUserBean tUserBeanSelect = new TUserBean();

				tUserBeanSelect.setUserName(rs.getString("user_name"));
				tUserBeanSelect.setGroupId(rs.getString("GroupID"));
				tUserBeanSelect.setExtId(rs.getString("extid"));
				tUserBeanSelect.setAgtIp(rs.getString("AgtIP"));
				tUserBeanSelect.setPassWord(rs.getString("usr_password"));
				tUserBeanSelect.setChannel(rs.getInt("channel"));
				tUserBeanSelect.setRecType(rs.getInt("RecType"));
				tUserBeanSelect.setAgc(rs.getInt("AGC"));
				//tUserBeanSelect.setRecVolume(rs.getInt("RecVolume"));
				tUserBeanSelect.setRecvVol(rs.getInt("recv_vol"));
				tUserBeanSelect.setSendVol(rs.getInt("send_vol"));
				tUserBeanSelect.setRecMax(rs.getInt("RecMax"));
				tUserBeanSelect.setRecMin(rs.getInt("RecMin"));
				tUserBeanSelect.setPressLaw(rs.getInt("PressLaw"));
				tUserBeanSelect.setYuMuLine(rs.getString("YuMuLine"));
				tUserBeanSelect.setUsaging(rs.getInt("Usaging"));
				tUserBeanSelect.setSilenceTime(rs.getInt("SilenceTime"));
				tUserBeanSelect.setRecLaw(rs.getInt("RecLaw"));

				vList.add(tUserBeanSelect);

			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}











}