package bizportal.nasacti.record;

import java.util.*;

import java.sql.*;

import bizportal.nasacti.record.TopFrameBean;

import bizportal.nasacti.ipivr.DBPoolConnector;

public class TopFrameClass extends DBPoolConnector{

	//private DBConnectionMgr pool;
	public TopFrameClass(){

	}

	public Vector TopSocketRecIp(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select Myip From ncr_set";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topSocketRecIp = new TopFrameBean();
				
				topSocketRecIp.setSocketRecIp(rs.getString("Myip"));

				vList.add(topSocketRecIp);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopSocketDriverIp(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select ServerIP From ncr_backupconfig";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topSocketDriverIp = new TopFrameBean();
				
				topSocketDriverIp.setSocketDriverIp(rs.getString("ServerIP"));

				vList.add(topSocketDriverIp);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}




	public Vector TopDayInCount(String rec_date){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select Count(*) As TopDayInCount From ncr_call_log Where rec_date= ? And in_out='I'";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, rec_date);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topDayInCount = new TopFrameBean();
				
				topDayInCount.setDayInCount(rs.getInt("TopDayInCount"));

				vList.add(topDayInCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}


	public Vector TopDayOutCount(String rec_date){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select Count(*) As TopDayOutCount From ncr_call_log Where rec_date= ? And in_out='O'";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, rec_date);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topDayOutCount = new TopFrameBean();
				
				topDayOutCount.setDayOutCount(rs.getInt("TopDayOutCount"));

				vList.add(topDayOutCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopMonthInCount(String rec_date , String rec_date2){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select Count(*) As TopMonthInCount From ncr_call_log Where (rec_date Between ? And ?)  And (in_out='I')";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, rec_date);
			pstmt.setString(2, rec_date2);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topMonthInCount = new TopFrameBean();
				
				topMonthInCount.setMonthInCount(rs.getInt("TopMonthInCount"));

				vList.add(topMonthInCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopMonthOutCount(String rec_date , String rec_date2){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select Count(*) As TopMonthOutCount From ncr_call_log Where (rec_date Between ? And ?) And (in_out='O')";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			pstmt.setString(1, rec_date);
			pstmt.setString(2, rec_date2);
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topMonthOutCount = new TopFrameBean();
				
				topMonthOutCount.setMonthOutCount(rs.getInt("TopMonthOutCount"));

				vList.add(topMonthOutCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}





	public Vector TopAllInCount(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			//String query = "Select Count(*) TopAllInCount From t_call_log Where in_out='1'";
			String query = "Select Count(*) From ncr_call_log Where in_out='I'";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topAllInCount = new TopFrameBean();
				
				topAllInCount.setAllInCount(rs.getInt(1));

				vList.add(topAllInCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopAllOutCount(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			//String query = "Select Count(*) TopAllOutCount From t_call_log Where in_out='0'";
			String query = "Select Count(*) From ncr_call_log Where in_out='O'";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topAllOutCount = new TopFrameBean();
				
				topAllOutCount.setAllOutCount(rs.getInt(1));

				vList.add(topAllOutCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopSangTotalCount(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			//String query = "Select Count(*) TopSangTotalCount From t_user Where Adminlevel=1";
			String query = "Select Count(*) From ncr_user Where Adminlevel=1";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topSangTotalCount = new TopFrameBean();
				
				topSangTotalCount.setSangTotalCount(rs.getInt(1));

				vList.add(topSangTotalCount);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



	public Vector TopTuserInfo(){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vList = new Vector();		
		try{
			con=this.getConnection();

			String query = "Select * From ncr_user Where Adminlevel=1 Order By channel";
			pstmt = con.prepareStatement(query);
			pstmt.clearParameters();
			rs = pstmt.executeQuery();

			while(rs.next()){
				TopFrameBean topTuserInfo = new TopFrameBean();
				
				topTuserInfo.setSangChannel(rs.getString("channel"));
				topTuserInfo.setSangId(rs.getString("GroupID"));
				topTuserInfo.setSangName(rs.getString("user_name"));
				topTuserInfo.setSangYuMu(rs.getString("YuMuLine"));

				vList.add(topTuserInfo);
			}
		}catch (Exception ex){
			System.out.println("Exception" + ex);
		}finally{
			if(rs != null) try{rs.close(); } catch(SQLException se) { se.printStackTrace();}
			if(pstmt != null) try{ pstmt.close(); } catch(SQLException se) {se.printStackTrace();}
			if(con != null) try{ con.close(); } catch(SQLException se) {se.printStackTrace();}
		}
		return vList;
	}



}